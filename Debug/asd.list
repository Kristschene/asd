
asd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040c0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08004180  08004180  00014180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800424c  0800424c  0001424c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08004250  08004250  00014250  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000008  20000000  08004254  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000538  20000008  0800425c  00020008  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000540  0800425c  00020540  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001555c  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002af5  00000000  00000000  0003558c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000b38  00000000  00000000  00038088  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000009f8  00000000  00000000  00038bc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00005f5e  00000000  00000000  000395b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00004449  00000000  00000000  0003f516  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0004395f  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00002774  00000000  00000000  000439dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000008 	.word	0x20000008
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004168 	.word	0x08004168

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000000c 	.word	0x2000000c
 8000104:	08004168 	.word	0x08004168

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_d2uiz>:
 8000220:	b570      	push	{r4, r5, r6, lr}
 8000222:	2200      	movs	r2, #0
 8000224:	4b0c      	ldr	r3, [pc, #48]	; (8000258 <__aeabi_d2uiz+0x38>)
 8000226:	0004      	movs	r4, r0
 8000228:	000d      	movs	r5, r1
 800022a:	f001 f881 	bl	8001330 <__aeabi_dcmpge>
 800022e:	2800      	cmp	r0, #0
 8000230:	d104      	bne.n	800023c <__aeabi_d2uiz+0x1c>
 8000232:	0020      	movs	r0, r4
 8000234:	0029      	movs	r1, r5
 8000236:	f000 ffc1 	bl	80011bc <__aeabi_d2iz>
 800023a:	bd70      	pop	{r4, r5, r6, pc}
 800023c:	4b06      	ldr	r3, [pc, #24]	; (8000258 <__aeabi_d2uiz+0x38>)
 800023e:	2200      	movs	r2, #0
 8000240:	0020      	movs	r0, r4
 8000242:	0029      	movs	r1, r5
 8000244:	f000 fca4 	bl	8000b90 <__aeabi_dsub>
 8000248:	f000 ffb8 	bl	80011bc <__aeabi_d2iz>
 800024c:	2380      	movs	r3, #128	; 0x80
 800024e:	061b      	lsls	r3, r3, #24
 8000250:	469c      	mov	ip, r3
 8000252:	4460      	add	r0, ip
 8000254:	e7f1      	b.n	800023a <__aeabi_d2uiz+0x1a>
 8000256:	46c0      	nop			; (mov r8, r8)
 8000258:	41e00000 	.word	0x41e00000

0800025c <__aeabi_fmul>:
 800025c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800025e:	4657      	mov	r7, sl
 8000260:	464e      	mov	r6, r9
 8000262:	4645      	mov	r5, r8
 8000264:	46de      	mov	lr, fp
 8000266:	b5e0      	push	{r5, r6, r7, lr}
 8000268:	0247      	lsls	r7, r0, #9
 800026a:	0046      	lsls	r6, r0, #1
 800026c:	4688      	mov	r8, r1
 800026e:	0a7f      	lsrs	r7, r7, #9
 8000270:	0e36      	lsrs	r6, r6, #24
 8000272:	0fc4      	lsrs	r4, r0, #31
 8000274:	2e00      	cmp	r6, #0
 8000276:	d047      	beq.n	8000308 <__aeabi_fmul+0xac>
 8000278:	2eff      	cmp	r6, #255	; 0xff
 800027a:	d024      	beq.n	80002c6 <__aeabi_fmul+0x6a>
 800027c:	00fb      	lsls	r3, r7, #3
 800027e:	2780      	movs	r7, #128	; 0x80
 8000280:	04ff      	lsls	r7, r7, #19
 8000282:	431f      	orrs	r7, r3
 8000284:	2300      	movs	r3, #0
 8000286:	4699      	mov	r9, r3
 8000288:	469a      	mov	sl, r3
 800028a:	3e7f      	subs	r6, #127	; 0x7f
 800028c:	4643      	mov	r3, r8
 800028e:	025d      	lsls	r5, r3, #9
 8000290:	0058      	lsls	r0, r3, #1
 8000292:	0fdb      	lsrs	r3, r3, #31
 8000294:	0a6d      	lsrs	r5, r5, #9
 8000296:	0e00      	lsrs	r0, r0, #24
 8000298:	4698      	mov	r8, r3
 800029a:	d043      	beq.n	8000324 <__aeabi_fmul+0xc8>
 800029c:	28ff      	cmp	r0, #255	; 0xff
 800029e:	d03b      	beq.n	8000318 <__aeabi_fmul+0xbc>
 80002a0:	00eb      	lsls	r3, r5, #3
 80002a2:	2580      	movs	r5, #128	; 0x80
 80002a4:	2200      	movs	r2, #0
 80002a6:	04ed      	lsls	r5, r5, #19
 80002a8:	431d      	orrs	r5, r3
 80002aa:	387f      	subs	r0, #127	; 0x7f
 80002ac:	1836      	adds	r6, r6, r0
 80002ae:	1c73      	adds	r3, r6, #1
 80002b0:	4641      	mov	r1, r8
 80002b2:	469b      	mov	fp, r3
 80002b4:	464b      	mov	r3, r9
 80002b6:	4061      	eors	r1, r4
 80002b8:	4313      	orrs	r3, r2
 80002ba:	2b0f      	cmp	r3, #15
 80002bc:	d864      	bhi.n	8000388 <__aeabi_fmul+0x12c>
 80002be:	4875      	ldr	r0, [pc, #468]	; (8000494 <__aeabi_fmul+0x238>)
 80002c0:	009b      	lsls	r3, r3, #2
 80002c2:	58c3      	ldr	r3, [r0, r3]
 80002c4:	469f      	mov	pc, r3
 80002c6:	2f00      	cmp	r7, #0
 80002c8:	d142      	bne.n	8000350 <__aeabi_fmul+0xf4>
 80002ca:	2308      	movs	r3, #8
 80002cc:	4699      	mov	r9, r3
 80002ce:	3b06      	subs	r3, #6
 80002d0:	26ff      	movs	r6, #255	; 0xff
 80002d2:	469a      	mov	sl, r3
 80002d4:	e7da      	b.n	800028c <__aeabi_fmul+0x30>
 80002d6:	4641      	mov	r1, r8
 80002d8:	2a02      	cmp	r2, #2
 80002da:	d028      	beq.n	800032e <__aeabi_fmul+0xd2>
 80002dc:	2a03      	cmp	r2, #3
 80002de:	d100      	bne.n	80002e2 <__aeabi_fmul+0x86>
 80002e0:	e0ce      	b.n	8000480 <__aeabi_fmul+0x224>
 80002e2:	2a01      	cmp	r2, #1
 80002e4:	d000      	beq.n	80002e8 <__aeabi_fmul+0x8c>
 80002e6:	e0ac      	b.n	8000442 <__aeabi_fmul+0x1e6>
 80002e8:	4011      	ands	r1, r2
 80002ea:	2000      	movs	r0, #0
 80002ec:	2200      	movs	r2, #0
 80002ee:	b2cc      	uxtb	r4, r1
 80002f0:	0240      	lsls	r0, r0, #9
 80002f2:	05d2      	lsls	r2, r2, #23
 80002f4:	0a40      	lsrs	r0, r0, #9
 80002f6:	07e4      	lsls	r4, r4, #31
 80002f8:	4310      	orrs	r0, r2
 80002fa:	4320      	orrs	r0, r4
 80002fc:	bc3c      	pop	{r2, r3, r4, r5}
 80002fe:	4690      	mov	r8, r2
 8000300:	4699      	mov	r9, r3
 8000302:	46a2      	mov	sl, r4
 8000304:	46ab      	mov	fp, r5
 8000306:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000308:	2f00      	cmp	r7, #0
 800030a:	d115      	bne.n	8000338 <__aeabi_fmul+0xdc>
 800030c:	2304      	movs	r3, #4
 800030e:	4699      	mov	r9, r3
 8000310:	3b03      	subs	r3, #3
 8000312:	2600      	movs	r6, #0
 8000314:	469a      	mov	sl, r3
 8000316:	e7b9      	b.n	800028c <__aeabi_fmul+0x30>
 8000318:	20ff      	movs	r0, #255	; 0xff
 800031a:	2202      	movs	r2, #2
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0c5      	beq.n	80002ac <__aeabi_fmul+0x50>
 8000320:	2203      	movs	r2, #3
 8000322:	e7c3      	b.n	80002ac <__aeabi_fmul+0x50>
 8000324:	2d00      	cmp	r5, #0
 8000326:	d119      	bne.n	800035c <__aeabi_fmul+0x100>
 8000328:	2000      	movs	r0, #0
 800032a:	2201      	movs	r2, #1
 800032c:	e7be      	b.n	80002ac <__aeabi_fmul+0x50>
 800032e:	2401      	movs	r4, #1
 8000330:	22ff      	movs	r2, #255	; 0xff
 8000332:	400c      	ands	r4, r1
 8000334:	2000      	movs	r0, #0
 8000336:	e7db      	b.n	80002f0 <__aeabi_fmul+0x94>
 8000338:	0038      	movs	r0, r7
 800033a:	f001 f803 	bl	8001344 <__clzsi2>
 800033e:	2676      	movs	r6, #118	; 0x76
 8000340:	1f43      	subs	r3, r0, #5
 8000342:	409f      	lsls	r7, r3
 8000344:	2300      	movs	r3, #0
 8000346:	4276      	negs	r6, r6
 8000348:	1a36      	subs	r6, r6, r0
 800034a:	4699      	mov	r9, r3
 800034c:	469a      	mov	sl, r3
 800034e:	e79d      	b.n	800028c <__aeabi_fmul+0x30>
 8000350:	230c      	movs	r3, #12
 8000352:	4699      	mov	r9, r3
 8000354:	3b09      	subs	r3, #9
 8000356:	26ff      	movs	r6, #255	; 0xff
 8000358:	469a      	mov	sl, r3
 800035a:	e797      	b.n	800028c <__aeabi_fmul+0x30>
 800035c:	0028      	movs	r0, r5
 800035e:	f000 fff1 	bl	8001344 <__clzsi2>
 8000362:	1f43      	subs	r3, r0, #5
 8000364:	409d      	lsls	r5, r3
 8000366:	2376      	movs	r3, #118	; 0x76
 8000368:	425b      	negs	r3, r3
 800036a:	1a18      	subs	r0, r3, r0
 800036c:	2200      	movs	r2, #0
 800036e:	e79d      	b.n	80002ac <__aeabi_fmul+0x50>
 8000370:	2080      	movs	r0, #128	; 0x80
 8000372:	2400      	movs	r4, #0
 8000374:	03c0      	lsls	r0, r0, #15
 8000376:	22ff      	movs	r2, #255	; 0xff
 8000378:	e7ba      	b.n	80002f0 <__aeabi_fmul+0x94>
 800037a:	003d      	movs	r5, r7
 800037c:	4652      	mov	r2, sl
 800037e:	e7ab      	b.n	80002d8 <__aeabi_fmul+0x7c>
 8000380:	003d      	movs	r5, r7
 8000382:	0021      	movs	r1, r4
 8000384:	4652      	mov	r2, sl
 8000386:	e7a7      	b.n	80002d8 <__aeabi_fmul+0x7c>
 8000388:	0c3b      	lsrs	r3, r7, #16
 800038a:	469c      	mov	ip, r3
 800038c:	042a      	lsls	r2, r5, #16
 800038e:	0c12      	lsrs	r2, r2, #16
 8000390:	0c2b      	lsrs	r3, r5, #16
 8000392:	0014      	movs	r4, r2
 8000394:	4660      	mov	r0, ip
 8000396:	4665      	mov	r5, ip
 8000398:	043f      	lsls	r7, r7, #16
 800039a:	0c3f      	lsrs	r7, r7, #16
 800039c:	437c      	muls	r4, r7
 800039e:	4342      	muls	r2, r0
 80003a0:	435d      	muls	r5, r3
 80003a2:	437b      	muls	r3, r7
 80003a4:	0c27      	lsrs	r7, r4, #16
 80003a6:	189b      	adds	r3, r3, r2
 80003a8:	18ff      	adds	r7, r7, r3
 80003aa:	42ba      	cmp	r2, r7
 80003ac:	d903      	bls.n	80003b6 <__aeabi_fmul+0x15a>
 80003ae:	2380      	movs	r3, #128	; 0x80
 80003b0:	025b      	lsls	r3, r3, #9
 80003b2:	469c      	mov	ip, r3
 80003b4:	4465      	add	r5, ip
 80003b6:	0424      	lsls	r4, r4, #16
 80003b8:	043a      	lsls	r2, r7, #16
 80003ba:	0c24      	lsrs	r4, r4, #16
 80003bc:	1912      	adds	r2, r2, r4
 80003be:	0193      	lsls	r3, r2, #6
 80003c0:	1e5c      	subs	r4, r3, #1
 80003c2:	41a3      	sbcs	r3, r4
 80003c4:	0c3f      	lsrs	r7, r7, #16
 80003c6:	0e92      	lsrs	r2, r2, #26
 80003c8:	197d      	adds	r5, r7, r5
 80003ca:	431a      	orrs	r2, r3
 80003cc:	01ad      	lsls	r5, r5, #6
 80003ce:	4315      	orrs	r5, r2
 80003d0:	012b      	lsls	r3, r5, #4
 80003d2:	d504      	bpl.n	80003de <__aeabi_fmul+0x182>
 80003d4:	2301      	movs	r3, #1
 80003d6:	465e      	mov	r6, fp
 80003d8:	086a      	lsrs	r2, r5, #1
 80003da:	401d      	ands	r5, r3
 80003dc:	4315      	orrs	r5, r2
 80003de:	0032      	movs	r2, r6
 80003e0:	327f      	adds	r2, #127	; 0x7f
 80003e2:	2a00      	cmp	r2, #0
 80003e4:	dd25      	ble.n	8000432 <__aeabi_fmul+0x1d6>
 80003e6:	076b      	lsls	r3, r5, #29
 80003e8:	d004      	beq.n	80003f4 <__aeabi_fmul+0x198>
 80003ea:	230f      	movs	r3, #15
 80003ec:	402b      	ands	r3, r5
 80003ee:	2b04      	cmp	r3, #4
 80003f0:	d000      	beq.n	80003f4 <__aeabi_fmul+0x198>
 80003f2:	3504      	adds	r5, #4
 80003f4:	012b      	lsls	r3, r5, #4
 80003f6:	d503      	bpl.n	8000400 <__aeabi_fmul+0x1a4>
 80003f8:	0032      	movs	r2, r6
 80003fa:	4b27      	ldr	r3, [pc, #156]	; (8000498 <__aeabi_fmul+0x23c>)
 80003fc:	3280      	adds	r2, #128	; 0x80
 80003fe:	401d      	ands	r5, r3
 8000400:	2afe      	cmp	r2, #254	; 0xfe
 8000402:	dc94      	bgt.n	800032e <__aeabi_fmul+0xd2>
 8000404:	2401      	movs	r4, #1
 8000406:	01a8      	lsls	r0, r5, #6
 8000408:	0a40      	lsrs	r0, r0, #9
 800040a:	b2d2      	uxtb	r2, r2
 800040c:	400c      	ands	r4, r1
 800040e:	e76f      	b.n	80002f0 <__aeabi_fmul+0x94>
 8000410:	2080      	movs	r0, #128	; 0x80
 8000412:	03c0      	lsls	r0, r0, #15
 8000414:	4207      	tst	r7, r0
 8000416:	d007      	beq.n	8000428 <__aeabi_fmul+0x1cc>
 8000418:	4205      	tst	r5, r0
 800041a:	d105      	bne.n	8000428 <__aeabi_fmul+0x1cc>
 800041c:	4328      	orrs	r0, r5
 800041e:	0240      	lsls	r0, r0, #9
 8000420:	0a40      	lsrs	r0, r0, #9
 8000422:	4644      	mov	r4, r8
 8000424:	22ff      	movs	r2, #255	; 0xff
 8000426:	e763      	b.n	80002f0 <__aeabi_fmul+0x94>
 8000428:	4338      	orrs	r0, r7
 800042a:	0240      	lsls	r0, r0, #9
 800042c:	0a40      	lsrs	r0, r0, #9
 800042e:	22ff      	movs	r2, #255	; 0xff
 8000430:	e75e      	b.n	80002f0 <__aeabi_fmul+0x94>
 8000432:	2401      	movs	r4, #1
 8000434:	1aa3      	subs	r3, r4, r2
 8000436:	2b1b      	cmp	r3, #27
 8000438:	dd05      	ble.n	8000446 <__aeabi_fmul+0x1ea>
 800043a:	400c      	ands	r4, r1
 800043c:	2200      	movs	r2, #0
 800043e:	2000      	movs	r0, #0
 8000440:	e756      	b.n	80002f0 <__aeabi_fmul+0x94>
 8000442:	465e      	mov	r6, fp
 8000444:	e7cb      	b.n	80003de <__aeabi_fmul+0x182>
 8000446:	002a      	movs	r2, r5
 8000448:	2020      	movs	r0, #32
 800044a:	40da      	lsrs	r2, r3
 800044c:	1ac3      	subs	r3, r0, r3
 800044e:	409d      	lsls	r5, r3
 8000450:	002b      	movs	r3, r5
 8000452:	1e5d      	subs	r5, r3, #1
 8000454:	41ab      	sbcs	r3, r5
 8000456:	4313      	orrs	r3, r2
 8000458:	075a      	lsls	r2, r3, #29
 800045a:	d004      	beq.n	8000466 <__aeabi_fmul+0x20a>
 800045c:	220f      	movs	r2, #15
 800045e:	401a      	ands	r2, r3
 8000460:	2a04      	cmp	r2, #4
 8000462:	d000      	beq.n	8000466 <__aeabi_fmul+0x20a>
 8000464:	3304      	adds	r3, #4
 8000466:	015a      	lsls	r2, r3, #5
 8000468:	d504      	bpl.n	8000474 <__aeabi_fmul+0x218>
 800046a:	2401      	movs	r4, #1
 800046c:	2201      	movs	r2, #1
 800046e:	400c      	ands	r4, r1
 8000470:	2000      	movs	r0, #0
 8000472:	e73d      	b.n	80002f0 <__aeabi_fmul+0x94>
 8000474:	2401      	movs	r4, #1
 8000476:	019b      	lsls	r3, r3, #6
 8000478:	0a58      	lsrs	r0, r3, #9
 800047a:	400c      	ands	r4, r1
 800047c:	2200      	movs	r2, #0
 800047e:	e737      	b.n	80002f0 <__aeabi_fmul+0x94>
 8000480:	2080      	movs	r0, #128	; 0x80
 8000482:	2401      	movs	r4, #1
 8000484:	03c0      	lsls	r0, r0, #15
 8000486:	4328      	orrs	r0, r5
 8000488:	0240      	lsls	r0, r0, #9
 800048a:	0a40      	lsrs	r0, r0, #9
 800048c:	400c      	ands	r4, r1
 800048e:	22ff      	movs	r2, #255	; 0xff
 8000490:	e72e      	b.n	80002f0 <__aeabi_fmul+0x94>
 8000492:	46c0      	nop			; (mov r8, r8)
 8000494:	080041b0 	.word	0x080041b0
 8000498:	f7ffffff 	.word	0xf7ffffff

0800049c <__aeabi_ui2f>:
 800049c:	b510      	push	{r4, lr}
 800049e:	1e04      	subs	r4, r0, #0
 80004a0:	d027      	beq.n	80004f2 <__aeabi_ui2f+0x56>
 80004a2:	f000 ff4f 	bl	8001344 <__clzsi2>
 80004a6:	239e      	movs	r3, #158	; 0x9e
 80004a8:	1a1b      	subs	r3, r3, r0
 80004aa:	2b96      	cmp	r3, #150	; 0x96
 80004ac:	dc0a      	bgt.n	80004c4 <__aeabi_ui2f+0x28>
 80004ae:	2296      	movs	r2, #150	; 0x96
 80004b0:	1ad2      	subs	r2, r2, r3
 80004b2:	4094      	lsls	r4, r2
 80004b4:	0264      	lsls	r4, r4, #9
 80004b6:	0a64      	lsrs	r4, r4, #9
 80004b8:	b2db      	uxtb	r3, r3
 80004ba:	0264      	lsls	r4, r4, #9
 80004bc:	05db      	lsls	r3, r3, #23
 80004be:	0a60      	lsrs	r0, r4, #9
 80004c0:	4318      	orrs	r0, r3
 80004c2:	bd10      	pop	{r4, pc}
 80004c4:	2b99      	cmp	r3, #153	; 0x99
 80004c6:	dc17      	bgt.n	80004f8 <__aeabi_ui2f+0x5c>
 80004c8:	2299      	movs	r2, #153	; 0x99
 80004ca:	1ad2      	subs	r2, r2, r3
 80004cc:	2a00      	cmp	r2, #0
 80004ce:	dd27      	ble.n	8000520 <__aeabi_ui2f+0x84>
 80004d0:	4094      	lsls	r4, r2
 80004d2:	0022      	movs	r2, r4
 80004d4:	4c13      	ldr	r4, [pc, #76]	; (8000524 <__aeabi_ui2f+0x88>)
 80004d6:	4014      	ands	r4, r2
 80004d8:	0751      	lsls	r1, r2, #29
 80004da:	d004      	beq.n	80004e6 <__aeabi_ui2f+0x4a>
 80004dc:	210f      	movs	r1, #15
 80004de:	400a      	ands	r2, r1
 80004e0:	2a04      	cmp	r2, #4
 80004e2:	d000      	beq.n	80004e6 <__aeabi_ui2f+0x4a>
 80004e4:	3404      	adds	r4, #4
 80004e6:	0162      	lsls	r2, r4, #5
 80004e8:	d412      	bmi.n	8000510 <__aeabi_ui2f+0x74>
 80004ea:	01a4      	lsls	r4, r4, #6
 80004ec:	0a64      	lsrs	r4, r4, #9
 80004ee:	b2db      	uxtb	r3, r3
 80004f0:	e7e3      	b.n	80004ba <__aeabi_ui2f+0x1e>
 80004f2:	2300      	movs	r3, #0
 80004f4:	2400      	movs	r4, #0
 80004f6:	e7e0      	b.n	80004ba <__aeabi_ui2f+0x1e>
 80004f8:	22b9      	movs	r2, #185	; 0xb9
 80004fa:	0021      	movs	r1, r4
 80004fc:	1ad2      	subs	r2, r2, r3
 80004fe:	4091      	lsls	r1, r2
 8000500:	000a      	movs	r2, r1
 8000502:	1e51      	subs	r1, r2, #1
 8000504:	418a      	sbcs	r2, r1
 8000506:	2105      	movs	r1, #5
 8000508:	1a09      	subs	r1, r1, r0
 800050a:	40cc      	lsrs	r4, r1
 800050c:	4314      	orrs	r4, r2
 800050e:	e7db      	b.n	80004c8 <__aeabi_ui2f+0x2c>
 8000510:	4b04      	ldr	r3, [pc, #16]	; (8000524 <__aeabi_ui2f+0x88>)
 8000512:	401c      	ands	r4, r3
 8000514:	239f      	movs	r3, #159	; 0x9f
 8000516:	01a4      	lsls	r4, r4, #6
 8000518:	1a1b      	subs	r3, r3, r0
 800051a:	0a64      	lsrs	r4, r4, #9
 800051c:	b2db      	uxtb	r3, r3
 800051e:	e7cc      	b.n	80004ba <__aeabi_ui2f+0x1e>
 8000520:	0022      	movs	r2, r4
 8000522:	e7d7      	b.n	80004d4 <__aeabi_ui2f+0x38>
 8000524:	fbffffff 	.word	0xfbffffff

08000528 <__aeabi_ddiv>:
 8000528:	b5f0      	push	{r4, r5, r6, r7, lr}
 800052a:	4657      	mov	r7, sl
 800052c:	4645      	mov	r5, r8
 800052e:	46de      	mov	lr, fp
 8000530:	464e      	mov	r6, r9
 8000532:	b5e0      	push	{r5, r6, r7, lr}
 8000534:	004c      	lsls	r4, r1, #1
 8000536:	030e      	lsls	r6, r1, #12
 8000538:	b087      	sub	sp, #28
 800053a:	4683      	mov	fp, r0
 800053c:	4692      	mov	sl, r2
 800053e:	001d      	movs	r5, r3
 8000540:	4680      	mov	r8, r0
 8000542:	0b36      	lsrs	r6, r6, #12
 8000544:	0d64      	lsrs	r4, r4, #21
 8000546:	0fcf      	lsrs	r7, r1, #31
 8000548:	2c00      	cmp	r4, #0
 800054a:	d04f      	beq.n	80005ec <__aeabi_ddiv+0xc4>
 800054c:	4b6f      	ldr	r3, [pc, #444]	; (800070c <__aeabi_ddiv+0x1e4>)
 800054e:	429c      	cmp	r4, r3
 8000550:	d035      	beq.n	80005be <__aeabi_ddiv+0x96>
 8000552:	2380      	movs	r3, #128	; 0x80
 8000554:	0f42      	lsrs	r2, r0, #29
 8000556:	041b      	lsls	r3, r3, #16
 8000558:	00f6      	lsls	r6, r6, #3
 800055a:	4313      	orrs	r3, r2
 800055c:	4333      	orrs	r3, r6
 800055e:	4699      	mov	r9, r3
 8000560:	00c3      	lsls	r3, r0, #3
 8000562:	4698      	mov	r8, r3
 8000564:	4b6a      	ldr	r3, [pc, #424]	; (8000710 <__aeabi_ddiv+0x1e8>)
 8000566:	2600      	movs	r6, #0
 8000568:	469c      	mov	ip, r3
 800056a:	2300      	movs	r3, #0
 800056c:	4464      	add	r4, ip
 800056e:	9303      	str	r3, [sp, #12]
 8000570:	032b      	lsls	r3, r5, #12
 8000572:	0b1b      	lsrs	r3, r3, #12
 8000574:	469b      	mov	fp, r3
 8000576:	006b      	lsls	r3, r5, #1
 8000578:	0fed      	lsrs	r5, r5, #31
 800057a:	4650      	mov	r0, sl
 800057c:	0d5b      	lsrs	r3, r3, #21
 800057e:	9501      	str	r5, [sp, #4]
 8000580:	d05e      	beq.n	8000640 <__aeabi_ddiv+0x118>
 8000582:	4a62      	ldr	r2, [pc, #392]	; (800070c <__aeabi_ddiv+0x1e4>)
 8000584:	4293      	cmp	r3, r2
 8000586:	d053      	beq.n	8000630 <__aeabi_ddiv+0x108>
 8000588:	465a      	mov	r2, fp
 800058a:	00d1      	lsls	r1, r2, #3
 800058c:	2280      	movs	r2, #128	; 0x80
 800058e:	0f40      	lsrs	r0, r0, #29
 8000590:	0412      	lsls	r2, r2, #16
 8000592:	4302      	orrs	r2, r0
 8000594:	430a      	orrs	r2, r1
 8000596:	4693      	mov	fp, r2
 8000598:	4652      	mov	r2, sl
 800059a:	00d1      	lsls	r1, r2, #3
 800059c:	4a5c      	ldr	r2, [pc, #368]	; (8000710 <__aeabi_ddiv+0x1e8>)
 800059e:	4694      	mov	ip, r2
 80005a0:	2200      	movs	r2, #0
 80005a2:	4463      	add	r3, ip
 80005a4:	0038      	movs	r0, r7
 80005a6:	4068      	eors	r0, r5
 80005a8:	4684      	mov	ip, r0
 80005aa:	9002      	str	r0, [sp, #8]
 80005ac:	1ae4      	subs	r4, r4, r3
 80005ae:	4316      	orrs	r6, r2
 80005b0:	2e0f      	cmp	r6, #15
 80005b2:	d900      	bls.n	80005b6 <__aeabi_ddiv+0x8e>
 80005b4:	e0b4      	b.n	8000720 <__aeabi_ddiv+0x1f8>
 80005b6:	4b57      	ldr	r3, [pc, #348]	; (8000714 <__aeabi_ddiv+0x1ec>)
 80005b8:	00b6      	lsls	r6, r6, #2
 80005ba:	599b      	ldr	r3, [r3, r6]
 80005bc:	469f      	mov	pc, r3
 80005be:	0003      	movs	r3, r0
 80005c0:	4333      	orrs	r3, r6
 80005c2:	4699      	mov	r9, r3
 80005c4:	d16c      	bne.n	80006a0 <__aeabi_ddiv+0x178>
 80005c6:	2300      	movs	r3, #0
 80005c8:	4698      	mov	r8, r3
 80005ca:	3302      	adds	r3, #2
 80005cc:	2608      	movs	r6, #8
 80005ce:	9303      	str	r3, [sp, #12]
 80005d0:	e7ce      	b.n	8000570 <__aeabi_ddiv+0x48>
 80005d2:	46cb      	mov	fp, r9
 80005d4:	4641      	mov	r1, r8
 80005d6:	9a03      	ldr	r2, [sp, #12]
 80005d8:	9701      	str	r7, [sp, #4]
 80005da:	2a02      	cmp	r2, #2
 80005dc:	d165      	bne.n	80006aa <__aeabi_ddiv+0x182>
 80005de:	9b01      	ldr	r3, [sp, #4]
 80005e0:	4c4a      	ldr	r4, [pc, #296]	; (800070c <__aeabi_ddiv+0x1e4>)
 80005e2:	469c      	mov	ip, r3
 80005e4:	2300      	movs	r3, #0
 80005e6:	2200      	movs	r2, #0
 80005e8:	4698      	mov	r8, r3
 80005ea:	e06b      	b.n	80006c4 <__aeabi_ddiv+0x19c>
 80005ec:	0003      	movs	r3, r0
 80005ee:	4333      	orrs	r3, r6
 80005f0:	4699      	mov	r9, r3
 80005f2:	d04e      	beq.n	8000692 <__aeabi_ddiv+0x16a>
 80005f4:	2e00      	cmp	r6, #0
 80005f6:	d100      	bne.n	80005fa <__aeabi_ddiv+0xd2>
 80005f8:	e1bc      	b.n	8000974 <__aeabi_ddiv+0x44c>
 80005fa:	0030      	movs	r0, r6
 80005fc:	f000 fea2 	bl	8001344 <__clzsi2>
 8000600:	0003      	movs	r3, r0
 8000602:	3b0b      	subs	r3, #11
 8000604:	2b1c      	cmp	r3, #28
 8000606:	dd00      	ble.n	800060a <__aeabi_ddiv+0xe2>
 8000608:	e1ac      	b.n	8000964 <__aeabi_ddiv+0x43c>
 800060a:	221d      	movs	r2, #29
 800060c:	1ad3      	subs	r3, r2, r3
 800060e:	465a      	mov	r2, fp
 8000610:	0001      	movs	r1, r0
 8000612:	40da      	lsrs	r2, r3
 8000614:	3908      	subs	r1, #8
 8000616:	408e      	lsls	r6, r1
 8000618:	0013      	movs	r3, r2
 800061a:	4333      	orrs	r3, r6
 800061c:	4699      	mov	r9, r3
 800061e:	465b      	mov	r3, fp
 8000620:	408b      	lsls	r3, r1
 8000622:	4698      	mov	r8, r3
 8000624:	2300      	movs	r3, #0
 8000626:	4c3c      	ldr	r4, [pc, #240]	; (8000718 <__aeabi_ddiv+0x1f0>)
 8000628:	2600      	movs	r6, #0
 800062a:	1a24      	subs	r4, r4, r0
 800062c:	9303      	str	r3, [sp, #12]
 800062e:	e79f      	b.n	8000570 <__aeabi_ddiv+0x48>
 8000630:	4651      	mov	r1, sl
 8000632:	465a      	mov	r2, fp
 8000634:	4311      	orrs	r1, r2
 8000636:	d129      	bne.n	800068c <__aeabi_ddiv+0x164>
 8000638:	2200      	movs	r2, #0
 800063a:	4693      	mov	fp, r2
 800063c:	3202      	adds	r2, #2
 800063e:	e7b1      	b.n	80005a4 <__aeabi_ddiv+0x7c>
 8000640:	4659      	mov	r1, fp
 8000642:	4301      	orrs	r1, r0
 8000644:	d01e      	beq.n	8000684 <__aeabi_ddiv+0x15c>
 8000646:	465b      	mov	r3, fp
 8000648:	2b00      	cmp	r3, #0
 800064a:	d100      	bne.n	800064e <__aeabi_ddiv+0x126>
 800064c:	e19e      	b.n	800098c <__aeabi_ddiv+0x464>
 800064e:	4658      	mov	r0, fp
 8000650:	f000 fe78 	bl	8001344 <__clzsi2>
 8000654:	0003      	movs	r3, r0
 8000656:	3b0b      	subs	r3, #11
 8000658:	2b1c      	cmp	r3, #28
 800065a:	dd00      	ble.n	800065e <__aeabi_ddiv+0x136>
 800065c:	e18f      	b.n	800097e <__aeabi_ddiv+0x456>
 800065e:	0002      	movs	r2, r0
 8000660:	4659      	mov	r1, fp
 8000662:	3a08      	subs	r2, #8
 8000664:	4091      	lsls	r1, r2
 8000666:	468b      	mov	fp, r1
 8000668:	211d      	movs	r1, #29
 800066a:	1acb      	subs	r3, r1, r3
 800066c:	4651      	mov	r1, sl
 800066e:	40d9      	lsrs	r1, r3
 8000670:	000b      	movs	r3, r1
 8000672:	4659      	mov	r1, fp
 8000674:	430b      	orrs	r3, r1
 8000676:	4651      	mov	r1, sl
 8000678:	469b      	mov	fp, r3
 800067a:	4091      	lsls	r1, r2
 800067c:	4b26      	ldr	r3, [pc, #152]	; (8000718 <__aeabi_ddiv+0x1f0>)
 800067e:	2200      	movs	r2, #0
 8000680:	1a1b      	subs	r3, r3, r0
 8000682:	e78f      	b.n	80005a4 <__aeabi_ddiv+0x7c>
 8000684:	2300      	movs	r3, #0
 8000686:	2201      	movs	r2, #1
 8000688:	469b      	mov	fp, r3
 800068a:	e78b      	b.n	80005a4 <__aeabi_ddiv+0x7c>
 800068c:	4651      	mov	r1, sl
 800068e:	2203      	movs	r2, #3
 8000690:	e788      	b.n	80005a4 <__aeabi_ddiv+0x7c>
 8000692:	2300      	movs	r3, #0
 8000694:	4698      	mov	r8, r3
 8000696:	3301      	adds	r3, #1
 8000698:	2604      	movs	r6, #4
 800069a:	2400      	movs	r4, #0
 800069c:	9303      	str	r3, [sp, #12]
 800069e:	e767      	b.n	8000570 <__aeabi_ddiv+0x48>
 80006a0:	2303      	movs	r3, #3
 80006a2:	46b1      	mov	r9, r6
 80006a4:	9303      	str	r3, [sp, #12]
 80006a6:	260c      	movs	r6, #12
 80006a8:	e762      	b.n	8000570 <__aeabi_ddiv+0x48>
 80006aa:	2a03      	cmp	r2, #3
 80006ac:	d100      	bne.n	80006b0 <__aeabi_ddiv+0x188>
 80006ae:	e25c      	b.n	8000b6a <__aeabi_ddiv+0x642>
 80006b0:	9b01      	ldr	r3, [sp, #4]
 80006b2:	2a01      	cmp	r2, #1
 80006b4:	d000      	beq.n	80006b8 <__aeabi_ddiv+0x190>
 80006b6:	e1e4      	b.n	8000a82 <__aeabi_ddiv+0x55a>
 80006b8:	4013      	ands	r3, r2
 80006ba:	469c      	mov	ip, r3
 80006bc:	2300      	movs	r3, #0
 80006be:	2400      	movs	r4, #0
 80006c0:	2200      	movs	r2, #0
 80006c2:	4698      	mov	r8, r3
 80006c4:	2100      	movs	r1, #0
 80006c6:	0312      	lsls	r2, r2, #12
 80006c8:	0b13      	lsrs	r3, r2, #12
 80006ca:	0d0a      	lsrs	r2, r1, #20
 80006cc:	0512      	lsls	r2, r2, #20
 80006ce:	431a      	orrs	r2, r3
 80006d0:	0523      	lsls	r3, r4, #20
 80006d2:	4c12      	ldr	r4, [pc, #72]	; (800071c <__aeabi_ddiv+0x1f4>)
 80006d4:	4640      	mov	r0, r8
 80006d6:	4022      	ands	r2, r4
 80006d8:	4313      	orrs	r3, r2
 80006da:	4662      	mov	r2, ip
 80006dc:	005b      	lsls	r3, r3, #1
 80006de:	07d2      	lsls	r2, r2, #31
 80006e0:	085b      	lsrs	r3, r3, #1
 80006e2:	4313      	orrs	r3, r2
 80006e4:	0019      	movs	r1, r3
 80006e6:	b007      	add	sp, #28
 80006e8:	bc3c      	pop	{r2, r3, r4, r5}
 80006ea:	4690      	mov	r8, r2
 80006ec:	4699      	mov	r9, r3
 80006ee:	46a2      	mov	sl, r4
 80006f0:	46ab      	mov	fp, r5
 80006f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006f4:	2300      	movs	r3, #0
 80006f6:	2280      	movs	r2, #128	; 0x80
 80006f8:	469c      	mov	ip, r3
 80006fa:	0312      	lsls	r2, r2, #12
 80006fc:	4698      	mov	r8, r3
 80006fe:	4c03      	ldr	r4, [pc, #12]	; (800070c <__aeabi_ddiv+0x1e4>)
 8000700:	e7e0      	b.n	80006c4 <__aeabi_ddiv+0x19c>
 8000702:	2300      	movs	r3, #0
 8000704:	4c01      	ldr	r4, [pc, #4]	; (800070c <__aeabi_ddiv+0x1e4>)
 8000706:	2200      	movs	r2, #0
 8000708:	4698      	mov	r8, r3
 800070a:	e7db      	b.n	80006c4 <__aeabi_ddiv+0x19c>
 800070c:	000007ff 	.word	0x000007ff
 8000710:	fffffc01 	.word	0xfffffc01
 8000714:	080041f0 	.word	0x080041f0
 8000718:	fffffc0d 	.word	0xfffffc0d
 800071c:	800fffff 	.word	0x800fffff
 8000720:	45d9      	cmp	r9, fp
 8000722:	d900      	bls.n	8000726 <__aeabi_ddiv+0x1fe>
 8000724:	e139      	b.n	800099a <__aeabi_ddiv+0x472>
 8000726:	d100      	bne.n	800072a <__aeabi_ddiv+0x202>
 8000728:	e134      	b.n	8000994 <__aeabi_ddiv+0x46c>
 800072a:	2300      	movs	r3, #0
 800072c:	4646      	mov	r6, r8
 800072e:	464d      	mov	r5, r9
 8000730:	469a      	mov	sl, r3
 8000732:	3c01      	subs	r4, #1
 8000734:	465b      	mov	r3, fp
 8000736:	0e0a      	lsrs	r2, r1, #24
 8000738:	021b      	lsls	r3, r3, #8
 800073a:	431a      	orrs	r2, r3
 800073c:	020b      	lsls	r3, r1, #8
 800073e:	0c17      	lsrs	r7, r2, #16
 8000740:	9303      	str	r3, [sp, #12]
 8000742:	0413      	lsls	r3, r2, #16
 8000744:	0c1b      	lsrs	r3, r3, #16
 8000746:	0039      	movs	r1, r7
 8000748:	0028      	movs	r0, r5
 800074a:	4690      	mov	r8, r2
 800074c:	9301      	str	r3, [sp, #4]
 800074e:	f7ff fcdb 	bl	8000108 <__udivsi3>
 8000752:	0002      	movs	r2, r0
 8000754:	9b01      	ldr	r3, [sp, #4]
 8000756:	4683      	mov	fp, r0
 8000758:	435a      	muls	r2, r3
 800075a:	0028      	movs	r0, r5
 800075c:	0039      	movs	r1, r7
 800075e:	4691      	mov	r9, r2
 8000760:	f7ff fd58 	bl	8000214 <__aeabi_uidivmod>
 8000764:	0c35      	lsrs	r5, r6, #16
 8000766:	0409      	lsls	r1, r1, #16
 8000768:	430d      	orrs	r5, r1
 800076a:	45a9      	cmp	r9, r5
 800076c:	d90d      	bls.n	800078a <__aeabi_ddiv+0x262>
 800076e:	465b      	mov	r3, fp
 8000770:	4445      	add	r5, r8
 8000772:	3b01      	subs	r3, #1
 8000774:	45a8      	cmp	r8, r5
 8000776:	d900      	bls.n	800077a <__aeabi_ddiv+0x252>
 8000778:	e13a      	b.n	80009f0 <__aeabi_ddiv+0x4c8>
 800077a:	45a9      	cmp	r9, r5
 800077c:	d800      	bhi.n	8000780 <__aeabi_ddiv+0x258>
 800077e:	e137      	b.n	80009f0 <__aeabi_ddiv+0x4c8>
 8000780:	2302      	movs	r3, #2
 8000782:	425b      	negs	r3, r3
 8000784:	469c      	mov	ip, r3
 8000786:	4445      	add	r5, r8
 8000788:	44e3      	add	fp, ip
 800078a:	464b      	mov	r3, r9
 800078c:	1aeb      	subs	r3, r5, r3
 800078e:	0039      	movs	r1, r7
 8000790:	0018      	movs	r0, r3
 8000792:	9304      	str	r3, [sp, #16]
 8000794:	f7ff fcb8 	bl	8000108 <__udivsi3>
 8000798:	9b01      	ldr	r3, [sp, #4]
 800079a:	0005      	movs	r5, r0
 800079c:	4343      	muls	r3, r0
 800079e:	0039      	movs	r1, r7
 80007a0:	9804      	ldr	r0, [sp, #16]
 80007a2:	4699      	mov	r9, r3
 80007a4:	f7ff fd36 	bl	8000214 <__aeabi_uidivmod>
 80007a8:	0433      	lsls	r3, r6, #16
 80007aa:	0409      	lsls	r1, r1, #16
 80007ac:	0c1b      	lsrs	r3, r3, #16
 80007ae:	430b      	orrs	r3, r1
 80007b0:	4599      	cmp	r9, r3
 80007b2:	d909      	bls.n	80007c8 <__aeabi_ddiv+0x2a0>
 80007b4:	4443      	add	r3, r8
 80007b6:	1e6a      	subs	r2, r5, #1
 80007b8:	4598      	cmp	r8, r3
 80007ba:	d900      	bls.n	80007be <__aeabi_ddiv+0x296>
 80007bc:	e11a      	b.n	80009f4 <__aeabi_ddiv+0x4cc>
 80007be:	4599      	cmp	r9, r3
 80007c0:	d800      	bhi.n	80007c4 <__aeabi_ddiv+0x29c>
 80007c2:	e117      	b.n	80009f4 <__aeabi_ddiv+0x4cc>
 80007c4:	3d02      	subs	r5, #2
 80007c6:	4443      	add	r3, r8
 80007c8:	464a      	mov	r2, r9
 80007ca:	1a9b      	subs	r3, r3, r2
 80007cc:	465a      	mov	r2, fp
 80007ce:	0412      	lsls	r2, r2, #16
 80007d0:	432a      	orrs	r2, r5
 80007d2:	9903      	ldr	r1, [sp, #12]
 80007d4:	4693      	mov	fp, r2
 80007d6:	0c10      	lsrs	r0, r2, #16
 80007d8:	0c0a      	lsrs	r2, r1, #16
 80007da:	4691      	mov	r9, r2
 80007dc:	0409      	lsls	r1, r1, #16
 80007de:	465a      	mov	r2, fp
 80007e0:	0c09      	lsrs	r1, r1, #16
 80007e2:	464e      	mov	r6, r9
 80007e4:	000d      	movs	r5, r1
 80007e6:	0412      	lsls	r2, r2, #16
 80007e8:	0c12      	lsrs	r2, r2, #16
 80007ea:	4345      	muls	r5, r0
 80007ec:	9105      	str	r1, [sp, #20]
 80007ee:	4351      	muls	r1, r2
 80007f0:	4372      	muls	r2, r6
 80007f2:	4370      	muls	r0, r6
 80007f4:	1952      	adds	r2, r2, r5
 80007f6:	0c0e      	lsrs	r6, r1, #16
 80007f8:	18b2      	adds	r2, r6, r2
 80007fa:	4295      	cmp	r5, r2
 80007fc:	d903      	bls.n	8000806 <__aeabi_ddiv+0x2de>
 80007fe:	2580      	movs	r5, #128	; 0x80
 8000800:	026d      	lsls	r5, r5, #9
 8000802:	46ac      	mov	ip, r5
 8000804:	4460      	add	r0, ip
 8000806:	0c15      	lsrs	r5, r2, #16
 8000808:	0409      	lsls	r1, r1, #16
 800080a:	0412      	lsls	r2, r2, #16
 800080c:	0c09      	lsrs	r1, r1, #16
 800080e:	1828      	adds	r0, r5, r0
 8000810:	1852      	adds	r2, r2, r1
 8000812:	4283      	cmp	r3, r0
 8000814:	d200      	bcs.n	8000818 <__aeabi_ddiv+0x2f0>
 8000816:	e0ce      	b.n	80009b6 <__aeabi_ddiv+0x48e>
 8000818:	d100      	bne.n	800081c <__aeabi_ddiv+0x2f4>
 800081a:	e0c8      	b.n	80009ae <__aeabi_ddiv+0x486>
 800081c:	1a1d      	subs	r5, r3, r0
 800081e:	4653      	mov	r3, sl
 8000820:	1a9e      	subs	r6, r3, r2
 8000822:	45b2      	cmp	sl, r6
 8000824:	4192      	sbcs	r2, r2
 8000826:	4252      	negs	r2, r2
 8000828:	1aab      	subs	r3, r5, r2
 800082a:	469a      	mov	sl, r3
 800082c:	4598      	cmp	r8, r3
 800082e:	d100      	bne.n	8000832 <__aeabi_ddiv+0x30a>
 8000830:	e117      	b.n	8000a62 <__aeabi_ddiv+0x53a>
 8000832:	0039      	movs	r1, r7
 8000834:	0018      	movs	r0, r3
 8000836:	f7ff fc67 	bl	8000108 <__udivsi3>
 800083a:	9b01      	ldr	r3, [sp, #4]
 800083c:	0005      	movs	r5, r0
 800083e:	4343      	muls	r3, r0
 8000840:	0039      	movs	r1, r7
 8000842:	4650      	mov	r0, sl
 8000844:	9304      	str	r3, [sp, #16]
 8000846:	f7ff fce5 	bl	8000214 <__aeabi_uidivmod>
 800084a:	9804      	ldr	r0, [sp, #16]
 800084c:	040b      	lsls	r3, r1, #16
 800084e:	0c31      	lsrs	r1, r6, #16
 8000850:	4319      	orrs	r1, r3
 8000852:	4288      	cmp	r0, r1
 8000854:	d909      	bls.n	800086a <__aeabi_ddiv+0x342>
 8000856:	4441      	add	r1, r8
 8000858:	1e6b      	subs	r3, r5, #1
 800085a:	4588      	cmp	r8, r1
 800085c:	d900      	bls.n	8000860 <__aeabi_ddiv+0x338>
 800085e:	e107      	b.n	8000a70 <__aeabi_ddiv+0x548>
 8000860:	4288      	cmp	r0, r1
 8000862:	d800      	bhi.n	8000866 <__aeabi_ddiv+0x33e>
 8000864:	e104      	b.n	8000a70 <__aeabi_ddiv+0x548>
 8000866:	3d02      	subs	r5, #2
 8000868:	4441      	add	r1, r8
 800086a:	9b04      	ldr	r3, [sp, #16]
 800086c:	1acb      	subs	r3, r1, r3
 800086e:	0018      	movs	r0, r3
 8000870:	0039      	movs	r1, r7
 8000872:	9304      	str	r3, [sp, #16]
 8000874:	f7ff fc48 	bl	8000108 <__udivsi3>
 8000878:	9b01      	ldr	r3, [sp, #4]
 800087a:	4682      	mov	sl, r0
 800087c:	4343      	muls	r3, r0
 800087e:	0039      	movs	r1, r7
 8000880:	9804      	ldr	r0, [sp, #16]
 8000882:	9301      	str	r3, [sp, #4]
 8000884:	f7ff fcc6 	bl	8000214 <__aeabi_uidivmod>
 8000888:	9801      	ldr	r0, [sp, #4]
 800088a:	040b      	lsls	r3, r1, #16
 800088c:	0431      	lsls	r1, r6, #16
 800088e:	0c09      	lsrs	r1, r1, #16
 8000890:	4319      	orrs	r1, r3
 8000892:	4288      	cmp	r0, r1
 8000894:	d90d      	bls.n	80008b2 <__aeabi_ddiv+0x38a>
 8000896:	4653      	mov	r3, sl
 8000898:	4441      	add	r1, r8
 800089a:	3b01      	subs	r3, #1
 800089c:	4588      	cmp	r8, r1
 800089e:	d900      	bls.n	80008a2 <__aeabi_ddiv+0x37a>
 80008a0:	e0e8      	b.n	8000a74 <__aeabi_ddiv+0x54c>
 80008a2:	4288      	cmp	r0, r1
 80008a4:	d800      	bhi.n	80008a8 <__aeabi_ddiv+0x380>
 80008a6:	e0e5      	b.n	8000a74 <__aeabi_ddiv+0x54c>
 80008a8:	2302      	movs	r3, #2
 80008aa:	425b      	negs	r3, r3
 80008ac:	469c      	mov	ip, r3
 80008ae:	4441      	add	r1, r8
 80008b0:	44e2      	add	sl, ip
 80008b2:	9b01      	ldr	r3, [sp, #4]
 80008b4:	042d      	lsls	r5, r5, #16
 80008b6:	1ace      	subs	r6, r1, r3
 80008b8:	4651      	mov	r1, sl
 80008ba:	4329      	orrs	r1, r5
 80008bc:	9d05      	ldr	r5, [sp, #20]
 80008be:	464f      	mov	r7, r9
 80008c0:	002a      	movs	r2, r5
 80008c2:	040b      	lsls	r3, r1, #16
 80008c4:	0c08      	lsrs	r0, r1, #16
 80008c6:	0c1b      	lsrs	r3, r3, #16
 80008c8:	435a      	muls	r2, r3
 80008ca:	4345      	muls	r5, r0
 80008cc:	437b      	muls	r3, r7
 80008ce:	4378      	muls	r0, r7
 80008d0:	195b      	adds	r3, r3, r5
 80008d2:	0c17      	lsrs	r7, r2, #16
 80008d4:	18fb      	adds	r3, r7, r3
 80008d6:	429d      	cmp	r5, r3
 80008d8:	d903      	bls.n	80008e2 <__aeabi_ddiv+0x3ba>
 80008da:	2580      	movs	r5, #128	; 0x80
 80008dc:	026d      	lsls	r5, r5, #9
 80008de:	46ac      	mov	ip, r5
 80008e0:	4460      	add	r0, ip
 80008e2:	0c1d      	lsrs	r5, r3, #16
 80008e4:	0412      	lsls	r2, r2, #16
 80008e6:	041b      	lsls	r3, r3, #16
 80008e8:	0c12      	lsrs	r2, r2, #16
 80008ea:	1828      	adds	r0, r5, r0
 80008ec:	189b      	adds	r3, r3, r2
 80008ee:	4286      	cmp	r6, r0
 80008f0:	d200      	bcs.n	80008f4 <__aeabi_ddiv+0x3cc>
 80008f2:	e093      	b.n	8000a1c <__aeabi_ddiv+0x4f4>
 80008f4:	d100      	bne.n	80008f8 <__aeabi_ddiv+0x3d0>
 80008f6:	e08e      	b.n	8000a16 <__aeabi_ddiv+0x4ee>
 80008f8:	2301      	movs	r3, #1
 80008fa:	4319      	orrs	r1, r3
 80008fc:	4ba0      	ldr	r3, [pc, #640]	; (8000b80 <__aeabi_ddiv+0x658>)
 80008fe:	18e3      	adds	r3, r4, r3
 8000900:	2b00      	cmp	r3, #0
 8000902:	dc00      	bgt.n	8000906 <__aeabi_ddiv+0x3de>
 8000904:	e099      	b.n	8000a3a <__aeabi_ddiv+0x512>
 8000906:	074a      	lsls	r2, r1, #29
 8000908:	d000      	beq.n	800090c <__aeabi_ddiv+0x3e4>
 800090a:	e09e      	b.n	8000a4a <__aeabi_ddiv+0x522>
 800090c:	465a      	mov	r2, fp
 800090e:	01d2      	lsls	r2, r2, #7
 8000910:	d506      	bpl.n	8000920 <__aeabi_ddiv+0x3f8>
 8000912:	465a      	mov	r2, fp
 8000914:	4b9b      	ldr	r3, [pc, #620]	; (8000b84 <__aeabi_ddiv+0x65c>)
 8000916:	401a      	ands	r2, r3
 8000918:	2380      	movs	r3, #128	; 0x80
 800091a:	4693      	mov	fp, r2
 800091c:	00db      	lsls	r3, r3, #3
 800091e:	18e3      	adds	r3, r4, r3
 8000920:	4a99      	ldr	r2, [pc, #612]	; (8000b88 <__aeabi_ddiv+0x660>)
 8000922:	4293      	cmp	r3, r2
 8000924:	dd68      	ble.n	80009f8 <__aeabi_ddiv+0x4d0>
 8000926:	2301      	movs	r3, #1
 8000928:	9a02      	ldr	r2, [sp, #8]
 800092a:	4c98      	ldr	r4, [pc, #608]	; (8000b8c <__aeabi_ddiv+0x664>)
 800092c:	401a      	ands	r2, r3
 800092e:	2300      	movs	r3, #0
 8000930:	4694      	mov	ip, r2
 8000932:	4698      	mov	r8, r3
 8000934:	2200      	movs	r2, #0
 8000936:	e6c5      	b.n	80006c4 <__aeabi_ddiv+0x19c>
 8000938:	2280      	movs	r2, #128	; 0x80
 800093a:	464b      	mov	r3, r9
 800093c:	0312      	lsls	r2, r2, #12
 800093e:	4213      	tst	r3, r2
 8000940:	d00a      	beq.n	8000958 <__aeabi_ddiv+0x430>
 8000942:	465b      	mov	r3, fp
 8000944:	4213      	tst	r3, r2
 8000946:	d106      	bne.n	8000956 <__aeabi_ddiv+0x42e>
 8000948:	431a      	orrs	r2, r3
 800094a:	0312      	lsls	r2, r2, #12
 800094c:	0b12      	lsrs	r2, r2, #12
 800094e:	46ac      	mov	ip, r5
 8000950:	4688      	mov	r8, r1
 8000952:	4c8e      	ldr	r4, [pc, #568]	; (8000b8c <__aeabi_ddiv+0x664>)
 8000954:	e6b6      	b.n	80006c4 <__aeabi_ddiv+0x19c>
 8000956:	464b      	mov	r3, r9
 8000958:	431a      	orrs	r2, r3
 800095a:	0312      	lsls	r2, r2, #12
 800095c:	0b12      	lsrs	r2, r2, #12
 800095e:	46bc      	mov	ip, r7
 8000960:	4c8a      	ldr	r4, [pc, #552]	; (8000b8c <__aeabi_ddiv+0x664>)
 8000962:	e6af      	b.n	80006c4 <__aeabi_ddiv+0x19c>
 8000964:	0003      	movs	r3, r0
 8000966:	465a      	mov	r2, fp
 8000968:	3b28      	subs	r3, #40	; 0x28
 800096a:	409a      	lsls	r2, r3
 800096c:	2300      	movs	r3, #0
 800096e:	4691      	mov	r9, r2
 8000970:	4698      	mov	r8, r3
 8000972:	e657      	b.n	8000624 <__aeabi_ddiv+0xfc>
 8000974:	4658      	mov	r0, fp
 8000976:	f000 fce5 	bl	8001344 <__clzsi2>
 800097a:	3020      	adds	r0, #32
 800097c:	e640      	b.n	8000600 <__aeabi_ddiv+0xd8>
 800097e:	0003      	movs	r3, r0
 8000980:	4652      	mov	r2, sl
 8000982:	3b28      	subs	r3, #40	; 0x28
 8000984:	409a      	lsls	r2, r3
 8000986:	2100      	movs	r1, #0
 8000988:	4693      	mov	fp, r2
 800098a:	e677      	b.n	800067c <__aeabi_ddiv+0x154>
 800098c:	f000 fcda 	bl	8001344 <__clzsi2>
 8000990:	3020      	adds	r0, #32
 8000992:	e65f      	b.n	8000654 <__aeabi_ddiv+0x12c>
 8000994:	4588      	cmp	r8, r1
 8000996:	d200      	bcs.n	800099a <__aeabi_ddiv+0x472>
 8000998:	e6c7      	b.n	800072a <__aeabi_ddiv+0x202>
 800099a:	464b      	mov	r3, r9
 800099c:	07de      	lsls	r6, r3, #31
 800099e:	085d      	lsrs	r5, r3, #1
 80009a0:	4643      	mov	r3, r8
 80009a2:	085b      	lsrs	r3, r3, #1
 80009a4:	431e      	orrs	r6, r3
 80009a6:	4643      	mov	r3, r8
 80009a8:	07db      	lsls	r3, r3, #31
 80009aa:	469a      	mov	sl, r3
 80009ac:	e6c2      	b.n	8000734 <__aeabi_ddiv+0x20c>
 80009ae:	2500      	movs	r5, #0
 80009b0:	4592      	cmp	sl, r2
 80009b2:	d300      	bcc.n	80009b6 <__aeabi_ddiv+0x48e>
 80009b4:	e733      	b.n	800081e <__aeabi_ddiv+0x2f6>
 80009b6:	9e03      	ldr	r6, [sp, #12]
 80009b8:	4659      	mov	r1, fp
 80009ba:	46b4      	mov	ip, r6
 80009bc:	44e2      	add	sl, ip
 80009be:	45b2      	cmp	sl, r6
 80009c0:	41ad      	sbcs	r5, r5
 80009c2:	426d      	negs	r5, r5
 80009c4:	4445      	add	r5, r8
 80009c6:	18eb      	adds	r3, r5, r3
 80009c8:	3901      	subs	r1, #1
 80009ca:	4598      	cmp	r8, r3
 80009cc:	d207      	bcs.n	80009de <__aeabi_ddiv+0x4b6>
 80009ce:	4298      	cmp	r0, r3
 80009d0:	d900      	bls.n	80009d4 <__aeabi_ddiv+0x4ac>
 80009d2:	e07f      	b.n	8000ad4 <__aeabi_ddiv+0x5ac>
 80009d4:	d100      	bne.n	80009d8 <__aeabi_ddiv+0x4b0>
 80009d6:	e0bc      	b.n	8000b52 <__aeabi_ddiv+0x62a>
 80009d8:	1a1d      	subs	r5, r3, r0
 80009da:	468b      	mov	fp, r1
 80009dc:	e71f      	b.n	800081e <__aeabi_ddiv+0x2f6>
 80009de:	4598      	cmp	r8, r3
 80009e0:	d1fa      	bne.n	80009d8 <__aeabi_ddiv+0x4b0>
 80009e2:	9d03      	ldr	r5, [sp, #12]
 80009e4:	4555      	cmp	r5, sl
 80009e6:	d9f2      	bls.n	80009ce <__aeabi_ddiv+0x4a6>
 80009e8:	4643      	mov	r3, r8
 80009ea:	468b      	mov	fp, r1
 80009ec:	1a1d      	subs	r5, r3, r0
 80009ee:	e716      	b.n	800081e <__aeabi_ddiv+0x2f6>
 80009f0:	469b      	mov	fp, r3
 80009f2:	e6ca      	b.n	800078a <__aeabi_ddiv+0x262>
 80009f4:	0015      	movs	r5, r2
 80009f6:	e6e7      	b.n	80007c8 <__aeabi_ddiv+0x2a0>
 80009f8:	465a      	mov	r2, fp
 80009fa:	08c9      	lsrs	r1, r1, #3
 80009fc:	0752      	lsls	r2, r2, #29
 80009fe:	430a      	orrs	r2, r1
 8000a00:	055b      	lsls	r3, r3, #21
 8000a02:	4690      	mov	r8, r2
 8000a04:	0d5c      	lsrs	r4, r3, #21
 8000a06:	465a      	mov	r2, fp
 8000a08:	2301      	movs	r3, #1
 8000a0a:	9902      	ldr	r1, [sp, #8]
 8000a0c:	0252      	lsls	r2, r2, #9
 8000a0e:	4019      	ands	r1, r3
 8000a10:	0b12      	lsrs	r2, r2, #12
 8000a12:	468c      	mov	ip, r1
 8000a14:	e656      	b.n	80006c4 <__aeabi_ddiv+0x19c>
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d100      	bne.n	8000a1c <__aeabi_ddiv+0x4f4>
 8000a1a:	e76f      	b.n	80008fc <__aeabi_ddiv+0x3d4>
 8000a1c:	4446      	add	r6, r8
 8000a1e:	1e4a      	subs	r2, r1, #1
 8000a20:	45b0      	cmp	r8, r6
 8000a22:	d929      	bls.n	8000a78 <__aeabi_ddiv+0x550>
 8000a24:	0011      	movs	r1, r2
 8000a26:	4286      	cmp	r6, r0
 8000a28:	d000      	beq.n	8000a2c <__aeabi_ddiv+0x504>
 8000a2a:	e765      	b.n	80008f8 <__aeabi_ddiv+0x3d0>
 8000a2c:	9a03      	ldr	r2, [sp, #12]
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d000      	beq.n	8000a34 <__aeabi_ddiv+0x50c>
 8000a32:	e761      	b.n	80008f8 <__aeabi_ddiv+0x3d0>
 8000a34:	e762      	b.n	80008fc <__aeabi_ddiv+0x3d4>
 8000a36:	2101      	movs	r1, #1
 8000a38:	4249      	negs	r1, r1
 8000a3a:	2001      	movs	r0, #1
 8000a3c:	1ac2      	subs	r2, r0, r3
 8000a3e:	2a38      	cmp	r2, #56	; 0x38
 8000a40:	dd21      	ble.n	8000a86 <__aeabi_ddiv+0x55e>
 8000a42:	9b02      	ldr	r3, [sp, #8]
 8000a44:	4003      	ands	r3, r0
 8000a46:	469c      	mov	ip, r3
 8000a48:	e638      	b.n	80006bc <__aeabi_ddiv+0x194>
 8000a4a:	220f      	movs	r2, #15
 8000a4c:	400a      	ands	r2, r1
 8000a4e:	2a04      	cmp	r2, #4
 8000a50:	d100      	bne.n	8000a54 <__aeabi_ddiv+0x52c>
 8000a52:	e75b      	b.n	800090c <__aeabi_ddiv+0x3e4>
 8000a54:	000a      	movs	r2, r1
 8000a56:	1d11      	adds	r1, r2, #4
 8000a58:	4291      	cmp	r1, r2
 8000a5a:	4192      	sbcs	r2, r2
 8000a5c:	4252      	negs	r2, r2
 8000a5e:	4493      	add	fp, r2
 8000a60:	e754      	b.n	800090c <__aeabi_ddiv+0x3e4>
 8000a62:	4b47      	ldr	r3, [pc, #284]	; (8000b80 <__aeabi_ddiv+0x658>)
 8000a64:	18e3      	adds	r3, r4, r3
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	dde5      	ble.n	8000a36 <__aeabi_ddiv+0x50e>
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	4252      	negs	r2, r2
 8000a6e:	e7f2      	b.n	8000a56 <__aeabi_ddiv+0x52e>
 8000a70:	001d      	movs	r5, r3
 8000a72:	e6fa      	b.n	800086a <__aeabi_ddiv+0x342>
 8000a74:	469a      	mov	sl, r3
 8000a76:	e71c      	b.n	80008b2 <__aeabi_ddiv+0x38a>
 8000a78:	42b0      	cmp	r0, r6
 8000a7a:	d839      	bhi.n	8000af0 <__aeabi_ddiv+0x5c8>
 8000a7c:	d06e      	beq.n	8000b5c <__aeabi_ddiv+0x634>
 8000a7e:	0011      	movs	r1, r2
 8000a80:	e73a      	b.n	80008f8 <__aeabi_ddiv+0x3d0>
 8000a82:	9302      	str	r3, [sp, #8]
 8000a84:	e73a      	b.n	80008fc <__aeabi_ddiv+0x3d4>
 8000a86:	2a1f      	cmp	r2, #31
 8000a88:	dc3c      	bgt.n	8000b04 <__aeabi_ddiv+0x5dc>
 8000a8a:	2320      	movs	r3, #32
 8000a8c:	1a9b      	subs	r3, r3, r2
 8000a8e:	000c      	movs	r4, r1
 8000a90:	4658      	mov	r0, fp
 8000a92:	4099      	lsls	r1, r3
 8000a94:	4098      	lsls	r0, r3
 8000a96:	1e4b      	subs	r3, r1, #1
 8000a98:	4199      	sbcs	r1, r3
 8000a9a:	465b      	mov	r3, fp
 8000a9c:	40d4      	lsrs	r4, r2
 8000a9e:	40d3      	lsrs	r3, r2
 8000aa0:	4320      	orrs	r0, r4
 8000aa2:	4308      	orrs	r0, r1
 8000aa4:	001a      	movs	r2, r3
 8000aa6:	0743      	lsls	r3, r0, #29
 8000aa8:	d009      	beq.n	8000abe <__aeabi_ddiv+0x596>
 8000aaa:	230f      	movs	r3, #15
 8000aac:	4003      	ands	r3, r0
 8000aae:	2b04      	cmp	r3, #4
 8000ab0:	d005      	beq.n	8000abe <__aeabi_ddiv+0x596>
 8000ab2:	0001      	movs	r1, r0
 8000ab4:	1d08      	adds	r0, r1, #4
 8000ab6:	4288      	cmp	r0, r1
 8000ab8:	419b      	sbcs	r3, r3
 8000aba:	425b      	negs	r3, r3
 8000abc:	18d2      	adds	r2, r2, r3
 8000abe:	0213      	lsls	r3, r2, #8
 8000ac0:	d53a      	bpl.n	8000b38 <__aeabi_ddiv+0x610>
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	9a02      	ldr	r2, [sp, #8]
 8000ac6:	2401      	movs	r4, #1
 8000ac8:	401a      	ands	r2, r3
 8000aca:	2300      	movs	r3, #0
 8000acc:	4694      	mov	ip, r2
 8000ace:	4698      	mov	r8, r3
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	e5f7      	b.n	80006c4 <__aeabi_ddiv+0x19c>
 8000ad4:	2102      	movs	r1, #2
 8000ad6:	4249      	negs	r1, r1
 8000ad8:	468c      	mov	ip, r1
 8000ada:	9d03      	ldr	r5, [sp, #12]
 8000adc:	44e3      	add	fp, ip
 8000ade:	46ac      	mov	ip, r5
 8000ae0:	44e2      	add	sl, ip
 8000ae2:	45aa      	cmp	sl, r5
 8000ae4:	41ad      	sbcs	r5, r5
 8000ae6:	426d      	negs	r5, r5
 8000ae8:	4445      	add	r5, r8
 8000aea:	18ed      	adds	r5, r5, r3
 8000aec:	1a2d      	subs	r5, r5, r0
 8000aee:	e696      	b.n	800081e <__aeabi_ddiv+0x2f6>
 8000af0:	1e8a      	subs	r2, r1, #2
 8000af2:	9903      	ldr	r1, [sp, #12]
 8000af4:	004d      	lsls	r5, r1, #1
 8000af6:	428d      	cmp	r5, r1
 8000af8:	4189      	sbcs	r1, r1
 8000afa:	4249      	negs	r1, r1
 8000afc:	4441      	add	r1, r8
 8000afe:	1876      	adds	r6, r6, r1
 8000b00:	9503      	str	r5, [sp, #12]
 8000b02:	e78f      	b.n	8000a24 <__aeabi_ddiv+0x4fc>
 8000b04:	201f      	movs	r0, #31
 8000b06:	4240      	negs	r0, r0
 8000b08:	1ac3      	subs	r3, r0, r3
 8000b0a:	4658      	mov	r0, fp
 8000b0c:	40d8      	lsrs	r0, r3
 8000b0e:	0003      	movs	r3, r0
 8000b10:	2a20      	cmp	r2, #32
 8000b12:	d028      	beq.n	8000b66 <__aeabi_ddiv+0x63e>
 8000b14:	2040      	movs	r0, #64	; 0x40
 8000b16:	465d      	mov	r5, fp
 8000b18:	1a82      	subs	r2, r0, r2
 8000b1a:	4095      	lsls	r5, r2
 8000b1c:	4329      	orrs	r1, r5
 8000b1e:	1e4a      	subs	r2, r1, #1
 8000b20:	4191      	sbcs	r1, r2
 8000b22:	4319      	orrs	r1, r3
 8000b24:	2307      	movs	r3, #7
 8000b26:	2200      	movs	r2, #0
 8000b28:	400b      	ands	r3, r1
 8000b2a:	d009      	beq.n	8000b40 <__aeabi_ddiv+0x618>
 8000b2c:	230f      	movs	r3, #15
 8000b2e:	2200      	movs	r2, #0
 8000b30:	400b      	ands	r3, r1
 8000b32:	0008      	movs	r0, r1
 8000b34:	2b04      	cmp	r3, #4
 8000b36:	d1bd      	bne.n	8000ab4 <__aeabi_ddiv+0x58c>
 8000b38:	0001      	movs	r1, r0
 8000b3a:	0753      	lsls	r3, r2, #29
 8000b3c:	0252      	lsls	r2, r2, #9
 8000b3e:	0b12      	lsrs	r2, r2, #12
 8000b40:	08c9      	lsrs	r1, r1, #3
 8000b42:	4319      	orrs	r1, r3
 8000b44:	2301      	movs	r3, #1
 8000b46:	4688      	mov	r8, r1
 8000b48:	9902      	ldr	r1, [sp, #8]
 8000b4a:	2400      	movs	r4, #0
 8000b4c:	4019      	ands	r1, r3
 8000b4e:	468c      	mov	ip, r1
 8000b50:	e5b8      	b.n	80006c4 <__aeabi_ddiv+0x19c>
 8000b52:	4552      	cmp	r2, sl
 8000b54:	d8be      	bhi.n	8000ad4 <__aeabi_ddiv+0x5ac>
 8000b56:	468b      	mov	fp, r1
 8000b58:	2500      	movs	r5, #0
 8000b5a:	e660      	b.n	800081e <__aeabi_ddiv+0x2f6>
 8000b5c:	9d03      	ldr	r5, [sp, #12]
 8000b5e:	429d      	cmp	r5, r3
 8000b60:	d3c6      	bcc.n	8000af0 <__aeabi_ddiv+0x5c8>
 8000b62:	0011      	movs	r1, r2
 8000b64:	e762      	b.n	8000a2c <__aeabi_ddiv+0x504>
 8000b66:	2500      	movs	r5, #0
 8000b68:	e7d8      	b.n	8000b1c <__aeabi_ddiv+0x5f4>
 8000b6a:	2280      	movs	r2, #128	; 0x80
 8000b6c:	465b      	mov	r3, fp
 8000b6e:	0312      	lsls	r2, r2, #12
 8000b70:	431a      	orrs	r2, r3
 8000b72:	9b01      	ldr	r3, [sp, #4]
 8000b74:	0312      	lsls	r2, r2, #12
 8000b76:	0b12      	lsrs	r2, r2, #12
 8000b78:	469c      	mov	ip, r3
 8000b7a:	4688      	mov	r8, r1
 8000b7c:	4c03      	ldr	r4, [pc, #12]	; (8000b8c <__aeabi_ddiv+0x664>)
 8000b7e:	e5a1      	b.n	80006c4 <__aeabi_ddiv+0x19c>
 8000b80:	000003ff 	.word	0x000003ff
 8000b84:	feffffff 	.word	0xfeffffff
 8000b88:	000007fe 	.word	0x000007fe
 8000b8c:	000007ff 	.word	0x000007ff

08000b90 <__aeabi_dsub>:
 8000b90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b92:	4646      	mov	r6, r8
 8000b94:	46d6      	mov	lr, sl
 8000b96:	464f      	mov	r7, r9
 8000b98:	030c      	lsls	r4, r1, #12
 8000b9a:	b5c0      	push	{r6, r7, lr}
 8000b9c:	0fcd      	lsrs	r5, r1, #31
 8000b9e:	004e      	lsls	r6, r1, #1
 8000ba0:	0a61      	lsrs	r1, r4, #9
 8000ba2:	0f44      	lsrs	r4, r0, #29
 8000ba4:	430c      	orrs	r4, r1
 8000ba6:	00c1      	lsls	r1, r0, #3
 8000ba8:	0058      	lsls	r0, r3, #1
 8000baa:	0d40      	lsrs	r0, r0, #21
 8000bac:	4684      	mov	ip, r0
 8000bae:	468a      	mov	sl, r1
 8000bb0:	000f      	movs	r7, r1
 8000bb2:	0319      	lsls	r1, r3, #12
 8000bb4:	0f50      	lsrs	r0, r2, #29
 8000bb6:	0a49      	lsrs	r1, r1, #9
 8000bb8:	4301      	orrs	r1, r0
 8000bba:	48c6      	ldr	r0, [pc, #792]	; (8000ed4 <__aeabi_dsub+0x344>)
 8000bbc:	0d76      	lsrs	r6, r6, #21
 8000bbe:	46a8      	mov	r8, r5
 8000bc0:	0fdb      	lsrs	r3, r3, #31
 8000bc2:	00d2      	lsls	r2, r2, #3
 8000bc4:	4584      	cmp	ip, r0
 8000bc6:	d100      	bne.n	8000bca <__aeabi_dsub+0x3a>
 8000bc8:	e0d8      	b.n	8000d7c <__aeabi_dsub+0x1ec>
 8000bca:	2001      	movs	r0, #1
 8000bcc:	4043      	eors	r3, r0
 8000bce:	42ab      	cmp	r3, r5
 8000bd0:	d100      	bne.n	8000bd4 <__aeabi_dsub+0x44>
 8000bd2:	e0a6      	b.n	8000d22 <__aeabi_dsub+0x192>
 8000bd4:	4660      	mov	r0, ip
 8000bd6:	1a35      	subs	r5, r6, r0
 8000bd8:	2d00      	cmp	r5, #0
 8000bda:	dc00      	bgt.n	8000bde <__aeabi_dsub+0x4e>
 8000bdc:	e105      	b.n	8000dea <__aeabi_dsub+0x25a>
 8000bde:	2800      	cmp	r0, #0
 8000be0:	d110      	bne.n	8000c04 <__aeabi_dsub+0x74>
 8000be2:	000b      	movs	r3, r1
 8000be4:	4313      	orrs	r3, r2
 8000be6:	d100      	bne.n	8000bea <__aeabi_dsub+0x5a>
 8000be8:	e0d7      	b.n	8000d9a <__aeabi_dsub+0x20a>
 8000bea:	1e6b      	subs	r3, r5, #1
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d000      	beq.n	8000bf2 <__aeabi_dsub+0x62>
 8000bf0:	e14b      	b.n	8000e8a <__aeabi_dsub+0x2fa>
 8000bf2:	4653      	mov	r3, sl
 8000bf4:	1a9f      	subs	r7, r3, r2
 8000bf6:	45ba      	cmp	sl, r7
 8000bf8:	4180      	sbcs	r0, r0
 8000bfa:	1a64      	subs	r4, r4, r1
 8000bfc:	4240      	negs	r0, r0
 8000bfe:	1a24      	subs	r4, r4, r0
 8000c00:	2601      	movs	r6, #1
 8000c02:	e01e      	b.n	8000c42 <__aeabi_dsub+0xb2>
 8000c04:	4bb3      	ldr	r3, [pc, #716]	; (8000ed4 <__aeabi_dsub+0x344>)
 8000c06:	429e      	cmp	r6, r3
 8000c08:	d048      	beq.n	8000c9c <__aeabi_dsub+0x10c>
 8000c0a:	2380      	movs	r3, #128	; 0x80
 8000c0c:	041b      	lsls	r3, r3, #16
 8000c0e:	4319      	orrs	r1, r3
 8000c10:	2d38      	cmp	r5, #56	; 0x38
 8000c12:	dd00      	ble.n	8000c16 <__aeabi_dsub+0x86>
 8000c14:	e119      	b.n	8000e4a <__aeabi_dsub+0x2ba>
 8000c16:	2d1f      	cmp	r5, #31
 8000c18:	dd00      	ble.n	8000c1c <__aeabi_dsub+0x8c>
 8000c1a:	e14c      	b.n	8000eb6 <__aeabi_dsub+0x326>
 8000c1c:	2320      	movs	r3, #32
 8000c1e:	000f      	movs	r7, r1
 8000c20:	1b5b      	subs	r3, r3, r5
 8000c22:	0010      	movs	r0, r2
 8000c24:	409a      	lsls	r2, r3
 8000c26:	409f      	lsls	r7, r3
 8000c28:	40e8      	lsrs	r0, r5
 8000c2a:	1e53      	subs	r3, r2, #1
 8000c2c:	419a      	sbcs	r2, r3
 8000c2e:	40e9      	lsrs	r1, r5
 8000c30:	4307      	orrs	r7, r0
 8000c32:	4317      	orrs	r7, r2
 8000c34:	4653      	mov	r3, sl
 8000c36:	1bdf      	subs	r7, r3, r7
 8000c38:	1a61      	subs	r1, r4, r1
 8000c3a:	45ba      	cmp	sl, r7
 8000c3c:	41a4      	sbcs	r4, r4
 8000c3e:	4264      	negs	r4, r4
 8000c40:	1b0c      	subs	r4, r1, r4
 8000c42:	0223      	lsls	r3, r4, #8
 8000c44:	d400      	bmi.n	8000c48 <__aeabi_dsub+0xb8>
 8000c46:	e0c5      	b.n	8000dd4 <__aeabi_dsub+0x244>
 8000c48:	0264      	lsls	r4, r4, #9
 8000c4a:	0a65      	lsrs	r5, r4, #9
 8000c4c:	2d00      	cmp	r5, #0
 8000c4e:	d100      	bne.n	8000c52 <__aeabi_dsub+0xc2>
 8000c50:	e0f6      	b.n	8000e40 <__aeabi_dsub+0x2b0>
 8000c52:	0028      	movs	r0, r5
 8000c54:	f000 fb76 	bl	8001344 <__clzsi2>
 8000c58:	0003      	movs	r3, r0
 8000c5a:	3b08      	subs	r3, #8
 8000c5c:	2b1f      	cmp	r3, #31
 8000c5e:	dd00      	ble.n	8000c62 <__aeabi_dsub+0xd2>
 8000c60:	e0e9      	b.n	8000e36 <__aeabi_dsub+0x2a6>
 8000c62:	2220      	movs	r2, #32
 8000c64:	003c      	movs	r4, r7
 8000c66:	1ad2      	subs	r2, r2, r3
 8000c68:	409d      	lsls	r5, r3
 8000c6a:	40d4      	lsrs	r4, r2
 8000c6c:	409f      	lsls	r7, r3
 8000c6e:	4325      	orrs	r5, r4
 8000c70:	429e      	cmp	r6, r3
 8000c72:	dd00      	ble.n	8000c76 <__aeabi_dsub+0xe6>
 8000c74:	e0db      	b.n	8000e2e <__aeabi_dsub+0x29e>
 8000c76:	1b9e      	subs	r6, r3, r6
 8000c78:	1c73      	adds	r3, r6, #1
 8000c7a:	2b1f      	cmp	r3, #31
 8000c7c:	dd00      	ble.n	8000c80 <__aeabi_dsub+0xf0>
 8000c7e:	e10a      	b.n	8000e96 <__aeabi_dsub+0x306>
 8000c80:	2220      	movs	r2, #32
 8000c82:	0038      	movs	r0, r7
 8000c84:	1ad2      	subs	r2, r2, r3
 8000c86:	0029      	movs	r1, r5
 8000c88:	4097      	lsls	r7, r2
 8000c8a:	002c      	movs	r4, r5
 8000c8c:	4091      	lsls	r1, r2
 8000c8e:	40d8      	lsrs	r0, r3
 8000c90:	1e7a      	subs	r2, r7, #1
 8000c92:	4197      	sbcs	r7, r2
 8000c94:	40dc      	lsrs	r4, r3
 8000c96:	2600      	movs	r6, #0
 8000c98:	4301      	orrs	r1, r0
 8000c9a:	430f      	orrs	r7, r1
 8000c9c:	077b      	lsls	r3, r7, #29
 8000c9e:	d009      	beq.n	8000cb4 <__aeabi_dsub+0x124>
 8000ca0:	230f      	movs	r3, #15
 8000ca2:	403b      	ands	r3, r7
 8000ca4:	2b04      	cmp	r3, #4
 8000ca6:	d005      	beq.n	8000cb4 <__aeabi_dsub+0x124>
 8000ca8:	1d3b      	adds	r3, r7, #4
 8000caa:	42bb      	cmp	r3, r7
 8000cac:	41bf      	sbcs	r7, r7
 8000cae:	427f      	negs	r7, r7
 8000cb0:	19e4      	adds	r4, r4, r7
 8000cb2:	001f      	movs	r7, r3
 8000cb4:	0223      	lsls	r3, r4, #8
 8000cb6:	d525      	bpl.n	8000d04 <__aeabi_dsub+0x174>
 8000cb8:	4b86      	ldr	r3, [pc, #536]	; (8000ed4 <__aeabi_dsub+0x344>)
 8000cba:	3601      	adds	r6, #1
 8000cbc:	429e      	cmp	r6, r3
 8000cbe:	d100      	bne.n	8000cc2 <__aeabi_dsub+0x132>
 8000cc0:	e0af      	b.n	8000e22 <__aeabi_dsub+0x292>
 8000cc2:	4b85      	ldr	r3, [pc, #532]	; (8000ed8 <__aeabi_dsub+0x348>)
 8000cc4:	2501      	movs	r5, #1
 8000cc6:	401c      	ands	r4, r3
 8000cc8:	4643      	mov	r3, r8
 8000cca:	0762      	lsls	r2, r4, #29
 8000ccc:	08ff      	lsrs	r7, r7, #3
 8000cce:	0264      	lsls	r4, r4, #9
 8000cd0:	0576      	lsls	r6, r6, #21
 8000cd2:	4317      	orrs	r7, r2
 8000cd4:	0b24      	lsrs	r4, r4, #12
 8000cd6:	0d76      	lsrs	r6, r6, #21
 8000cd8:	401d      	ands	r5, r3
 8000cda:	2100      	movs	r1, #0
 8000cdc:	0324      	lsls	r4, r4, #12
 8000cde:	0b23      	lsrs	r3, r4, #12
 8000ce0:	0d0c      	lsrs	r4, r1, #20
 8000ce2:	4a7e      	ldr	r2, [pc, #504]	; (8000edc <__aeabi_dsub+0x34c>)
 8000ce4:	0524      	lsls	r4, r4, #20
 8000ce6:	431c      	orrs	r4, r3
 8000ce8:	4014      	ands	r4, r2
 8000cea:	0533      	lsls	r3, r6, #20
 8000cec:	4323      	orrs	r3, r4
 8000cee:	005b      	lsls	r3, r3, #1
 8000cf0:	07ed      	lsls	r5, r5, #31
 8000cf2:	085b      	lsrs	r3, r3, #1
 8000cf4:	432b      	orrs	r3, r5
 8000cf6:	0038      	movs	r0, r7
 8000cf8:	0019      	movs	r1, r3
 8000cfa:	bc1c      	pop	{r2, r3, r4}
 8000cfc:	4690      	mov	r8, r2
 8000cfe:	4699      	mov	r9, r3
 8000d00:	46a2      	mov	sl, r4
 8000d02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d04:	2501      	movs	r5, #1
 8000d06:	4643      	mov	r3, r8
 8000d08:	0762      	lsls	r2, r4, #29
 8000d0a:	08ff      	lsrs	r7, r7, #3
 8000d0c:	4317      	orrs	r7, r2
 8000d0e:	08e4      	lsrs	r4, r4, #3
 8000d10:	401d      	ands	r5, r3
 8000d12:	4b70      	ldr	r3, [pc, #448]	; (8000ed4 <__aeabi_dsub+0x344>)
 8000d14:	429e      	cmp	r6, r3
 8000d16:	d036      	beq.n	8000d86 <__aeabi_dsub+0x1f6>
 8000d18:	0324      	lsls	r4, r4, #12
 8000d1a:	0576      	lsls	r6, r6, #21
 8000d1c:	0b24      	lsrs	r4, r4, #12
 8000d1e:	0d76      	lsrs	r6, r6, #21
 8000d20:	e7db      	b.n	8000cda <__aeabi_dsub+0x14a>
 8000d22:	4663      	mov	r3, ip
 8000d24:	1af3      	subs	r3, r6, r3
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	dc00      	bgt.n	8000d2c <__aeabi_dsub+0x19c>
 8000d2a:	e094      	b.n	8000e56 <__aeabi_dsub+0x2c6>
 8000d2c:	4660      	mov	r0, ip
 8000d2e:	2800      	cmp	r0, #0
 8000d30:	d035      	beq.n	8000d9e <__aeabi_dsub+0x20e>
 8000d32:	4868      	ldr	r0, [pc, #416]	; (8000ed4 <__aeabi_dsub+0x344>)
 8000d34:	4286      	cmp	r6, r0
 8000d36:	d0b1      	beq.n	8000c9c <__aeabi_dsub+0x10c>
 8000d38:	2780      	movs	r7, #128	; 0x80
 8000d3a:	043f      	lsls	r7, r7, #16
 8000d3c:	4339      	orrs	r1, r7
 8000d3e:	2b38      	cmp	r3, #56	; 0x38
 8000d40:	dc00      	bgt.n	8000d44 <__aeabi_dsub+0x1b4>
 8000d42:	e0fd      	b.n	8000f40 <__aeabi_dsub+0x3b0>
 8000d44:	430a      	orrs	r2, r1
 8000d46:	0017      	movs	r7, r2
 8000d48:	2100      	movs	r1, #0
 8000d4a:	1e7a      	subs	r2, r7, #1
 8000d4c:	4197      	sbcs	r7, r2
 8000d4e:	4457      	add	r7, sl
 8000d50:	4557      	cmp	r7, sl
 8000d52:	4180      	sbcs	r0, r0
 8000d54:	1909      	adds	r1, r1, r4
 8000d56:	4244      	negs	r4, r0
 8000d58:	190c      	adds	r4, r1, r4
 8000d5a:	0223      	lsls	r3, r4, #8
 8000d5c:	d53a      	bpl.n	8000dd4 <__aeabi_dsub+0x244>
 8000d5e:	4b5d      	ldr	r3, [pc, #372]	; (8000ed4 <__aeabi_dsub+0x344>)
 8000d60:	3601      	adds	r6, #1
 8000d62:	429e      	cmp	r6, r3
 8000d64:	d100      	bne.n	8000d68 <__aeabi_dsub+0x1d8>
 8000d66:	e14b      	b.n	8001000 <__aeabi_dsub+0x470>
 8000d68:	2201      	movs	r2, #1
 8000d6a:	4b5b      	ldr	r3, [pc, #364]	; (8000ed8 <__aeabi_dsub+0x348>)
 8000d6c:	401c      	ands	r4, r3
 8000d6e:	087b      	lsrs	r3, r7, #1
 8000d70:	4017      	ands	r7, r2
 8000d72:	431f      	orrs	r7, r3
 8000d74:	07e2      	lsls	r2, r4, #31
 8000d76:	4317      	orrs	r7, r2
 8000d78:	0864      	lsrs	r4, r4, #1
 8000d7a:	e78f      	b.n	8000c9c <__aeabi_dsub+0x10c>
 8000d7c:	0008      	movs	r0, r1
 8000d7e:	4310      	orrs	r0, r2
 8000d80:	d000      	beq.n	8000d84 <__aeabi_dsub+0x1f4>
 8000d82:	e724      	b.n	8000bce <__aeabi_dsub+0x3e>
 8000d84:	e721      	b.n	8000bca <__aeabi_dsub+0x3a>
 8000d86:	0023      	movs	r3, r4
 8000d88:	433b      	orrs	r3, r7
 8000d8a:	d100      	bne.n	8000d8e <__aeabi_dsub+0x1fe>
 8000d8c:	e1b9      	b.n	8001102 <__aeabi_dsub+0x572>
 8000d8e:	2280      	movs	r2, #128	; 0x80
 8000d90:	0312      	lsls	r2, r2, #12
 8000d92:	4314      	orrs	r4, r2
 8000d94:	0324      	lsls	r4, r4, #12
 8000d96:	0b24      	lsrs	r4, r4, #12
 8000d98:	e79f      	b.n	8000cda <__aeabi_dsub+0x14a>
 8000d9a:	002e      	movs	r6, r5
 8000d9c:	e77e      	b.n	8000c9c <__aeabi_dsub+0x10c>
 8000d9e:	0008      	movs	r0, r1
 8000da0:	4310      	orrs	r0, r2
 8000da2:	d100      	bne.n	8000da6 <__aeabi_dsub+0x216>
 8000da4:	e0ca      	b.n	8000f3c <__aeabi_dsub+0x3ac>
 8000da6:	1e58      	subs	r0, r3, #1
 8000da8:	4684      	mov	ip, r0
 8000daa:	2800      	cmp	r0, #0
 8000dac:	d000      	beq.n	8000db0 <__aeabi_dsub+0x220>
 8000dae:	e0e7      	b.n	8000f80 <__aeabi_dsub+0x3f0>
 8000db0:	4452      	add	r2, sl
 8000db2:	4552      	cmp	r2, sl
 8000db4:	4180      	sbcs	r0, r0
 8000db6:	1864      	adds	r4, r4, r1
 8000db8:	4240      	negs	r0, r0
 8000dba:	1824      	adds	r4, r4, r0
 8000dbc:	0017      	movs	r7, r2
 8000dbe:	2601      	movs	r6, #1
 8000dc0:	0223      	lsls	r3, r4, #8
 8000dc2:	d507      	bpl.n	8000dd4 <__aeabi_dsub+0x244>
 8000dc4:	2602      	movs	r6, #2
 8000dc6:	e7cf      	b.n	8000d68 <__aeabi_dsub+0x1d8>
 8000dc8:	4664      	mov	r4, ip
 8000dca:	432c      	orrs	r4, r5
 8000dcc:	d100      	bne.n	8000dd0 <__aeabi_dsub+0x240>
 8000dce:	e1b3      	b.n	8001138 <__aeabi_dsub+0x5a8>
 8000dd0:	002c      	movs	r4, r5
 8000dd2:	4667      	mov	r7, ip
 8000dd4:	077b      	lsls	r3, r7, #29
 8000dd6:	d000      	beq.n	8000dda <__aeabi_dsub+0x24a>
 8000dd8:	e762      	b.n	8000ca0 <__aeabi_dsub+0x110>
 8000dda:	0763      	lsls	r3, r4, #29
 8000ddc:	08ff      	lsrs	r7, r7, #3
 8000dde:	431f      	orrs	r7, r3
 8000de0:	2501      	movs	r5, #1
 8000de2:	4643      	mov	r3, r8
 8000de4:	08e4      	lsrs	r4, r4, #3
 8000de6:	401d      	ands	r5, r3
 8000de8:	e793      	b.n	8000d12 <__aeabi_dsub+0x182>
 8000dea:	2d00      	cmp	r5, #0
 8000dec:	d178      	bne.n	8000ee0 <__aeabi_dsub+0x350>
 8000dee:	1c75      	adds	r5, r6, #1
 8000df0:	056d      	lsls	r5, r5, #21
 8000df2:	0d6d      	lsrs	r5, r5, #21
 8000df4:	2d01      	cmp	r5, #1
 8000df6:	dc00      	bgt.n	8000dfa <__aeabi_dsub+0x26a>
 8000df8:	e0f2      	b.n	8000fe0 <__aeabi_dsub+0x450>
 8000dfa:	4650      	mov	r0, sl
 8000dfc:	1a80      	subs	r0, r0, r2
 8000dfe:	4582      	cmp	sl, r0
 8000e00:	41bf      	sbcs	r7, r7
 8000e02:	1a65      	subs	r5, r4, r1
 8000e04:	427f      	negs	r7, r7
 8000e06:	1bed      	subs	r5, r5, r7
 8000e08:	4684      	mov	ip, r0
 8000e0a:	0228      	lsls	r0, r5, #8
 8000e0c:	d400      	bmi.n	8000e10 <__aeabi_dsub+0x280>
 8000e0e:	e08c      	b.n	8000f2a <__aeabi_dsub+0x39a>
 8000e10:	4650      	mov	r0, sl
 8000e12:	1a17      	subs	r7, r2, r0
 8000e14:	42ba      	cmp	r2, r7
 8000e16:	4192      	sbcs	r2, r2
 8000e18:	1b0c      	subs	r4, r1, r4
 8000e1a:	4255      	negs	r5, r2
 8000e1c:	1b65      	subs	r5, r4, r5
 8000e1e:	4698      	mov	r8, r3
 8000e20:	e714      	b.n	8000c4c <__aeabi_dsub+0xbc>
 8000e22:	2501      	movs	r5, #1
 8000e24:	4643      	mov	r3, r8
 8000e26:	2400      	movs	r4, #0
 8000e28:	401d      	ands	r5, r3
 8000e2a:	2700      	movs	r7, #0
 8000e2c:	e755      	b.n	8000cda <__aeabi_dsub+0x14a>
 8000e2e:	4c2a      	ldr	r4, [pc, #168]	; (8000ed8 <__aeabi_dsub+0x348>)
 8000e30:	1af6      	subs	r6, r6, r3
 8000e32:	402c      	ands	r4, r5
 8000e34:	e732      	b.n	8000c9c <__aeabi_dsub+0x10c>
 8000e36:	003d      	movs	r5, r7
 8000e38:	3828      	subs	r0, #40	; 0x28
 8000e3a:	4085      	lsls	r5, r0
 8000e3c:	2700      	movs	r7, #0
 8000e3e:	e717      	b.n	8000c70 <__aeabi_dsub+0xe0>
 8000e40:	0038      	movs	r0, r7
 8000e42:	f000 fa7f 	bl	8001344 <__clzsi2>
 8000e46:	3020      	adds	r0, #32
 8000e48:	e706      	b.n	8000c58 <__aeabi_dsub+0xc8>
 8000e4a:	430a      	orrs	r2, r1
 8000e4c:	0017      	movs	r7, r2
 8000e4e:	2100      	movs	r1, #0
 8000e50:	1e7a      	subs	r2, r7, #1
 8000e52:	4197      	sbcs	r7, r2
 8000e54:	e6ee      	b.n	8000c34 <__aeabi_dsub+0xa4>
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d000      	beq.n	8000e5c <__aeabi_dsub+0x2cc>
 8000e5a:	e0e5      	b.n	8001028 <__aeabi_dsub+0x498>
 8000e5c:	1c73      	adds	r3, r6, #1
 8000e5e:	469c      	mov	ip, r3
 8000e60:	055b      	lsls	r3, r3, #21
 8000e62:	0d5b      	lsrs	r3, r3, #21
 8000e64:	2b01      	cmp	r3, #1
 8000e66:	dc00      	bgt.n	8000e6a <__aeabi_dsub+0x2da>
 8000e68:	e09f      	b.n	8000faa <__aeabi_dsub+0x41a>
 8000e6a:	4b1a      	ldr	r3, [pc, #104]	; (8000ed4 <__aeabi_dsub+0x344>)
 8000e6c:	459c      	cmp	ip, r3
 8000e6e:	d100      	bne.n	8000e72 <__aeabi_dsub+0x2e2>
 8000e70:	e0c5      	b.n	8000ffe <__aeabi_dsub+0x46e>
 8000e72:	4452      	add	r2, sl
 8000e74:	4552      	cmp	r2, sl
 8000e76:	4180      	sbcs	r0, r0
 8000e78:	1864      	adds	r4, r4, r1
 8000e7a:	4240      	negs	r0, r0
 8000e7c:	1824      	adds	r4, r4, r0
 8000e7e:	07e7      	lsls	r7, r4, #31
 8000e80:	0852      	lsrs	r2, r2, #1
 8000e82:	4317      	orrs	r7, r2
 8000e84:	0864      	lsrs	r4, r4, #1
 8000e86:	4666      	mov	r6, ip
 8000e88:	e708      	b.n	8000c9c <__aeabi_dsub+0x10c>
 8000e8a:	4812      	ldr	r0, [pc, #72]	; (8000ed4 <__aeabi_dsub+0x344>)
 8000e8c:	4285      	cmp	r5, r0
 8000e8e:	d100      	bne.n	8000e92 <__aeabi_dsub+0x302>
 8000e90:	e085      	b.n	8000f9e <__aeabi_dsub+0x40e>
 8000e92:	001d      	movs	r5, r3
 8000e94:	e6bc      	b.n	8000c10 <__aeabi_dsub+0x80>
 8000e96:	0029      	movs	r1, r5
 8000e98:	3e1f      	subs	r6, #31
 8000e9a:	40f1      	lsrs	r1, r6
 8000e9c:	2b20      	cmp	r3, #32
 8000e9e:	d100      	bne.n	8000ea2 <__aeabi_dsub+0x312>
 8000ea0:	e07f      	b.n	8000fa2 <__aeabi_dsub+0x412>
 8000ea2:	2240      	movs	r2, #64	; 0x40
 8000ea4:	1ad3      	subs	r3, r2, r3
 8000ea6:	409d      	lsls	r5, r3
 8000ea8:	432f      	orrs	r7, r5
 8000eaa:	1e7d      	subs	r5, r7, #1
 8000eac:	41af      	sbcs	r7, r5
 8000eae:	2400      	movs	r4, #0
 8000eb0:	430f      	orrs	r7, r1
 8000eb2:	2600      	movs	r6, #0
 8000eb4:	e78e      	b.n	8000dd4 <__aeabi_dsub+0x244>
 8000eb6:	002b      	movs	r3, r5
 8000eb8:	000f      	movs	r7, r1
 8000eba:	3b20      	subs	r3, #32
 8000ebc:	40df      	lsrs	r7, r3
 8000ebe:	2d20      	cmp	r5, #32
 8000ec0:	d071      	beq.n	8000fa6 <__aeabi_dsub+0x416>
 8000ec2:	2340      	movs	r3, #64	; 0x40
 8000ec4:	1b5d      	subs	r5, r3, r5
 8000ec6:	40a9      	lsls	r1, r5
 8000ec8:	430a      	orrs	r2, r1
 8000eca:	1e51      	subs	r1, r2, #1
 8000ecc:	418a      	sbcs	r2, r1
 8000ece:	2100      	movs	r1, #0
 8000ed0:	4317      	orrs	r7, r2
 8000ed2:	e6af      	b.n	8000c34 <__aeabi_dsub+0xa4>
 8000ed4:	000007ff 	.word	0x000007ff
 8000ed8:	ff7fffff 	.word	0xff7fffff
 8000edc:	800fffff 	.word	0x800fffff
 8000ee0:	2e00      	cmp	r6, #0
 8000ee2:	d03e      	beq.n	8000f62 <__aeabi_dsub+0x3d2>
 8000ee4:	4eb3      	ldr	r6, [pc, #716]	; (80011b4 <__aeabi_dsub+0x624>)
 8000ee6:	45b4      	cmp	ip, r6
 8000ee8:	d045      	beq.n	8000f76 <__aeabi_dsub+0x3e6>
 8000eea:	2680      	movs	r6, #128	; 0x80
 8000eec:	0436      	lsls	r6, r6, #16
 8000eee:	426d      	negs	r5, r5
 8000ef0:	4334      	orrs	r4, r6
 8000ef2:	2d38      	cmp	r5, #56	; 0x38
 8000ef4:	dd00      	ble.n	8000ef8 <__aeabi_dsub+0x368>
 8000ef6:	e0a8      	b.n	800104a <__aeabi_dsub+0x4ba>
 8000ef8:	2d1f      	cmp	r5, #31
 8000efa:	dd00      	ble.n	8000efe <__aeabi_dsub+0x36e>
 8000efc:	e11f      	b.n	800113e <__aeabi_dsub+0x5ae>
 8000efe:	2620      	movs	r6, #32
 8000f00:	0027      	movs	r7, r4
 8000f02:	4650      	mov	r0, sl
 8000f04:	1b76      	subs	r6, r6, r5
 8000f06:	40b7      	lsls	r7, r6
 8000f08:	40e8      	lsrs	r0, r5
 8000f0a:	4307      	orrs	r7, r0
 8000f0c:	4650      	mov	r0, sl
 8000f0e:	40b0      	lsls	r0, r6
 8000f10:	1e46      	subs	r6, r0, #1
 8000f12:	41b0      	sbcs	r0, r6
 8000f14:	40ec      	lsrs	r4, r5
 8000f16:	4338      	orrs	r0, r7
 8000f18:	1a17      	subs	r7, r2, r0
 8000f1a:	42ba      	cmp	r2, r7
 8000f1c:	4192      	sbcs	r2, r2
 8000f1e:	1b0c      	subs	r4, r1, r4
 8000f20:	4252      	negs	r2, r2
 8000f22:	1aa4      	subs	r4, r4, r2
 8000f24:	4666      	mov	r6, ip
 8000f26:	4698      	mov	r8, r3
 8000f28:	e68b      	b.n	8000c42 <__aeabi_dsub+0xb2>
 8000f2a:	4664      	mov	r4, ip
 8000f2c:	4667      	mov	r7, ip
 8000f2e:	432c      	orrs	r4, r5
 8000f30:	d000      	beq.n	8000f34 <__aeabi_dsub+0x3a4>
 8000f32:	e68b      	b.n	8000c4c <__aeabi_dsub+0xbc>
 8000f34:	2500      	movs	r5, #0
 8000f36:	2600      	movs	r6, #0
 8000f38:	2700      	movs	r7, #0
 8000f3a:	e6ea      	b.n	8000d12 <__aeabi_dsub+0x182>
 8000f3c:	001e      	movs	r6, r3
 8000f3e:	e6ad      	b.n	8000c9c <__aeabi_dsub+0x10c>
 8000f40:	2b1f      	cmp	r3, #31
 8000f42:	dc60      	bgt.n	8001006 <__aeabi_dsub+0x476>
 8000f44:	2720      	movs	r7, #32
 8000f46:	1af8      	subs	r0, r7, r3
 8000f48:	000f      	movs	r7, r1
 8000f4a:	4684      	mov	ip, r0
 8000f4c:	4087      	lsls	r7, r0
 8000f4e:	0010      	movs	r0, r2
 8000f50:	40d8      	lsrs	r0, r3
 8000f52:	4307      	orrs	r7, r0
 8000f54:	4660      	mov	r0, ip
 8000f56:	4082      	lsls	r2, r0
 8000f58:	1e50      	subs	r0, r2, #1
 8000f5a:	4182      	sbcs	r2, r0
 8000f5c:	40d9      	lsrs	r1, r3
 8000f5e:	4317      	orrs	r7, r2
 8000f60:	e6f5      	b.n	8000d4e <__aeabi_dsub+0x1be>
 8000f62:	0026      	movs	r6, r4
 8000f64:	4650      	mov	r0, sl
 8000f66:	4306      	orrs	r6, r0
 8000f68:	d005      	beq.n	8000f76 <__aeabi_dsub+0x3e6>
 8000f6a:	43ed      	mvns	r5, r5
 8000f6c:	2d00      	cmp	r5, #0
 8000f6e:	d0d3      	beq.n	8000f18 <__aeabi_dsub+0x388>
 8000f70:	4e90      	ldr	r6, [pc, #576]	; (80011b4 <__aeabi_dsub+0x624>)
 8000f72:	45b4      	cmp	ip, r6
 8000f74:	d1bd      	bne.n	8000ef2 <__aeabi_dsub+0x362>
 8000f76:	000c      	movs	r4, r1
 8000f78:	0017      	movs	r7, r2
 8000f7a:	4666      	mov	r6, ip
 8000f7c:	4698      	mov	r8, r3
 8000f7e:	e68d      	b.n	8000c9c <__aeabi_dsub+0x10c>
 8000f80:	488c      	ldr	r0, [pc, #560]	; (80011b4 <__aeabi_dsub+0x624>)
 8000f82:	4283      	cmp	r3, r0
 8000f84:	d00b      	beq.n	8000f9e <__aeabi_dsub+0x40e>
 8000f86:	4663      	mov	r3, ip
 8000f88:	e6d9      	b.n	8000d3e <__aeabi_dsub+0x1ae>
 8000f8a:	2d00      	cmp	r5, #0
 8000f8c:	d000      	beq.n	8000f90 <__aeabi_dsub+0x400>
 8000f8e:	e096      	b.n	80010be <__aeabi_dsub+0x52e>
 8000f90:	0008      	movs	r0, r1
 8000f92:	4310      	orrs	r0, r2
 8000f94:	d100      	bne.n	8000f98 <__aeabi_dsub+0x408>
 8000f96:	e0e2      	b.n	800115e <__aeabi_dsub+0x5ce>
 8000f98:	000c      	movs	r4, r1
 8000f9a:	0017      	movs	r7, r2
 8000f9c:	4698      	mov	r8, r3
 8000f9e:	4e85      	ldr	r6, [pc, #532]	; (80011b4 <__aeabi_dsub+0x624>)
 8000fa0:	e67c      	b.n	8000c9c <__aeabi_dsub+0x10c>
 8000fa2:	2500      	movs	r5, #0
 8000fa4:	e780      	b.n	8000ea8 <__aeabi_dsub+0x318>
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	e78e      	b.n	8000ec8 <__aeabi_dsub+0x338>
 8000faa:	0023      	movs	r3, r4
 8000fac:	4650      	mov	r0, sl
 8000fae:	4303      	orrs	r3, r0
 8000fb0:	2e00      	cmp	r6, #0
 8000fb2:	d000      	beq.n	8000fb6 <__aeabi_dsub+0x426>
 8000fb4:	e0a8      	b.n	8001108 <__aeabi_dsub+0x578>
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d100      	bne.n	8000fbc <__aeabi_dsub+0x42c>
 8000fba:	e0de      	b.n	800117a <__aeabi_dsub+0x5ea>
 8000fbc:	000b      	movs	r3, r1
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	d100      	bne.n	8000fc4 <__aeabi_dsub+0x434>
 8000fc2:	e66b      	b.n	8000c9c <__aeabi_dsub+0x10c>
 8000fc4:	4452      	add	r2, sl
 8000fc6:	4552      	cmp	r2, sl
 8000fc8:	4180      	sbcs	r0, r0
 8000fca:	1864      	adds	r4, r4, r1
 8000fcc:	4240      	negs	r0, r0
 8000fce:	1824      	adds	r4, r4, r0
 8000fd0:	0017      	movs	r7, r2
 8000fd2:	0223      	lsls	r3, r4, #8
 8000fd4:	d400      	bmi.n	8000fd8 <__aeabi_dsub+0x448>
 8000fd6:	e6fd      	b.n	8000dd4 <__aeabi_dsub+0x244>
 8000fd8:	4b77      	ldr	r3, [pc, #476]	; (80011b8 <__aeabi_dsub+0x628>)
 8000fda:	4666      	mov	r6, ip
 8000fdc:	401c      	ands	r4, r3
 8000fde:	e65d      	b.n	8000c9c <__aeabi_dsub+0x10c>
 8000fe0:	0025      	movs	r5, r4
 8000fe2:	4650      	mov	r0, sl
 8000fe4:	4305      	orrs	r5, r0
 8000fe6:	2e00      	cmp	r6, #0
 8000fe8:	d1cf      	bne.n	8000f8a <__aeabi_dsub+0x3fa>
 8000fea:	2d00      	cmp	r5, #0
 8000fec:	d14f      	bne.n	800108e <__aeabi_dsub+0x4fe>
 8000fee:	000c      	movs	r4, r1
 8000ff0:	4314      	orrs	r4, r2
 8000ff2:	d100      	bne.n	8000ff6 <__aeabi_dsub+0x466>
 8000ff4:	e0a0      	b.n	8001138 <__aeabi_dsub+0x5a8>
 8000ff6:	000c      	movs	r4, r1
 8000ff8:	0017      	movs	r7, r2
 8000ffa:	4698      	mov	r8, r3
 8000ffc:	e64e      	b.n	8000c9c <__aeabi_dsub+0x10c>
 8000ffe:	4666      	mov	r6, ip
 8001000:	2400      	movs	r4, #0
 8001002:	2700      	movs	r7, #0
 8001004:	e685      	b.n	8000d12 <__aeabi_dsub+0x182>
 8001006:	001f      	movs	r7, r3
 8001008:	0008      	movs	r0, r1
 800100a:	3f20      	subs	r7, #32
 800100c:	40f8      	lsrs	r0, r7
 800100e:	0007      	movs	r7, r0
 8001010:	2b20      	cmp	r3, #32
 8001012:	d100      	bne.n	8001016 <__aeabi_dsub+0x486>
 8001014:	e08e      	b.n	8001134 <__aeabi_dsub+0x5a4>
 8001016:	2040      	movs	r0, #64	; 0x40
 8001018:	1ac3      	subs	r3, r0, r3
 800101a:	4099      	lsls	r1, r3
 800101c:	430a      	orrs	r2, r1
 800101e:	1e51      	subs	r1, r2, #1
 8001020:	418a      	sbcs	r2, r1
 8001022:	2100      	movs	r1, #0
 8001024:	4317      	orrs	r7, r2
 8001026:	e692      	b.n	8000d4e <__aeabi_dsub+0x1be>
 8001028:	2e00      	cmp	r6, #0
 800102a:	d114      	bne.n	8001056 <__aeabi_dsub+0x4c6>
 800102c:	0026      	movs	r6, r4
 800102e:	4650      	mov	r0, sl
 8001030:	4306      	orrs	r6, r0
 8001032:	d062      	beq.n	80010fa <__aeabi_dsub+0x56a>
 8001034:	43db      	mvns	r3, r3
 8001036:	2b00      	cmp	r3, #0
 8001038:	d15c      	bne.n	80010f4 <__aeabi_dsub+0x564>
 800103a:	1887      	adds	r7, r0, r2
 800103c:	4297      	cmp	r7, r2
 800103e:	4192      	sbcs	r2, r2
 8001040:	1864      	adds	r4, r4, r1
 8001042:	4252      	negs	r2, r2
 8001044:	18a4      	adds	r4, r4, r2
 8001046:	4666      	mov	r6, ip
 8001048:	e687      	b.n	8000d5a <__aeabi_dsub+0x1ca>
 800104a:	4650      	mov	r0, sl
 800104c:	4320      	orrs	r0, r4
 800104e:	1e44      	subs	r4, r0, #1
 8001050:	41a0      	sbcs	r0, r4
 8001052:	2400      	movs	r4, #0
 8001054:	e760      	b.n	8000f18 <__aeabi_dsub+0x388>
 8001056:	4e57      	ldr	r6, [pc, #348]	; (80011b4 <__aeabi_dsub+0x624>)
 8001058:	45b4      	cmp	ip, r6
 800105a:	d04e      	beq.n	80010fa <__aeabi_dsub+0x56a>
 800105c:	2680      	movs	r6, #128	; 0x80
 800105e:	0436      	lsls	r6, r6, #16
 8001060:	425b      	negs	r3, r3
 8001062:	4334      	orrs	r4, r6
 8001064:	2b38      	cmp	r3, #56	; 0x38
 8001066:	dd00      	ble.n	800106a <__aeabi_dsub+0x4da>
 8001068:	e07f      	b.n	800116a <__aeabi_dsub+0x5da>
 800106a:	2b1f      	cmp	r3, #31
 800106c:	dd00      	ble.n	8001070 <__aeabi_dsub+0x4e0>
 800106e:	e08b      	b.n	8001188 <__aeabi_dsub+0x5f8>
 8001070:	2620      	movs	r6, #32
 8001072:	0027      	movs	r7, r4
 8001074:	4650      	mov	r0, sl
 8001076:	1af6      	subs	r6, r6, r3
 8001078:	40b7      	lsls	r7, r6
 800107a:	40d8      	lsrs	r0, r3
 800107c:	4307      	orrs	r7, r0
 800107e:	4650      	mov	r0, sl
 8001080:	40b0      	lsls	r0, r6
 8001082:	1e46      	subs	r6, r0, #1
 8001084:	41b0      	sbcs	r0, r6
 8001086:	4307      	orrs	r7, r0
 8001088:	40dc      	lsrs	r4, r3
 800108a:	18bf      	adds	r7, r7, r2
 800108c:	e7d6      	b.n	800103c <__aeabi_dsub+0x4ac>
 800108e:	000d      	movs	r5, r1
 8001090:	4315      	orrs	r5, r2
 8001092:	d100      	bne.n	8001096 <__aeabi_dsub+0x506>
 8001094:	e602      	b.n	8000c9c <__aeabi_dsub+0x10c>
 8001096:	4650      	mov	r0, sl
 8001098:	1a80      	subs	r0, r0, r2
 800109a:	4582      	cmp	sl, r0
 800109c:	41bf      	sbcs	r7, r7
 800109e:	1a65      	subs	r5, r4, r1
 80010a0:	427f      	negs	r7, r7
 80010a2:	1bed      	subs	r5, r5, r7
 80010a4:	4684      	mov	ip, r0
 80010a6:	0228      	lsls	r0, r5, #8
 80010a8:	d400      	bmi.n	80010ac <__aeabi_dsub+0x51c>
 80010aa:	e68d      	b.n	8000dc8 <__aeabi_dsub+0x238>
 80010ac:	4650      	mov	r0, sl
 80010ae:	1a17      	subs	r7, r2, r0
 80010b0:	42ba      	cmp	r2, r7
 80010b2:	4192      	sbcs	r2, r2
 80010b4:	1b0c      	subs	r4, r1, r4
 80010b6:	4252      	negs	r2, r2
 80010b8:	1aa4      	subs	r4, r4, r2
 80010ba:	4698      	mov	r8, r3
 80010bc:	e5ee      	b.n	8000c9c <__aeabi_dsub+0x10c>
 80010be:	000d      	movs	r5, r1
 80010c0:	4315      	orrs	r5, r2
 80010c2:	d100      	bne.n	80010c6 <__aeabi_dsub+0x536>
 80010c4:	e76b      	b.n	8000f9e <__aeabi_dsub+0x40e>
 80010c6:	4650      	mov	r0, sl
 80010c8:	0767      	lsls	r7, r4, #29
 80010ca:	08c0      	lsrs	r0, r0, #3
 80010cc:	4307      	orrs	r7, r0
 80010ce:	2080      	movs	r0, #128	; 0x80
 80010d0:	08e4      	lsrs	r4, r4, #3
 80010d2:	0300      	lsls	r0, r0, #12
 80010d4:	4204      	tst	r4, r0
 80010d6:	d007      	beq.n	80010e8 <__aeabi_dsub+0x558>
 80010d8:	08cd      	lsrs	r5, r1, #3
 80010da:	4205      	tst	r5, r0
 80010dc:	d104      	bne.n	80010e8 <__aeabi_dsub+0x558>
 80010de:	002c      	movs	r4, r5
 80010e0:	4698      	mov	r8, r3
 80010e2:	08d7      	lsrs	r7, r2, #3
 80010e4:	0749      	lsls	r1, r1, #29
 80010e6:	430f      	orrs	r7, r1
 80010e8:	0f7b      	lsrs	r3, r7, #29
 80010ea:	00e4      	lsls	r4, r4, #3
 80010ec:	431c      	orrs	r4, r3
 80010ee:	00ff      	lsls	r7, r7, #3
 80010f0:	4e30      	ldr	r6, [pc, #192]	; (80011b4 <__aeabi_dsub+0x624>)
 80010f2:	e5d3      	b.n	8000c9c <__aeabi_dsub+0x10c>
 80010f4:	4e2f      	ldr	r6, [pc, #188]	; (80011b4 <__aeabi_dsub+0x624>)
 80010f6:	45b4      	cmp	ip, r6
 80010f8:	d1b4      	bne.n	8001064 <__aeabi_dsub+0x4d4>
 80010fa:	000c      	movs	r4, r1
 80010fc:	0017      	movs	r7, r2
 80010fe:	4666      	mov	r6, ip
 8001100:	e5cc      	b.n	8000c9c <__aeabi_dsub+0x10c>
 8001102:	2700      	movs	r7, #0
 8001104:	2400      	movs	r4, #0
 8001106:	e5e8      	b.n	8000cda <__aeabi_dsub+0x14a>
 8001108:	2b00      	cmp	r3, #0
 800110a:	d039      	beq.n	8001180 <__aeabi_dsub+0x5f0>
 800110c:	000b      	movs	r3, r1
 800110e:	4313      	orrs	r3, r2
 8001110:	d100      	bne.n	8001114 <__aeabi_dsub+0x584>
 8001112:	e744      	b.n	8000f9e <__aeabi_dsub+0x40e>
 8001114:	08c0      	lsrs	r0, r0, #3
 8001116:	0767      	lsls	r7, r4, #29
 8001118:	4307      	orrs	r7, r0
 800111a:	2080      	movs	r0, #128	; 0x80
 800111c:	08e4      	lsrs	r4, r4, #3
 800111e:	0300      	lsls	r0, r0, #12
 8001120:	4204      	tst	r4, r0
 8001122:	d0e1      	beq.n	80010e8 <__aeabi_dsub+0x558>
 8001124:	08cb      	lsrs	r3, r1, #3
 8001126:	4203      	tst	r3, r0
 8001128:	d1de      	bne.n	80010e8 <__aeabi_dsub+0x558>
 800112a:	08d7      	lsrs	r7, r2, #3
 800112c:	0749      	lsls	r1, r1, #29
 800112e:	430f      	orrs	r7, r1
 8001130:	001c      	movs	r4, r3
 8001132:	e7d9      	b.n	80010e8 <__aeabi_dsub+0x558>
 8001134:	2100      	movs	r1, #0
 8001136:	e771      	b.n	800101c <__aeabi_dsub+0x48c>
 8001138:	2500      	movs	r5, #0
 800113a:	2700      	movs	r7, #0
 800113c:	e5e9      	b.n	8000d12 <__aeabi_dsub+0x182>
 800113e:	002e      	movs	r6, r5
 8001140:	0027      	movs	r7, r4
 8001142:	3e20      	subs	r6, #32
 8001144:	40f7      	lsrs	r7, r6
 8001146:	2d20      	cmp	r5, #32
 8001148:	d02f      	beq.n	80011aa <__aeabi_dsub+0x61a>
 800114a:	2640      	movs	r6, #64	; 0x40
 800114c:	1b75      	subs	r5, r6, r5
 800114e:	40ac      	lsls	r4, r5
 8001150:	4650      	mov	r0, sl
 8001152:	4320      	orrs	r0, r4
 8001154:	1e44      	subs	r4, r0, #1
 8001156:	41a0      	sbcs	r0, r4
 8001158:	2400      	movs	r4, #0
 800115a:	4338      	orrs	r0, r7
 800115c:	e6dc      	b.n	8000f18 <__aeabi_dsub+0x388>
 800115e:	2480      	movs	r4, #128	; 0x80
 8001160:	2500      	movs	r5, #0
 8001162:	0324      	lsls	r4, r4, #12
 8001164:	4e13      	ldr	r6, [pc, #76]	; (80011b4 <__aeabi_dsub+0x624>)
 8001166:	2700      	movs	r7, #0
 8001168:	e5d3      	b.n	8000d12 <__aeabi_dsub+0x182>
 800116a:	4650      	mov	r0, sl
 800116c:	4320      	orrs	r0, r4
 800116e:	0007      	movs	r7, r0
 8001170:	1e78      	subs	r0, r7, #1
 8001172:	4187      	sbcs	r7, r0
 8001174:	2400      	movs	r4, #0
 8001176:	18bf      	adds	r7, r7, r2
 8001178:	e760      	b.n	800103c <__aeabi_dsub+0x4ac>
 800117a:	000c      	movs	r4, r1
 800117c:	0017      	movs	r7, r2
 800117e:	e58d      	b.n	8000c9c <__aeabi_dsub+0x10c>
 8001180:	000c      	movs	r4, r1
 8001182:	0017      	movs	r7, r2
 8001184:	4e0b      	ldr	r6, [pc, #44]	; (80011b4 <__aeabi_dsub+0x624>)
 8001186:	e589      	b.n	8000c9c <__aeabi_dsub+0x10c>
 8001188:	001e      	movs	r6, r3
 800118a:	0027      	movs	r7, r4
 800118c:	3e20      	subs	r6, #32
 800118e:	40f7      	lsrs	r7, r6
 8001190:	2b20      	cmp	r3, #32
 8001192:	d00c      	beq.n	80011ae <__aeabi_dsub+0x61e>
 8001194:	2640      	movs	r6, #64	; 0x40
 8001196:	1af3      	subs	r3, r6, r3
 8001198:	409c      	lsls	r4, r3
 800119a:	4650      	mov	r0, sl
 800119c:	4320      	orrs	r0, r4
 800119e:	1e44      	subs	r4, r0, #1
 80011a0:	41a0      	sbcs	r0, r4
 80011a2:	4307      	orrs	r7, r0
 80011a4:	2400      	movs	r4, #0
 80011a6:	18bf      	adds	r7, r7, r2
 80011a8:	e748      	b.n	800103c <__aeabi_dsub+0x4ac>
 80011aa:	2400      	movs	r4, #0
 80011ac:	e7d0      	b.n	8001150 <__aeabi_dsub+0x5c0>
 80011ae:	2400      	movs	r4, #0
 80011b0:	e7f3      	b.n	800119a <__aeabi_dsub+0x60a>
 80011b2:	46c0      	nop			; (mov r8, r8)
 80011b4:	000007ff 	.word	0x000007ff
 80011b8:	ff7fffff 	.word	0xff7fffff

080011bc <__aeabi_d2iz>:
 80011bc:	b530      	push	{r4, r5, lr}
 80011be:	4d13      	ldr	r5, [pc, #76]	; (800120c <__aeabi_d2iz+0x50>)
 80011c0:	030a      	lsls	r2, r1, #12
 80011c2:	004b      	lsls	r3, r1, #1
 80011c4:	0b12      	lsrs	r2, r2, #12
 80011c6:	0d5b      	lsrs	r3, r3, #21
 80011c8:	0fc9      	lsrs	r1, r1, #31
 80011ca:	2400      	movs	r4, #0
 80011cc:	42ab      	cmp	r3, r5
 80011ce:	dd10      	ble.n	80011f2 <__aeabi_d2iz+0x36>
 80011d0:	4c0f      	ldr	r4, [pc, #60]	; (8001210 <__aeabi_d2iz+0x54>)
 80011d2:	42a3      	cmp	r3, r4
 80011d4:	dc0f      	bgt.n	80011f6 <__aeabi_d2iz+0x3a>
 80011d6:	2480      	movs	r4, #128	; 0x80
 80011d8:	4d0e      	ldr	r5, [pc, #56]	; (8001214 <__aeabi_d2iz+0x58>)
 80011da:	0364      	lsls	r4, r4, #13
 80011dc:	4322      	orrs	r2, r4
 80011de:	1aed      	subs	r5, r5, r3
 80011e0:	2d1f      	cmp	r5, #31
 80011e2:	dd0b      	ble.n	80011fc <__aeabi_d2iz+0x40>
 80011e4:	480c      	ldr	r0, [pc, #48]	; (8001218 <__aeabi_d2iz+0x5c>)
 80011e6:	1ac3      	subs	r3, r0, r3
 80011e8:	40da      	lsrs	r2, r3
 80011ea:	4254      	negs	r4, r2
 80011ec:	2900      	cmp	r1, #0
 80011ee:	d100      	bne.n	80011f2 <__aeabi_d2iz+0x36>
 80011f0:	0014      	movs	r4, r2
 80011f2:	0020      	movs	r0, r4
 80011f4:	bd30      	pop	{r4, r5, pc}
 80011f6:	4b09      	ldr	r3, [pc, #36]	; (800121c <__aeabi_d2iz+0x60>)
 80011f8:	18cc      	adds	r4, r1, r3
 80011fa:	e7fa      	b.n	80011f2 <__aeabi_d2iz+0x36>
 80011fc:	4c08      	ldr	r4, [pc, #32]	; (8001220 <__aeabi_d2iz+0x64>)
 80011fe:	40e8      	lsrs	r0, r5
 8001200:	46a4      	mov	ip, r4
 8001202:	4463      	add	r3, ip
 8001204:	409a      	lsls	r2, r3
 8001206:	4302      	orrs	r2, r0
 8001208:	e7ef      	b.n	80011ea <__aeabi_d2iz+0x2e>
 800120a:	46c0      	nop			; (mov r8, r8)
 800120c:	000003fe 	.word	0x000003fe
 8001210:	0000041d 	.word	0x0000041d
 8001214:	00000433 	.word	0x00000433
 8001218:	00000413 	.word	0x00000413
 800121c:	7fffffff 	.word	0x7fffffff
 8001220:	fffffbed 	.word	0xfffffbed

08001224 <__aeabi_f2d>:
 8001224:	0041      	lsls	r1, r0, #1
 8001226:	0e09      	lsrs	r1, r1, #24
 8001228:	1c4b      	adds	r3, r1, #1
 800122a:	b570      	push	{r4, r5, r6, lr}
 800122c:	b2db      	uxtb	r3, r3
 800122e:	0246      	lsls	r6, r0, #9
 8001230:	0a75      	lsrs	r5, r6, #9
 8001232:	0fc4      	lsrs	r4, r0, #31
 8001234:	2b01      	cmp	r3, #1
 8001236:	dd14      	ble.n	8001262 <__aeabi_f2d+0x3e>
 8001238:	23e0      	movs	r3, #224	; 0xe0
 800123a:	009b      	lsls	r3, r3, #2
 800123c:	076d      	lsls	r5, r5, #29
 800123e:	0b36      	lsrs	r6, r6, #12
 8001240:	18cb      	adds	r3, r1, r3
 8001242:	2100      	movs	r1, #0
 8001244:	0d0a      	lsrs	r2, r1, #20
 8001246:	0028      	movs	r0, r5
 8001248:	0512      	lsls	r2, r2, #20
 800124a:	4d1c      	ldr	r5, [pc, #112]	; (80012bc <__aeabi_f2d+0x98>)
 800124c:	4332      	orrs	r2, r6
 800124e:	055b      	lsls	r3, r3, #21
 8001250:	402a      	ands	r2, r5
 8001252:	085b      	lsrs	r3, r3, #1
 8001254:	4313      	orrs	r3, r2
 8001256:	005b      	lsls	r3, r3, #1
 8001258:	07e4      	lsls	r4, r4, #31
 800125a:	085b      	lsrs	r3, r3, #1
 800125c:	4323      	orrs	r3, r4
 800125e:	0019      	movs	r1, r3
 8001260:	bd70      	pop	{r4, r5, r6, pc}
 8001262:	2900      	cmp	r1, #0
 8001264:	d114      	bne.n	8001290 <__aeabi_f2d+0x6c>
 8001266:	2d00      	cmp	r5, #0
 8001268:	d01e      	beq.n	80012a8 <__aeabi_f2d+0x84>
 800126a:	0028      	movs	r0, r5
 800126c:	f000 f86a 	bl	8001344 <__clzsi2>
 8001270:	280a      	cmp	r0, #10
 8001272:	dc1c      	bgt.n	80012ae <__aeabi_f2d+0x8a>
 8001274:	230b      	movs	r3, #11
 8001276:	002a      	movs	r2, r5
 8001278:	1a1b      	subs	r3, r3, r0
 800127a:	40da      	lsrs	r2, r3
 800127c:	0003      	movs	r3, r0
 800127e:	3315      	adds	r3, #21
 8001280:	409d      	lsls	r5, r3
 8001282:	4b0f      	ldr	r3, [pc, #60]	; (80012c0 <__aeabi_f2d+0x9c>)
 8001284:	0312      	lsls	r2, r2, #12
 8001286:	1a1b      	subs	r3, r3, r0
 8001288:	055b      	lsls	r3, r3, #21
 800128a:	0b16      	lsrs	r6, r2, #12
 800128c:	0d5b      	lsrs	r3, r3, #21
 800128e:	e7d8      	b.n	8001242 <__aeabi_f2d+0x1e>
 8001290:	2d00      	cmp	r5, #0
 8001292:	d006      	beq.n	80012a2 <__aeabi_f2d+0x7e>
 8001294:	0b32      	lsrs	r2, r6, #12
 8001296:	2680      	movs	r6, #128	; 0x80
 8001298:	0336      	lsls	r6, r6, #12
 800129a:	076d      	lsls	r5, r5, #29
 800129c:	4316      	orrs	r6, r2
 800129e:	4b09      	ldr	r3, [pc, #36]	; (80012c4 <__aeabi_f2d+0xa0>)
 80012a0:	e7cf      	b.n	8001242 <__aeabi_f2d+0x1e>
 80012a2:	4b08      	ldr	r3, [pc, #32]	; (80012c4 <__aeabi_f2d+0xa0>)
 80012a4:	2600      	movs	r6, #0
 80012a6:	e7cc      	b.n	8001242 <__aeabi_f2d+0x1e>
 80012a8:	2300      	movs	r3, #0
 80012aa:	2600      	movs	r6, #0
 80012ac:	e7c9      	b.n	8001242 <__aeabi_f2d+0x1e>
 80012ae:	0003      	movs	r3, r0
 80012b0:	002a      	movs	r2, r5
 80012b2:	3b0b      	subs	r3, #11
 80012b4:	409a      	lsls	r2, r3
 80012b6:	2500      	movs	r5, #0
 80012b8:	e7e3      	b.n	8001282 <__aeabi_f2d+0x5e>
 80012ba:	46c0      	nop			; (mov r8, r8)
 80012bc:	800fffff 	.word	0x800fffff
 80012c0:	00000389 	.word	0x00000389
 80012c4:	000007ff 	.word	0x000007ff

080012c8 <__aeabi_cdrcmple>:
 80012c8:	4684      	mov	ip, r0
 80012ca:	1c10      	adds	r0, r2, #0
 80012cc:	4662      	mov	r2, ip
 80012ce:	468c      	mov	ip, r1
 80012d0:	1c19      	adds	r1, r3, #0
 80012d2:	4663      	mov	r3, ip
 80012d4:	e000      	b.n	80012d8 <__aeabi_cdcmpeq>
 80012d6:	46c0      	nop			; (mov r8, r8)

080012d8 <__aeabi_cdcmpeq>:
 80012d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80012da:	f000 f8ef 	bl	80014bc <__ledf2>
 80012de:	2800      	cmp	r0, #0
 80012e0:	d401      	bmi.n	80012e6 <__aeabi_cdcmpeq+0xe>
 80012e2:	2100      	movs	r1, #0
 80012e4:	42c8      	cmn	r0, r1
 80012e6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080012e8 <__aeabi_dcmpeq>:
 80012e8:	b510      	push	{r4, lr}
 80012ea:	f000 f849 	bl	8001380 <__eqdf2>
 80012ee:	4240      	negs	r0, r0
 80012f0:	3001      	adds	r0, #1
 80012f2:	bd10      	pop	{r4, pc}

080012f4 <__aeabi_dcmplt>:
 80012f4:	b510      	push	{r4, lr}
 80012f6:	f000 f8e1 	bl	80014bc <__ledf2>
 80012fa:	2800      	cmp	r0, #0
 80012fc:	db01      	blt.n	8001302 <__aeabi_dcmplt+0xe>
 80012fe:	2000      	movs	r0, #0
 8001300:	bd10      	pop	{r4, pc}
 8001302:	2001      	movs	r0, #1
 8001304:	bd10      	pop	{r4, pc}
 8001306:	46c0      	nop			; (mov r8, r8)

08001308 <__aeabi_dcmple>:
 8001308:	b510      	push	{r4, lr}
 800130a:	f000 f8d7 	bl	80014bc <__ledf2>
 800130e:	2800      	cmp	r0, #0
 8001310:	dd01      	ble.n	8001316 <__aeabi_dcmple+0xe>
 8001312:	2000      	movs	r0, #0
 8001314:	bd10      	pop	{r4, pc}
 8001316:	2001      	movs	r0, #1
 8001318:	bd10      	pop	{r4, pc}
 800131a:	46c0      	nop			; (mov r8, r8)

0800131c <__aeabi_dcmpgt>:
 800131c:	b510      	push	{r4, lr}
 800131e:	f000 f869 	bl	80013f4 <__gedf2>
 8001322:	2800      	cmp	r0, #0
 8001324:	dc01      	bgt.n	800132a <__aeabi_dcmpgt+0xe>
 8001326:	2000      	movs	r0, #0
 8001328:	bd10      	pop	{r4, pc}
 800132a:	2001      	movs	r0, #1
 800132c:	bd10      	pop	{r4, pc}
 800132e:	46c0      	nop			; (mov r8, r8)

08001330 <__aeabi_dcmpge>:
 8001330:	b510      	push	{r4, lr}
 8001332:	f000 f85f 	bl	80013f4 <__gedf2>
 8001336:	2800      	cmp	r0, #0
 8001338:	da01      	bge.n	800133e <__aeabi_dcmpge+0xe>
 800133a:	2000      	movs	r0, #0
 800133c:	bd10      	pop	{r4, pc}
 800133e:	2001      	movs	r0, #1
 8001340:	bd10      	pop	{r4, pc}
 8001342:	46c0      	nop			; (mov r8, r8)

08001344 <__clzsi2>:
 8001344:	211c      	movs	r1, #28
 8001346:	2301      	movs	r3, #1
 8001348:	041b      	lsls	r3, r3, #16
 800134a:	4298      	cmp	r0, r3
 800134c:	d301      	bcc.n	8001352 <__clzsi2+0xe>
 800134e:	0c00      	lsrs	r0, r0, #16
 8001350:	3910      	subs	r1, #16
 8001352:	0a1b      	lsrs	r3, r3, #8
 8001354:	4298      	cmp	r0, r3
 8001356:	d301      	bcc.n	800135c <__clzsi2+0x18>
 8001358:	0a00      	lsrs	r0, r0, #8
 800135a:	3908      	subs	r1, #8
 800135c:	091b      	lsrs	r3, r3, #4
 800135e:	4298      	cmp	r0, r3
 8001360:	d301      	bcc.n	8001366 <__clzsi2+0x22>
 8001362:	0900      	lsrs	r0, r0, #4
 8001364:	3904      	subs	r1, #4
 8001366:	a202      	add	r2, pc, #8	; (adr r2, 8001370 <__clzsi2+0x2c>)
 8001368:	5c10      	ldrb	r0, [r2, r0]
 800136a:	1840      	adds	r0, r0, r1
 800136c:	4770      	bx	lr
 800136e:	46c0      	nop			; (mov r8, r8)
 8001370:	02020304 	.word	0x02020304
 8001374:	01010101 	.word	0x01010101
	...

08001380 <__eqdf2>:
 8001380:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001382:	464f      	mov	r7, r9
 8001384:	4646      	mov	r6, r8
 8001386:	46d6      	mov	lr, sl
 8001388:	005c      	lsls	r4, r3, #1
 800138a:	b5c0      	push	{r6, r7, lr}
 800138c:	031f      	lsls	r7, r3, #12
 800138e:	0fdb      	lsrs	r3, r3, #31
 8001390:	469a      	mov	sl, r3
 8001392:	4b17      	ldr	r3, [pc, #92]	; (80013f0 <__eqdf2+0x70>)
 8001394:	030e      	lsls	r6, r1, #12
 8001396:	004d      	lsls	r5, r1, #1
 8001398:	4684      	mov	ip, r0
 800139a:	4680      	mov	r8, r0
 800139c:	0b36      	lsrs	r6, r6, #12
 800139e:	0d6d      	lsrs	r5, r5, #21
 80013a0:	0fc9      	lsrs	r1, r1, #31
 80013a2:	4691      	mov	r9, r2
 80013a4:	0b3f      	lsrs	r7, r7, #12
 80013a6:	0d64      	lsrs	r4, r4, #21
 80013a8:	2001      	movs	r0, #1
 80013aa:	429d      	cmp	r5, r3
 80013ac:	d008      	beq.n	80013c0 <__eqdf2+0x40>
 80013ae:	429c      	cmp	r4, r3
 80013b0:	d001      	beq.n	80013b6 <__eqdf2+0x36>
 80013b2:	42a5      	cmp	r5, r4
 80013b4:	d00b      	beq.n	80013ce <__eqdf2+0x4e>
 80013b6:	bc1c      	pop	{r2, r3, r4}
 80013b8:	4690      	mov	r8, r2
 80013ba:	4699      	mov	r9, r3
 80013bc:	46a2      	mov	sl, r4
 80013be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013c0:	4663      	mov	r3, ip
 80013c2:	4333      	orrs	r3, r6
 80013c4:	d1f7      	bne.n	80013b6 <__eqdf2+0x36>
 80013c6:	42ac      	cmp	r4, r5
 80013c8:	d1f5      	bne.n	80013b6 <__eqdf2+0x36>
 80013ca:	433a      	orrs	r2, r7
 80013cc:	d1f3      	bne.n	80013b6 <__eqdf2+0x36>
 80013ce:	2001      	movs	r0, #1
 80013d0:	42be      	cmp	r6, r7
 80013d2:	d1f0      	bne.n	80013b6 <__eqdf2+0x36>
 80013d4:	45c8      	cmp	r8, r9
 80013d6:	d1ee      	bne.n	80013b6 <__eqdf2+0x36>
 80013d8:	4551      	cmp	r1, sl
 80013da:	d007      	beq.n	80013ec <__eqdf2+0x6c>
 80013dc:	2d00      	cmp	r5, #0
 80013de:	d1ea      	bne.n	80013b6 <__eqdf2+0x36>
 80013e0:	4663      	mov	r3, ip
 80013e2:	431e      	orrs	r6, r3
 80013e4:	0030      	movs	r0, r6
 80013e6:	1e46      	subs	r6, r0, #1
 80013e8:	41b0      	sbcs	r0, r6
 80013ea:	e7e4      	b.n	80013b6 <__eqdf2+0x36>
 80013ec:	2000      	movs	r0, #0
 80013ee:	e7e2      	b.n	80013b6 <__eqdf2+0x36>
 80013f0:	000007ff 	.word	0x000007ff

080013f4 <__gedf2>:
 80013f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013f6:	4645      	mov	r5, r8
 80013f8:	46de      	mov	lr, fp
 80013fa:	4657      	mov	r7, sl
 80013fc:	464e      	mov	r6, r9
 80013fe:	b5e0      	push	{r5, r6, r7, lr}
 8001400:	031f      	lsls	r7, r3, #12
 8001402:	0b3d      	lsrs	r5, r7, #12
 8001404:	4f2c      	ldr	r7, [pc, #176]	; (80014b8 <__gedf2+0xc4>)
 8001406:	030e      	lsls	r6, r1, #12
 8001408:	004c      	lsls	r4, r1, #1
 800140a:	46ab      	mov	fp, r5
 800140c:	005d      	lsls	r5, r3, #1
 800140e:	4684      	mov	ip, r0
 8001410:	0b36      	lsrs	r6, r6, #12
 8001412:	0d64      	lsrs	r4, r4, #21
 8001414:	0fc9      	lsrs	r1, r1, #31
 8001416:	4690      	mov	r8, r2
 8001418:	0d6d      	lsrs	r5, r5, #21
 800141a:	0fdb      	lsrs	r3, r3, #31
 800141c:	42bc      	cmp	r4, r7
 800141e:	d02a      	beq.n	8001476 <__gedf2+0x82>
 8001420:	4f25      	ldr	r7, [pc, #148]	; (80014b8 <__gedf2+0xc4>)
 8001422:	42bd      	cmp	r5, r7
 8001424:	d02d      	beq.n	8001482 <__gedf2+0x8e>
 8001426:	2c00      	cmp	r4, #0
 8001428:	d10f      	bne.n	800144a <__gedf2+0x56>
 800142a:	4330      	orrs	r0, r6
 800142c:	0007      	movs	r7, r0
 800142e:	4681      	mov	r9, r0
 8001430:	4278      	negs	r0, r7
 8001432:	4178      	adcs	r0, r7
 8001434:	b2c0      	uxtb	r0, r0
 8001436:	2d00      	cmp	r5, #0
 8001438:	d117      	bne.n	800146a <__gedf2+0x76>
 800143a:	465f      	mov	r7, fp
 800143c:	433a      	orrs	r2, r7
 800143e:	d114      	bne.n	800146a <__gedf2+0x76>
 8001440:	464b      	mov	r3, r9
 8001442:	2000      	movs	r0, #0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d00a      	beq.n	800145e <__gedf2+0x6a>
 8001448:	e006      	b.n	8001458 <__gedf2+0x64>
 800144a:	2d00      	cmp	r5, #0
 800144c:	d102      	bne.n	8001454 <__gedf2+0x60>
 800144e:	4658      	mov	r0, fp
 8001450:	4302      	orrs	r2, r0
 8001452:	d001      	beq.n	8001458 <__gedf2+0x64>
 8001454:	4299      	cmp	r1, r3
 8001456:	d018      	beq.n	800148a <__gedf2+0x96>
 8001458:	4248      	negs	r0, r1
 800145a:	2101      	movs	r1, #1
 800145c:	4308      	orrs	r0, r1
 800145e:	bc3c      	pop	{r2, r3, r4, r5}
 8001460:	4690      	mov	r8, r2
 8001462:	4699      	mov	r9, r3
 8001464:	46a2      	mov	sl, r4
 8001466:	46ab      	mov	fp, r5
 8001468:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800146a:	2800      	cmp	r0, #0
 800146c:	d0f2      	beq.n	8001454 <__gedf2+0x60>
 800146e:	2001      	movs	r0, #1
 8001470:	3b01      	subs	r3, #1
 8001472:	4318      	orrs	r0, r3
 8001474:	e7f3      	b.n	800145e <__gedf2+0x6a>
 8001476:	0037      	movs	r7, r6
 8001478:	4307      	orrs	r7, r0
 800147a:	d0d1      	beq.n	8001420 <__gedf2+0x2c>
 800147c:	2002      	movs	r0, #2
 800147e:	4240      	negs	r0, r0
 8001480:	e7ed      	b.n	800145e <__gedf2+0x6a>
 8001482:	465f      	mov	r7, fp
 8001484:	4317      	orrs	r7, r2
 8001486:	d0ce      	beq.n	8001426 <__gedf2+0x32>
 8001488:	e7f8      	b.n	800147c <__gedf2+0x88>
 800148a:	42ac      	cmp	r4, r5
 800148c:	dce4      	bgt.n	8001458 <__gedf2+0x64>
 800148e:	da03      	bge.n	8001498 <__gedf2+0xa4>
 8001490:	1e48      	subs	r0, r1, #1
 8001492:	2101      	movs	r1, #1
 8001494:	4308      	orrs	r0, r1
 8001496:	e7e2      	b.n	800145e <__gedf2+0x6a>
 8001498:	455e      	cmp	r6, fp
 800149a:	d8dd      	bhi.n	8001458 <__gedf2+0x64>
 800149c:	d006      	beq.n	80014ac <__gedf2+0xb8>
 800149e:	2000      	movs	r0, #0
 80014a0:	455e      	cmp	r6, fp
 80014a2:	d2dc      	bcs.n	800145e <__gedf2+0x6a>
 80014a4:	2301      	movs	r3, #1
 80014a6:	1e48      	subs	r0, r1, #1
 80014a8:	4318      	orrs	r0, r3
 80014aa:	e7d8      	b.n	800145e <__gedf2+0x6a>
 80014ac:	45c4      	cmp	ip, r8
 80014ae:	d8d3      	bhi.n	8001458 <__gedf2+0x64>
 80014b0:	2000      	movs	r0, #0
 80014b2:	45c4      	cmp	ip, r8
 80014b4:	d3f6      	bcc.n	80014a4 <__gedf2+0xb0>
 80014b6:	e7d2      	b.n	800145e <__gedf2+0x6a>
 80014b8:	000007ff 	.word	0x000007ff

080014bc <__ledf2>:
 80014bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014be:	464e      	mov	r6, r9
 80014c0:	4645      	mov	r5, r8
 80014c2:	46de      	mov	lr, fp
 80014c4:	4657      	mov	r7, sl
 80014c6:	005c      	lsls	r4, r3, #1
 80014c8:	b5e0      	push	{r5, r6, r7, lr}
 80014ca:	031f      	lsls	r7, r3, #12
 80014cc:	0fdb      	lsrs	r3, r3, #31
 80014ce:	4699      	mov	r9, r3
 80014d0:	4b2a      	ldr	r3, [pc, #168]	; (800157c <__ledf2+0xc0>)
 80014d2:	030e      	lsls	r6, r1, #12
 80014d4:	004d      	lsls	r5, r1, #1
 80014d6:	0fc9      	lsrs	r1, r1, #31
 80014d8:	4684      	mov	ip, r0
 80014da:	0b36      	lsrs	r6, r6, #12
 80014dc:	0d6d      	lsrs	r5, r5, #21
 80014de:	468b      	mov	fp, r1
 80014e0:	4690      	mov	r8, r2
 80014e2:	0b3f      	lsrs	r7, r7, #12
 80014e4:	0d64      	lsrs	r4, r4, #21
 80014e6:	429d      	cmp	r5, r3
 80014e8:	d020      	beq.n	800152c <__ledf2+0x70>
 80014ea:	4b24      	ldr	r3, [pc, #144]	; (800157c <__ledf2+0xc0>)
 80014ec:	429c      	cmp	r4, r3
 80014ee:	d022      	beq.n	8001536 <__ledf2+0x7a>
 80014f0:	2d00      	cmp	r5, #0
 80014f2:	d112      	bne.n	800151a <__ledf2+0x5e>
 80014f4:	4330      	orrs	r0, r6
 80014f6:	4243      	negs	r3, r0
 80014f8:	4143      	adcs	r3, r0
 80014fa:	b2db      	uxtb	r3, r3
 80014fc:	2c00      	cmp	r4, #0
 80014fe:	d01f      	beq.n	8001540 <__ledf2+0x84>
 8001500:	2b00      	cmp	r3, #0
 8001502:	d00c      	beq.n	800151e <__ledf2+0x62>
 8001504:	464b      	mov	r3, r9
 8001506:	2001      	movs	r0, #1
 8001508:	3b01      	subs	r3, #1
 800150a:	4303      	orrs	r3, r0
 800150c:	0018      	movs	r0, r3
 800150e:	bc3c      	pop	{r2, r3, r4, r5}
 8001510:	4690      	mov	r8, r2
 8001512:	4699      	mov	r9, r3
 8001514:	46a2      	mov	sl, r4
 8001516:	46ab      	mov	fp, r5
 8001518:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800151a:	2c00      	cmp	r4, #0
 800151c:	d016      	beq.n	800154c <__ledf2+0x90>
 800151e:	45cb      	cmp	fp, r9
 8001520:	d017      	beq.n	8001552 <__ledf2+0x96>
 8001522:	465b      	mov	r3, fp
 8001524:	4259      	negs	r1, r3
 8001526:	2301      	movs	r3, #1
 8001528:	430b      	orrs	r3, r1
 800152a:	e7ef      	b.n	800150c <__ledf2+0x50>
 800152c:	0031      	movs	r1, r6
 800152e:	2302      	movs	r3, #2
 8001530:	4301      	orrs	r1, r0
 8001532:	d1eb      	bne.n	800150c <__ledf2+0x50>
 8001534:	e7d9      	b.n	80014ea <__ledf2+0x2e>
 8001536:	0039      	movs	r1, r7
 8001538:	2302      	movs	r3, #2
 800153a:	4311      	orrs	r1, r2
 800153c:	d1e6      	bne.n	800150c <__ledf2+0x50>
 800153e:	e7d7      	b.n	80014f0 <__ledf2+0x34>
 8001540:	433a      	orrs	r2, r7
 8001542:	d1dd      	bne.n	8001500 <__ledf2+0x44>
 8001544:	2300      	movs	r3, #0
 8001546:	2800      	cmp	r0, #0
 8001548:	d0e0      	beq.n	800150c <__ledf2+0x50>
 800154a:	e7ea      	b.n	8001522 <__ledf2+0x66>
 800154c:	433a      	orrs	r2, r7
 800154e:	d1e6      	bne.n	800151e <__ledf2+0x62>
 8001550:	e7e7      	b.n	8001522 <__ledf2+0x66>
 8001552:	42a5      	cmp	r5, r4
 8001554:	dce5      	bgt.n	8001522 <__ledf2+0x66>
 8001556:	db05      	blt.n	8001564 <__ledf2+0xa8>
 8001558:	42be      	cmp	r6, r7
 800155a:	d8e2      	bhi.n	8001522 <__ledf2+0x66>
 800155c:	d007      	beq.n	800156e <__ledf2+0xb2>
 800155e:	2300      	movs	r3, #0
 8001560:	42be      	cmp	r6, r7
 8001562:	d2d3      	bcs.n	800150c <__ledf2+0x50>
 8001564:	4659      	mov	r1, fp
 8001566:	2301      	movs	r3, #1
 8001568:	3901      	subs	r1, #1
 800156a:	430b      	orrs	r3, r1
 800156c:	e7ce      	b.n	800150c <__ledf2+0x50>
 800156e:	45c4      	cmp	ip, r8
 8001570:	d8d7      	bhi.n	8001522 <__ledf2+0x66>
 8001572:	2300      	movs	r3, #0
 8001574:	45c4      	cmp	ip, r8
 8001576:	d3f5      	bcc.n	8001564 <__ledf2+0xa8>
 8001578:	e7c8      	b.n	800150c <__ledf2+0x50>
 800157a:	46c0      	nop			; (mov r8, r8)
 800157c:	000007ff 	.word	0x000007ff

08001580 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001584:	4b07      	ldr	r3, [pc, #28]	; (80015a4 <HAL_Init+0x24>)
 8001586:	4a07      	ldr	r2, [pc, #28]	; (80015a4 <HAL_Init+0x24>)
 8001588:	6812      	ldr	r2, [r2, #0]
 800158a:	2140      	movs	r1, #64	; 0x40
 800158c:	430a      	orrs	r2, r1
 800158e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001590:	2000      	movs	r0, #0
 8001592:	f000 f809 	bl	80015a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001596:	f002 fce5 	bl	8003f64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800159a:	2300      	movs	r3, #0
}
 800159c:	0018      	movs	r0, r3
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	46c0      	nop			; (mov r8, r8)
 80015a4:	40022000 	.word	0x40022000

080015a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 80015b0:	4b0b      	ldr	r3, [pc, #44]	; (80015e0 <HAL_InitTick+0x38>)
 80015b2:	681a      	ldr	r2, [r3, #0]
 80015b4:	23fa      	movs	r3, #250	; 0xfa
 80015b6:	0099      	lsls	r1, r3, #2
 80015b8:	0010      	movs	r0, r2
 80015ba:	f7fe fda5 	bl	8000108 <__udivsi3>
 80015be:	0003      	movs	r3, r0
 80015c0:	0018      	movs	r0, r3
 80015c2:	f000 f8e5 	bl	8001790 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 80015c6:	6879      	ldr	r1, [r7, #4]
 80015c8:	2301      	movs	r3, #1
 80015ca:	425b      	negs	r3, r3
 80015cc:	2200      	movs	r2, #0
 80015ce:	0018      	movs	r0, r3
 80015d0:	f000 f8c8 	bl	8001764 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
 80015d4:	2300      	movs	r3, #0
}
 80015d6:	0018      	movs	r0, r3
 80015d8:	46bd      	mov	sp, r7
 80015da:	b002      	add	sp, #8
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	46c0      	nop			; (mov r8, r8)
 80015e0:	20000004 	.word	0x20000004

080015e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
  uwTick++;
 80015e8:	4b03      	ldr	r3, [pc, #12]	; (80015f8 <HAL_IncTick+0x14>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	1c5a      	adds	r2, r3, #1
 80015ee:	4b02      	ldr	r3, [pc, #8]	; (80015f8 <HAL_IncTick+0x14>)
 80015f0:	601a      	str	r2, [r3, #0]
}
 80015f2:	46c0      	nop			; (mov r8, r8)
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	20000458 	.word	0x20000458

080015fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001600:	4b02      	ldr	r3, [pc, #8]	; (800160c <HAL_GetTick+0x10>)
 8001602:	681b      	ldr	r3, [r3, #0]
}
 8001604:	0018      	movs	r0, r3
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	46c0      	nop			; (mov r8, r8)
 800160c:	20000458 	.word	0x20000458

08001610 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b084      	sub	sp, #16
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001618:	2300      	movs	r3, #0
 800161a:	60fb      	str	r3, [r7, #12]
  tickstart = HAL_GetTick();
 800161c:	f7ff ffee 	bl	80015fc <HAL_GetTick>
 8001620:	0003      	movs	r3, r0
 8001622:	60fb      	str	r3, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 8001624:	46c0      	nop			; (mov r8, r8)
 8001626:	f7ff ffe9 	bl	80015fc <HAL_GetTick>
 800162a:	0002      	movs	r2, r0
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	1ad2      	subs	r2, r2, r3
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	429a      	cmp	r2, r3
 8001634:	d3f7      	bcc.n	8001626 <HAL_Delay+0x16>
  {
  }
}
 8001636:	46c0      	nop			; (mov r8, r8)
 8001638:	46bd      	mov	sp, r7
 800163a:	b004      	add	sp, #16
 800163c:	bd80      	pop	{r7, pc}
	...

08001640 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001640:	b5b0      	push	{r4, r5, r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	0002      	movs	r2, r0
 8001648:	6039      	str	r1, [r7, #0]
 800164a:	1dfb      	adds	r3, r7, #7
 800164c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 800164e:	1dfb      	adds	r3, r7, #7
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	2b7f      	cmp	r3, #127	; 0x7f
 8001654:	d932      	bls.n	80016bc <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001656:	4c2f      	ldr	r4, [pc, #188]	; (8001714 <NVIC_SetPriority+0xd4>)
 8001658:	1dfb      	adds	r3, r7, #7
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	001a      	movs	r2, r3
 800165e:	230f      	movs	r3, #15
 8001660:	4013      	ands	r3, r2
 8001662:	3b08      	subs	r3, #8
 8001664:	0899      	lsrs	r1, r3, #2
 8001666:	4a2b      	ldr	r2, [pc, #172]	; (8001714 <NVIC_SetPriority+0xd4>)
 8001668:	1dfb      	adds	r3, r7, #7
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	0018      	movs	r0, r3
 800166e:	230f      	movs	r3, #15
 8001670:	4003      	ands	r3, r0
 8001672:	3b08      	subs	r3, #8
 8001674:	089b      	lsrs	r3, r3, #2
 8001676:	3306      	adds	r3, #6
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	18d3      	adds	r3, r2, r3
 800167c:	3304      	adds	r3, #4
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	1dfa      	adds	r2, r7, #7
 8001682:	7812      	ldrb	r2, [r2, #0]
 8001684:	0010      	movs	r0, r2
 8001686:	2203      	movs	r2, #3
 8001688:	4002      	ands	r2, r0
 800168a:	00d2      	lsls	r2, r2, #3
 800168c:	20ff      	movs	r0, #255	; 0xff
 800168e:	4090      	lsls	r0, r2
 8001690:	0002      	movs	r2, r0
 8001692:	43d2      	mvns	r2, r2
 8001694:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	019b      	lsls	r3, r3, #6
 800169a:	20ff      	movs	r0, #255	; 0xff
 800169c:	4018      	ands	r0, r3
 800169e:	1dfb      	adds	r3, r7, #7
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	001d      	movs	r5, r3
 80016a4:	2303      	movs	r3, #3
 80016a6:	402b      	ands	r3, r5
 80016a8:	00db      	lsls	r3, r3, #3
 80016aa:	4098      	lsls	r0, r3
 80016ac:	0003      	movs	r3, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80016ae:	431a      	orrs	r2, r3
 80016b0:	1d8b      	adds	r3, r1, #6
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	18e3      	adds	r3, r4, r3
 80016b6:	3304      	adds	r3, #4
 80016b8:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80016ba:	e027      	b.n	800170c <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80016bc:	4c16      	ldr	r4, [pc, #88]	; (8001718 <NVIC_SetPriority+0xd8>)
 80016be:	1dfb      	adds	r3, r7, #7
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	b25b      	sxtb	r3, r3
 80016c4:	089b      	lsrs	r3, r3, #2
 80016c6:	4914      	ldr	r1, [pc, #80]	; (8001718 <NVIC_SetPriority+0xd8>)
 80016c8:	1dfa      	adds	r2, r7, #7
 80016ca:	7812      	ldrb	r2, [r2, #0]
 80016cc:	b252      	sxtb	r2, r2
 80016ce:	0892      	lsrs	r2, r2, #2
 80016d0:	32c0      	adds	r2, #192	; 0xc0
 80016d2:	0092      	lsls	r2, r2, #2
 80016d4:	5852      	ldr	r2, [r2, r1]
 80016d6:	1df9      	adds	r1, r7, #7
 80016d8:	7809      	ldrb	r1, [r1, #0]
 80016da:	0008      	movs	r0, r1
 80016dc:	2103      	movs	r1, #3
 80016de:	4001      	ands	r1, r0
 80016e0:	00c9      	lsls	r1, r1, #3
 80016e2:	20ff      	movs	r0, #255	; 0xff
 80016e4:	4088      	lsls	r0, r1
 80016e6:	0001      	movs	r1, r0
 80016e8:	43c9      	mvns	r1, r1
 80016ea:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80016ec:	683a      	ldr	r2, [r7, #0]
 80016ee:	0192      	lsls	r2, r2, #6
 80016f0:	20ff      	movs	r0, #255	; 0xff
 80016f2:	4010      	ands	r0, r2
 80016f4:	1dfa      	adds	r2, r7, #7
 80016f6:	7812      	ldrb	r2, [r2, #0]
 80016f8:	0015      	movs	r5, r2
 80016fa:	2203      	movs	r2, #3
 80016fc:	402a      	ands	r2, r5
 80016fe:	00d2      	lsls	r2, r2, #3
 8001700:	4090      	lsls	r0, r2
 8001702:	0002      	movs	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001704:	430a      	orrs	r2, r1
 8001706:	33c0      	adds	r3, #192	; 0xc0
 8001708:	009b      	lsls	r3, r3, #2
 800170a:	511a      	str	r2, [r3, r4]
}
 800170c:	46c0      	nop			; (mov r8, r8)
 800170e:	46bd      	mov	sp, r7
 8001710:	b002      	add	sp, #8
 8001712:	bdb0      	pop	{r4, r5, r7, pc}
 8001714:	e000ed00 	.word	0xe000ed00
 8001718:	e000e100 	.word	0xe000e100

0800171c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	3b01      	subs	r3, #1
 8001728:	4a0c      	ldr	r2, [pc, #48]	; (800175c <SysTick_Config+0x40>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d901      	bls.n	8001732 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800172e:	2301      	movs	r3, #1
 8001730:	e010      	b.n	8001754 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001732:	4b0b      	ldr	r3, [pc, #44]	; (8001760 <SysTick_Config+0x44>)
 8001734:	687a      	ldr	r2, [r7, #4]
 8001736:	3a01      	subs	r2, #1
 8001738:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800173a:	2301      	movs	r3, #1
 800173c:	425b      	negs	r3, r3
 800173e:	2103      	movs	r1, #3
 8001740:	0018      	movs	r0, r3
 8001742:	f7ff ff7d 	bl	8001640 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001746:	4b06      	ldr	r3, [pc, #24]	; (8001760 <SysTick_Config+0x44>)
 8001748:	2200      	movs	r2, #0
 800174a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800174c:	4b04      	ldr	r3, [pc, #16]	; (8001760 <SysTick_Config+0x44>)
 800174e:	2207      	movs	r2, #7
 8001750:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001752:	2300      	movs	r3, #0
}
 8001754:	0018      	movs	r0, r3
 8001756:	46bd      	mov	sp, r7
 8001758:	b002      	add	sp, #8
 800175a:	bd80      	pop	{r7, pc}
 800175c:	00ffffff 	.word	0x00ffffff
 8001760:	e000e010 	.word	0xe000e010

08001764 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0
 800176a:	60b9      	str	r1, [r7, #8]
 800176c:	607a      	str	r2, [r7, #4]
 800176e:	230f      	movs	r3, #15
 8001770:	18fb      	adds	r3, r7, r3
 8001772:	1c02      	adds	r2, r0, #0
 8001774:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001776:	68ba      	ldr	r2, [r7, #8]
 8001778:	230f      	movs	r3, #15
 800177a:	18fb      	adds	r3, r7, r3
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	b25b      	sxtb	r3, r3
 8001780:	0011      	movs	r1, r2
 8001782:	0018      	movs	r0, r3
 8001784:	f7ff ff5c 	bl	8001640 <NVIC_SetPriority>
}
 8001788:	46c0      	nop			; (mov r8, r8)
 800178a:	46bd      	mov	sp, r7
 800178c:	b004      	add	sp, #16
 800178e:	bd80      	pop	{r7, pc}

08001790 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	0018      	movs	r0, r3
 800179c:	f7ff ffbe 	bl	800171c <SysTick_Config>
 80017a0:	0003      	movs	r3, r0
}
 80017a2:	0018      	movs	r0, r3
 80017a4:	46bd      	mov	sp, r7
 80017a6:	b002      	add	sp, #8
 80017a8:	bd80      	pop	{r7, pc}
	...

080017ac <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2b04      	cmp	r3, #4
 80017b8:	d106      	bne.n	80017c8 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80017ba:	4b08      	ldr	r3, [pc, #32]	; (80017dc <HAL_SYSTICK_CLKSourceConfig+0x30>)
 80017bc:	4a07      	ldr	r2, [pc, #28]	; (80017dc <HAL_SYSTICK_CLKSourceConfig+0x30>)
 80017be:	6812      	ldr	r2, [r2, #0]
 80017c0:	2104      	movs	r1, #4
 80017c2:	430a      	orrs	r2, r1
 80017c4:	601a      	str	r2, [r3, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 80017c6:	e005      	b.n	80017d4 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80017c8:	4b04      	ldr	r3, [pc, #16]	; (80017dc <HAL_SYSTICK_CLKSourceConfig+0x30>)
 80017ca:	4a04      	ldr	r2, [pc, #16]	; (80017dc <HAL_SYSTICK_CLKSourceConfig+0x30>)
 80017cc:	6812      	ldr	r2, [r2, #0]
 80017ce:	2104      	movs	r1, #4
 80017d0:	438a      	bics	r2, r1
 80017d2:	601a      	str	r2, [r3, #0]
}
 80017d4:	46c0      	nop			; (mov r8, r8)
 80017d6:	46bd      	mov	sp, r7
 80017d8:	b002      	add	sp, #8
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	e000e010 	.word	0xe000e010

080017e0 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80017e4:	f000 f803 	bl	80017ee <HAL_SYSTICK_Callback>
}
 80017e8:	46c0      	nop			; (mov r8, r8)
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}

080017ee <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80017ee:	b580      	push	{r7, lr}
 80017f0:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80017f2:	46c0      	nop			; (mov r8, r8)
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}

080017f8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{        
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  /* Transfer Error Interrupt management ***************************************/
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8001800:	4bb0      	ldr	r3, [pc, #704]	; (8001ac4 <HAL_DMA_IRQHandler+0x2cc>)
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	0019      	movs	r1, r3
 800180a:	4baf      	ldr	r3, [pc, #700]	; (8001ac8 <HAL_DMA_IRQHandler+0x2d0>)
 800180c:	4299      	cmp	r1, r3
 800180e:	d02e      	beq.n	800186e <HAL_DMA_IRQHandler+0x76>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	0019      	movs	r1, r3
 8001816:	4bad      	ldr	r3, [pc, #692]	; (8001acc <HAL_DMA_IRQHandler+0x2d4>)
 8001818:	4299      	cmp	r1, r3
 800181a:	d026      	beq.n	800186a <HAL_DMA_IRQHandler+0x72>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	0019      	movs	r1, r3
 8001822:	4bab      	ldr	r3, [pc, #684]	; (8001ad0 <HAL_DMA_IRQHandler+0x2d8>)
 8001824:	4299      	cmp	r1, r3
 8001826:	d01d      	beq.n	8001864 <HAL_DMA_IRQHandler+0x6c>
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	0019      	movs	r1, r3
 800182e:	4ba9      	ldr	r3, [pc, #676]	; (8001ad4 <HAL_DMA_IRQHandler+0x2dc>)
 8001830:	4299      	cmp	r1, r3
 8001832:	d014      	beq.n	800185e <HAL_DMA_IRQHandler+0x66>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	0019      	movs	r1, r3
 800183a:	4ba7      	ldr	r3, [pc, #668]	; (8001ad8 <HAL_DMA_IRQHandler+0x2e0>)
 800183c:	4299      	cmp	r1, r3
 800183e:	d00b      	beq.n	8001858 <HAL_DMA_IRQHandler+0x60>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	0019      	movs	r1, r3
 8001846:	4ba5      	ldr	r3, [pc, #660]	; (8001adc <HAL_DMA_IRQHandler+0x2e4>)
 8001848:	4299      	cmp	r1, r3
 800184a:	d102      	bne.n	8001852 <HAL_DMA_IRQHandler+0x5a>
 800184c:	2380      	movs	r3, #128	; 0x80
 800184e:	041b      	lsls	r3, r3, #16
 8001850:	e00e      	b.n	8001870 <HAL_DMA_IRQHandler+0x78>
 8001852:	2380      	movs	r3, #128	; 0x80
 8001854:	051b      	lsls	r3, r3, #20
 8001856:	e00b      	b.n	8001870 <HAL_DMA_IRQHandler+0x78>
 8001858:	2380      	movs	r3, #128	; 0x80
 800185a:	031b      	lsls	r3, r3, #12
 800185c:	e008      	b.n	8001870 <HAL_DMA_IRQHandler+0x78>
 800185e:	2380      	movs	r3, #128	; 0x80
 8001860:	021b      	lsls	r3, r3, #8
 8001862:	e005      	b.n	8001870 <HAL_DMA_IRQHandler+0x78>
 8001864:	2380      	movs	r3, #128	; 0x80
 8001866:	011b      	lsls	r3, r3, #4
 8001868:	e002      	b.n	8001870 <HAL_DMA_IRQHandler+0x78>
 800186a:	2380      	movs	r3, #128	; 0x80
 800186c:	e000      	b.n	8001870 <HAL_DMA_IRQHandler+0x78>
 800186e:	2308      	movs	r3, #8
 8001870:	4013      	ands	r3, r2
 8001872:	d05c      	beq.n	800192e <HAL_DMA_IRQHandler+0x136>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	2208      	movs	r2, #8
 800187c:	4013      	ands	r3, r2
 800187e:	d056      	beq.n	800192e <HAL_DMA_IRQHandler+0x136>
    {
      /* Disable the transfer error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	687a      	ldr	r2, [r7, #4]
 8001886:	6812      	ldr	r2, [r2, #0]
 8001888:	6812      	ldr	r2, [r2, #0]
 800188a:	2108      	movs	r1, #8
 800188c:	438a      	bics	r2, r1
 800188e:	601a      	str	r2, [r3, #0]
    
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8001890:	4a8c      	ldr	r2, [pc, #560]	; (8001ac4 <HAL_DMA_IRQHandler+0x2cc>)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	0019      	movs	r1, r3
 8001898:	4b8b      	ldr	r3, [pc, #556]	; (8001ac8 <HAL_DMA_IRQHandler+0x2d0>)
 800189a:	4299      	cmp	r1, r3
 800189c:	d02e      	beq.n	80018fc <HAL_DMA_IRQHandler+0x104>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	0019      	movs	r1, r3
 80018a4:	4b89      	ldr	r3, [pc, #548]	; (8001acc <HAL_DMA_IRQHandler+0x2d4>)
 80018a6:	4299      	cmp	r1, r3
 80018a8:	d026      	beq.n	80018f8 <HAL_DMA_IRQHandler+0x100>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	0019      	movs	r1, r3
 80018b0:	4b87      	ldr	r3, [pc, #540]	; (8001ad0 <HAL_DMA_IRQHandler+0x2d8>)
 80018b2:	4299      	cmp	r1, r3
 80018b4:	d01d      	beq.n	80018f2 <HAL_DMA_IRQHandler+0xfa>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	0019      	movs	r1, r3
 80018bc:	4b85      	ldr	r3, [pc, #532]	; (8001ad4 <HAL_DMA_IRQHandler+0x2dc>)
 80018be:	4299      	cmp	r1, r3
 80018c0:	d014      	beq.n	80018ec <HAL_DMA_IRQHandler+0xf4>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	0019      	movs	r1, r3
 80018c8:	4b83      	ldr	r3, [pc, #524]	; (8001ad8 <HAL_DMA_IRQHandler+0x2e0>)
 80018ca:	4299      	cmp	r1, r3
 80018cc:	d00b      	beq.n	80018e6 <HAL_DMA_IRQHandler+0xee>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	0019      	movs	r1, r3
 80018d4:	4b81      	ldr	r3, [pc, #516]	; (8001adc <HAL_DMA_IRQHandler+0x2e4>)
 80018d6:	4299      	cmp	r1, r3
 80018d8:	d102      	bne.n	80018e0 <HAL_DMA_IRQHandler+0xe8>
 80018da:	2380      	movs	r3, #128	; 0x80
 80018dc:	041b      	lsls	r3, r3, #16
 80018de:	e00e      	b.n	80018fe <HAL_DMA_IRQHandler+0x106>
 80018e0:	2380      	movs	r3, #128	; 0x80
 80018e2:	051b      	lsls	r3, r3, #20
 80018e4:	e00b      	b.n	80018fe <HAL_DMA_IRQHandler+0x106>
 80018e6:	2380      	movs	r3, #128	; 0x80
 80018e8:	031b      	lsls	r3, r3, #12
 80018ea:	e008      	b.n	80018fe <HAL_DMA_IRQHandler+0x106>
 80018ec:	2380      	movs	r3, #128	; 0x80
 80018ee:	021b      	lsls	r3, r3, #8
 80018f0:	e005      	b.n	80018fe <HAL_DMA_IRQHandler+0x106>
 80018f2:	2380      	movs	r3, #128	; 0x80
 80018f4:	011b      	lsls	r3, r3, #4
 80018f6:	e002      	b.n	80018fe <HAL_DMA_IRQHandler+0x106>
 80018f8:	2380      	movs	r3, #128	; 0x80
 80018fa:	e000      	b.n	80018fe <HAL_DMA_IRQHandler+0x106>
 80018fc:	2308      	movs	r3, #8
 80018fe:	6053      	str	r3, [r2, #4]
    
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001904:	2201      	movs	r2, #1
 8001906:	431a      	orrs	r2, r3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_ERROR;    
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2225      	movs	r2, #37	; 0x25
 8001910:	2104      	movs	r1, #4
 8001912:	5499      	strb	r1, [r3, r2]
    
      /* Process Unlocked */
      __HAL_UNLOCK(hdma); 
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2224      	movs	r2, #36	; 0x24
 8001918:	2100      	movs	r1, #0
 800191a:	5499      	strb	r1, [r3, r2]
    
      if (hdma->XferErrorCallback != NULL)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001920:	2b00      	cmp	r3, #0
 8001922:	d004      	beq.n	800192e <HAL_DMA_IRQHandler+0x136>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001928:	687a      	ldr	r2, [r7, #4]
 800192a:	0010      	movs	r0, r2
 800192c:	4798      	blx	r3
      }
    }
  }

  /* Half Transfer Complete Interrupt management ******************************/
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800192e:	4b65      	ldr	r3, [pc, #404]	; (8001ac4 <HAL_DMA_IRQHandler+0x2cc>)
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	0019      	movs	r1, r3
 8001938:	4b63      	ldr	r3, [pc, #396]	; (8001ac8 <HAL_DMA_IRQHandler+0x2d0>)
 800193a:	4299      	cmp	r1, r3
 800193c:	d02e      	beq.n	800199c <HAL_DMA_IRQHandler+0x1a4>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	0019      	movs	r1, r3
 8001944:	4b61      	ldr	r3, [pc, #388]	; (8001acc <HAL_DMA_IRQHandler+0x2d4>)
 8001946:	4299      	cmp	r1, r3
 8001948:	d026      	beq.n	8001998 <HAL_DMA_IRQHandler+0x1a0>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	0019      	movs	r1, r3
 8001950:	4b5f      	ldr	r3, [pc, #380]	; (8001ad0 <HAL_DMA_IRQHandler+0x2d8>)
 8001952:	4299      	cmp	r1, r3
 8001954:	d01d      	beq.n	8001992 <HAL_DMA_IRQHandler+0x19a>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	0019      	movs	r1, r3
 800195c:	4b5d      	ldr	r3, [pc, #372]	; (8001ad4 <HAL_DMA_IRQHandler+0x2dc>)
 800195e:	4299      	cmp	r1, r3
 8001960:	d014      	beq.n	800198c <HAL_DMA_IRQHandler+0x194>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	0019      	movs	r1, r3
 8001968:	4b5b      	ldr	r3, [pc, #364]	; (8001ad8 <HAL_DMA_IRQHandler+0x2e0>)
 800196a:	4299      	cmp	r1, r3
 800196c:	d00b      	beq.n	8001986 <HAL_DMA_IRQHandler+0x18e>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	0019      	movs	r1, r3
 8001974:	4b59      	ldr	r3, [pc, #356]	; (8001adc <HAL_DMA_IRQHandler+0x2e4>)
 8001976:	4299      	cmp	r1, r3
 8001978:	d102      	bne.n	8001980 <HAL_DMA_IRQHandler+0x188>
 800197a:	2380      	movs	r3, #128	; 0x80
 800197c:	03db      	lsls	r3, r3, #15
 800197e:	e00e      	b.n	800199e <HAL_DMA_IRQHandler+0x1a6>
 8001980:	2380      	movs	r3, #128	; 0x80
 8001982:	04db      	lsls	r3, r3, #19
 8001984:	e00b      	b.n	800199e <HAL_DMA_IRQHandler+0x1a6>
 8001986:	2380      	movs	r3, #128	; 0x80
 8001988:	02db      	lsls	r3, r3, #11
 800198a:	e008      	b.n	800199e <HAL_DMA_IRQHandler+0x1a6>
 800198c:	2380      	movs	r3, #128	; 0x80
 800198e:	01db      	lsls	r3, r3, #7
 8001990:	e005      	b.n	800199e <HAL_DMA_IRQHandler+0x1a6>
 8001992:	2380      	movs	r3, #128	; 0x80
 8001994:	00db      	lsls	r3, r3, #3
 8001996:	e002      	b.n	800199e <HAL_DMA_IRQHandler+0x1a6>
 8001998:	2340      	movs	r3, #64	; 0x40
 800199a:	e000      	b.n	800199e <HAL_DMA_IRQHandler+0x1a6>
 800199c:	2304      	movs	r3, #4
 800199e:	4013      	ands	r3, r2
 80019a0:	d058      	beq.n	8001a54 <HAL_DMA_IRQHandler+0x25c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	2204      	movs	r2, #4
 80019aa:	4013      	ands	r3, r2
 80019ac:	d052      	beq.n	8001a54 <HAL_DMA_IRQHandler+0x25c>
    { 
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	2220      	movs	r2, #32
 80019b6:	4013      	ands	r3, r2
 80019b8:	d107      	bne.n	80019ca <HAL_DMA_IRQHandler+0x1d2>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	6812      	ldr	r2, [r2, #0]
 80019c2:	6812      	ldr	r2, [r2, #0]
 80019c4:	2104      	movs	r1, #4
 80019c6:	438a      	bics	r2, r1
 80019c8:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80019ca:	4a3e      	ldr	r2, [pc, #248]	; (8001ac4 <HAL_DMA_IRQHandler+0x2cc>)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	0019      	movs	r1, r3
 80019d2:	4b3d      	ldr	r3, [pc, #244]	; (8001ac8 <HAL_DMA_IRQHandler+0x2d0>)
 80019d4:	4299      	cmp	r1, r3
 80019d6:	d02e      	beq.n	8001a36 <HAL_DMA_IRQHandler+0x23e>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	0019      	movs	r1, r3
 80019de:	4b3b      	ldr	r3, [pc, #236]	; (8001acc <HAL_DMA_IRQHandler+0x2d4>)
 80019e0:	4299      	cmp	r1, r3
 80019e2:	d026      	beq.n	8001a32 <HAL_DMA_IRQHandler+0x23a>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	0019      	movs	r1, r3
 80019ea:	4b39      	ldr	r3, [pc, #228]	; (8001ad0 <HAL_DMA_IRQHandler+0x2d8>)
 80019ec:	4299      	cmp	r1, r3
 80019ee:	d01d      	beq.n	8001a2c <HAL_DMA_IRQHandler+0x234>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	0019      	movs	r1, r3
 80019f6:	4b37      	ldr	r3, [pc, #220]	; (8001ad4 <HAL_DMA_IRQHandler+0x2dc>)
 80019f8:	4299      	cmp	r1, r3
 80019fa:	d014      	beq.n	8001a26 <HAL_DMA_IRQHandler+0x22e>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	0019      	movs	r1, r3
 8001a02:	4b35      	ldr	r3, [pc, #212]	; (8001ad8 <HAL_DMA_IRQHandler+0x2e0>)
 8001a04:	4299      	cmp	r1, r3
 8001a06:	d00b      	beq.n	8001a20 <HAL_DMA_IRQHandler+0x228>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	0019      	movs	r1, r3
 8001a0e:	4b33      	ldr	r3, [pc, #204]	; (8001adc <HAL_DMA_IRQHandler+0x2e4>)
 8001a10:	4299      	cmp	r1, r3
 8001a12:	d102      	bne.n	8001a1a <HAL_DMA_IRQHandler+0x222>
 8001a14:	2380      	movs	r3, #128	; 0x80
 8001a16:	03db      	lsls	r3, r3, #15
 8001a18:	e00e      	b.n	8001a38 <HAL_DMA_IRQHandler+0x240>
 8001a1a:	2380      	movs	r3, #128	; 0x80
 8001a1c:	04db      	lsls	r3, r3, #19
 8001a1e:	e00b      	b.n	8001a38 <HAL_DMA_IRQHandler+0x240>
 8001a20:	2380      	movs	r3, #128	; 0x80
 8001a22:	02db      	lsls	r3, r3, #11
 8001a24:	e008      	b.n	8001a38 <HAL_DMA_IRQHandler+0x240>
 8001a26:	2380      	movs	r3, #128	; 0x80
 8001a28:	01db      	lsls	r3, r3, #7
 8001a2a:	e005      	b.n	8001a38 <HAL_DMA_IRQHandler+0x240>
 8001a2c:	2380      	movs	r3, #128	; 0x80
 8001a2e:	00db      	lsls	r3, r3, #3
 8001a30:	e002      	b.n	8001a38 <HAL_DMA_IRQHandler+0x240>
 8001a32:	2340      	movs	r3, #64	; 0x40
 8001a34:	e000      	b.n	8001a38 <HAL_DMA_IRQHandler+0x240>
 8001a36:	2304      	movs	r3, #4
 8001a38:	6053      	str	r3, [r2, #4]

      /* Change DMA peripheral state */
      hdma->State = HAL_DMA_STATE_READY_HALF;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2225      	movs	r2, #37	; 0x25
 8001a3e:	2105      	movs	r1, #5
 8001a40:	5499      	strb	r1, [r3, r2]

      if(hdma->XferHalfCpltCallback != NULL)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d004      	beq.n	8001a54 <HAL_DMA_IRQHandler+0x25c>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4e:	687a      	ldr	r2, [r7, #4]
 8001a50:	0010      	movs	r0, r2
 8001a52:	4798      	blx	r3
      }
    }
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8001a54:	4b1b      	ldr	r3, [pc, #108]	; (8001ac4 <HAL_DMA_IRQHandler+0x2cc>)
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	0019      	movs	r1, r3
 8001a5e:	4b1a      	ldr	r3, [pc, #104]	; (8001ac8 <HAL_DMA_IRQHandler+0x2d0>)
 8001a60:	4299      	cmp	r1, r3
 8001a62:	d03d      	beq.n	8001ae0 <HAL_DMA_IRQHandler+0x2e8>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	0019      	movs	r1, r3
 8001a6a:	4b18      	ldr	r3, [pc, #96]	; (8001acc <HAL_DMA_IRQHandler+0x2d4>)
 8001a6c:	4299      	cmp	r1, r3
 8001a6e:	d026      	beq.n	8001abe <HAL_DMA_IRQHandler+0x2c6>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	0019      	movs	r1, r3
 8001a76:	4b16      	ldr	r3, [pc, #88]	; (8001ad0 <HAL_DMA_IRQHandler+0x2d8>)
 8001a78:	4299      	cmp	r1, r3
 8001a7a:	d01d      	beq.n	8001ab8 <HAL_DMA_IRQHandler+0x2c0>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	0019      	movs	r1, r3
 8001a82:	4b14      	ldr	r3, [pc, #80]	; (8001ad4 <HAL_DMA_IRQHandler+0x2dc>)
 8001a84:	4299      	cmp	r1, r3
 8001a86:	d014      	beq.n	8001ab2 <HAL_DMA_IRQHandler+0x2ba>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	0019      	movs	r1, r3
 8001a8e:	4b12      	ldr	r3, [pc, #72]	; (8001ad8 <HAL_DMA_IRQHandler+0x2e0>)
 8001a90:	4299      	cmp	r1, r3
 8001a92:	d00b      	beq.n	8001aac <HAL_DMA_IRQHandler+0x2b4>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	0019      	movs	r1, r3
 8001a9a:	4b10      	ldr	r3, [pc, #64]	; (8001adc <HAL_DMA_IRQHandler+0x2e4>)
 8001a9c:	4299      	cmp	r1, r3
 8001a9e:	d102      	bne.n	8001aa6 <HAL_DMA_IRQHandler+0x2ae>
 8001aa0:	2380      	movs	r3, #128	; 0x80
 8001aa2:	039b      	lsls	r3, r3, #14
 8001aa4:	e01d      	b.n	8001ae2 <HAL_DMA_IRQHandler+0x2ea>
 8001aa6:	2380      	movs	r3, #128	; 0x80
 8001aa8:	049b      	lsls	r3, r3, #18
 8001aaa:	e01a      	b.n	8001ae2 <HAL_DMA_IRQHandler+0x2ea>
 8001aac:	2380      	movs	r3, #128	; 0x80
 8001aae:	029b      	lsls	r3, r3, #10
 8001ab0:	e017      	b.n	8001ae2 <HAL_DMA_IRQHandler+0x2ea>
 8001ab2:	2380      	movs	r3, #128	; 0x80
 8001ab4:	019b      	lsls	r3, r3, #6
 8001ab6:	e014      	b.n	8001ae2 <HAL_DMA_IRQHandler+0x2ea>
 8001ab8:	2380      	movs	r3, #128	; 0x80
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	e011      	b.n	8001ae2 <HAL_DMA_IRQHandler+0x2ea>
 8001abe:	2320      	movs	r3, #32
 8001ac0:	e00f      	b.n	8001ae2 <HAL_DMA_IRQHandler+0x2ea>
 8001ac2:	46c0      	nop			; (mov r8, r8)
 8001ac4:	40020000 	.word	0x40020000
 8001ac8:	40020008 	.word	0x40020008
 8001acc:	4002001c 	.word	0x4002001c
 8001ad0:	40020030 	.word	0x40020030
 8001ad4:	40020044 	.word	0x40020044
 8001ad8:	40020058 	.word	0x40020058
 8001adc:	4002006c 	.word	0x4002006c
 8001ae0:	2302      	movs	r3, #2
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	d060      	beq.n	8001ba8 <HAL_DMA_IRQHandler+0x3b0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	2202      	movs	r2, #2
 8001aee:	4013      	ands	r3, r2
 8001af0:	d05a      	beq.n	8001ba8 <HAL_DMA_IRQHandler+0x3b0>
    {
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	2220      	movs	r2, #32
 8001afa:	4013      	ands	r3, r2
 8001afc:	d107      	bne.n	8001b0e <HAL_DMA_IRQHandler+0x316>
      {
        /* Disable the transfer complete interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TC);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	687a      	ldr	r2, [r7, #4]
 8001b04:	6812      	ldr	r2, [r2, #0]
 8001b06:	6812      	ldr	r2, [r2, #0]
 8001b08:	2102      	movs	r1, #2
 8001b0a:	438a      	bics	r2, r1
 8001b0c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001b0e:	4a28      	ldr	r2, [pc, #160]	; (8001bb0 <HAL_DMA_IRQHandler+0x3b8>)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	0019      	movs	r1, r3
 8001b16:	4b27      	ldr	r3, [pc, #156]	; (8001bb4 <HAL_DMA_IRQHandler+0x3bc>)
 8001b18:	4299      	cmp	r1, r3
 8001b1a:	d02e      	beq.n	8001b7a <HAL_DMA_IRQHandler+0x382>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	0019      	movs	r1, r3
 8001b22:	4b25      	ldr	r3, [pc, #148]	; (8001bb8 <HAL_DMA_IRQHandler+0x3c0>)
 8001b24:	4299      	cmp	r1, r3
 8001b26:	d026      	beq.n	8001b76 <HAL_DMA_IRQHandler+0x37e>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	0019      	movs	r1, r3
 8001b2e:	4b23      	ldr	r3, [pc, #140]	; (8001bbc <HAL_DMA_IRQHandler+0x3c4>)
 8001b30:	4299      	cmp	r1, r3
 8001b32:	d01d      	beq.n	8001b70 <HAL_DMA_IRQHandler+0x378>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	0019      	movs	r1, r3
 8001b3a:	4b21      	ldr	r3, [pc, #132]	; (8001bc0 <HAL_DMA_IRQHandler+0x3c8>)
 8001b3c:	4299      	cmp	r1, r3
 8001b3e:	d014      	beq.n	8001b6a <HAL_DMA_IRQHandler+0x372>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	0019      	movs	r1, r3
 8001b46:	4b1f      	ldr	r3, [pc, #124]	; (8001bc4 <HAL_DMA_IRQHandler+0x3cc>)
 8001b48:	4299      	cmp	r1, r3
 8001b4a:	d00b      	beq.n	8001b64 <HAL_DMA_IRQHandler+0x36c>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	0019      	movs	r1, r3
 8001b52:	4b1d      	ldr	r3, [pc, #116]	; (8001bc8 <HAL_DMA_IRQHandler+0x3d0>)
 8001b54:	4299      	cmp	r1, r3
 8001b56:	d102      	bne.n	8001b5e <HAL_DMA_IRQHandler+0x366>
 8001b58:	2380      	movs	r3, #128	; 0x80
 8001b5a:	039b      	lsls	r3, r3, #14
 8001b5c:	e00e      	b.n	8001b7c <HAL_DMA_IRQHandler+0x384>
 8001b5e:	2380      	movs	r3, #128	; 0x80
 8001b60:	049b      	lsls	r3, r3, #18
 8001b62:	e00b      	b.n	8001b7c <HAL_DMA_IRQHandler+0x384>
 8001b64:	2380      	movs	r3, #128	; 0x80
 8001b66:	029b      	lsls	r3, r3, #10
 8001b68:	e008      	b.n	8001b7c <HAL_DMA_IRQHandler+0x384>
 8001b6a:	2380      	movs	r3, #128	; 0x80
 8001b6c:	019b      	lsls	r3, r3, #6
 8001b6e:	e005      	b.n	8001b7c <HAL_DMA_IRQHandler+0x384>
 8001b70:	2380      	movs	r3, #128	; 0x80
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	e002      	b.n	8001b7c <HAL_DMA_IRQHandler+0x384>
 8001b76:	2320      	movs	r3, #32
 8001b78:	e000      	b.n	8001b7c <HAL_DMA_IRQHandler+0x384>
 8001b7a:	2302      	movs	r3, #2
 8001b7c:	6053      	str	r3, [r2, #4]
    
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_NONE;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;    
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2225      	movs	r2, #37	; 0x25
 8001b8a:	2101      	movs	r1, #1
 8001b8c:	5499      	strb	r1, [r3, r2]
    
      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2224      	movs	r2, #36	; 0x24
 8001b92:	2100      	movs	r1, #0
 8001b94:	5499      	strb	r1, [r3, r2]
    
      if(hdma->XferCpltCallback != NULL)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d004      	beq.n	8001ba8 <HAL_DMA_IRQHandler+0x3b0>
      {       
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ba2:	687a      	ldr	r2, [r7, #4]
 8001ba4:	0010      	movs	r0, r2
 8001ba6:	4798      	blx	r3
      }
    }
  }
}  
 8001ba8:	46c0      	nop			; (mov r8, r8)
 8001baa:	46bd      	mov	sp, r7
 8001bac:	b002      	add	sp, #8
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	40020000 	.word	0x40020000
 8001bb4:	40020008 	.word	0x40020008
 8001bb8:	4002001c 	.word	0x4002001c
 8001bbc:	40020030 	.word	0x40020030
 8001bc0:	40020044 	.word	0x40020044
 8001bc4:	40020058 	.word	0x40020058
 8001bc8:	4002006c 	.word	0x4002006c

08001bcc <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
 8001bd4:	0008      	movs	r0, r1
 8001bd6:	0011      	movs	r1, r2
 8001bd8:	1cbb      	adds	r3, r7, #2
 8001bda:	1c02      	adds	r2, r0, #0
 8001bdc:	801a      	strh	r2, [r3, #0]
 8001bde:	1c7b      	adds	r3, r7, #1
 8001be0:	1c0a      	adds	r2, r1, #0
 8001be2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 8001be4:	1c7b      	adds	r3, r7, #1
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d004      	beq.n	8001bf6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bec:	1cbb      	adds	r3, r7, #2
 8001bee:	881a      	ldrh	r2, [r3, #0]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001bf4:	e003      	b.n	8001bfe <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001bf6:	1cbb      	adds	r3, r7, #2
 8001bf8:	881a      	ldrh	r2, [r3, #0]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001bfe:	46c0      	nop			; (mov r8, r8)
 8001c00:	46bd      	mov	sp, r7
 8001c02:	b002      	add	sp, #8
 8001c04:	bd80      	pop	{r7, pc}
	...

08001c08 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c0c:	4b04      	ldr	r3, [pc, #16]	; (8001c20 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001c0e:	4a04      	ldr	r2, [pc, #16]	; (8001c20 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001c10:	6812      	ldr	r2, [r2, #0]
 8001c12:	2180      	movs	r1, #128	; 0x80
 8001c14:	0049      	lsls	r1, r1, #1
 8001c16:	430a      	orrs	r2, r1
 8001c18:	601a      	str	r2, [r3, #0]
}
 8001c1a:	46c0      	nop			; (mov r8, r8)
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	40007000 	.word	0x40007000

08001c24 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b086      	sub	sp, #24
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	2201      	movs	r2, #1
 8001c36:	4013      	ands	r3, r2
 8001c38:	d100      	bne.n	8001c3c <HAL_RCC_OscConfig+0x18>
 8001c3a:	e087      	b.n	8001d4c <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001c3c:	4bc0      	ldr	r3, [pc, #768]	; (8001f40 <HAL_RCC_OscConfig+0x31c>)
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	220c      	movs	r2, #12
 8001c42:	4013      	ands	r3, r2
 8001c44:	2b08      	cmp	r3, #8
 8001c46:	d00e      	beq.n	8001c66 <HAL_RCC_OscConfig+0x42>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c48:	4bbd      	ldr	r3, [pc, #756]	; (8001f40 <HAL_RCC_OscConfig+0x31c>)
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	220c      	movs	r2, #12
 8001c4e:	4013      	ands	r3, r2
 8001c50:	2b0c      	cmp	r3, #12
 8001c52:	d116      	bne.n	8001c82 <HAL_RCC_OscConfig+0x5e>
 8001c54:	4bba      	ldr	r3, [pc, #744]	; (8001f40 <HAL_RCC_OscConfig+0x31c>)
 8001c56:	68da      	ldr	r2, [r3, #12]
 8001c58:	2380      	movs	r3, #128	; 0x80
 8001c5a:	025b      	lsls	r3, r3, #9
 8001c5c:	401a      	ands	r2, r3
 8001c5e:	2380      	movs	r3, #128	; 0x80
 8001c60:	025b      	lsls	r3, r3, #9
 8001c62:	429a      	cmp	r2, r3
 8001c64:	d10d      	bne.n	8001c82 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c66:	4bb6      	ldr	r3, [pc, #728]	; (8001f40 <HAL_RCC_OscConfig+0x31c>)
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	2380      	movs	r3, #128	; 0x80
 8001c6c:	029b      	lsls	r3, r3, #10
 8001c6e:	4013      	ands	r3, r2
 8001c70:	d100      	bne.n	8001c74 <HAL_RCC_OscConfig+0x50>
 8001c72:	e06a      	b.n	8001d4a <HAL_RCC_OscConfig+0x126>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d166      	bne.n	8001d4a <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	f000 fb69 	bl	8002354 <HAL_RCC_OscConfig+0x730>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	685a      	ldr	r2, [r3, #4]
 8001c86:	2380      	movs	r3, #128	; 0x80
 8001c88:	025b      	lsls	r3, r3, #9
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	d107      	bne.n	8001c9e <HAL_RCC_OscConfig+0x7a>
 8001c8e:	4bac      	ldr	r3, [pc, #688]	; (8001f40 <HAL_RCC_OscConfig+0x31c>)
 8001c90:	4aab      	ldr	r2, [pc, #684]	; (8001f40 <HAL_RCC_OscConfig+0x31c>)
 8001c92:	6812      	ldr	r2, [r2, #0]
 8001c94:	2180      	movs	r1, #128	; 0x80
 8001c96:	0249      	lsls	r1, r1, #9
 8001c98:	430a      	orrs	r2, r1
 8001c9a:	601a      	str	r2, [r3, #0]
 8001c9c:	e027      	b.n	8001cee <HAL_RCC_OscConfig+0xca>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	685a      	ldr	r2, [r3, #4]
 8001ca2:	23a0      	movs	r3, #160	; 0xa0
 8001ca4:	02db      	lsls	r3, r3, #11
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	d10e      	bne.n	8001cc8 <HAL_RCC_OscConfig+0xa4>
 8001caa:	4ba5      	ldr	r3, [pc, #660]	; (8001f40 <HAL_RCC_OscConfig+0x31c>)
 8001cac:	4aa4      	ldr	r2, [pc, #656]	; (8001f40 <HAL_RCC_OscConfig+0x31c>)
 8001cae:	6812      	ldr	r2, [r2, #0]
 8001cb0:	2180      	movs	r1, #128	; 0x80
 8001cb2:	02c9      	lsls	r1, r1, #11
 8001cb4:	430a      	orrs	r2, r1
 8001cb6:	601a      	str	r2, [r3, #0]
 8001cb8:	4ba1      	ldr	r3, [pc, #644]	; (8001f40 <HAL_RCC_OscConfig+0x31c>)
 8001cba:	4aa1      	ldr	r2, [pc, #644]	; (8001f40 <HAL_RCC_OscConfig+0x31c>)
 8001cbc:	6812      	ldr	r2, [r2, #0]
 8001cbe:	2180      	movs	r1, #128	; 0x80
 8001cc0:	0249      	lsls	r1, r1, #9
 8001cc2:	430a      	orrs	r2, r1
 8001cc4:	601a      	str	r2, [r3, #0]
 8001cc6:	e012      	b.n	8001cee <HAL_RCC_OscConfig+0xca>
 8001cc8:	4b9d      	ldr	r3, [pc, #628]	; (8001f40 <HAL_RCC_OscConfig+0x31c>)
 8001cca:	4a9d      	ldr	r2, [pc, #628]	; (8001f40 <HAL_RCC_OscConfig+0x31c>)
 8001ccc:	6812      	ldr	r2, [r2, #0]
 8001cce:	499d      	ldr	r1, [pc, #628]	; (8001f44 <HAL_RCC_OscConfig+0x320>)
 8001cd0:	400a      	ands	r2, r1
 8001cd2:	601a      	str	r2, [r3, #0]
 8001cd4:	4b9a      	ldr	r3, [pc, #616]	; (8001f40 <HAL_RCC_OscConfig+0x31c>)
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	2380      	movs	r3, #128	; 0x80
 8001cda:	025b      	lsls	r3, r3, #9
 8001cdc:	4013      	ands	r3, r2
 8001cde:	60fb      	str	r3, [r7, #12]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	4b97      	ldr	r3, [pc, #604]	; (8001f40 <HAL_RCC_OscConfig+0x31c>)
 8001ce4:	4a96      	ldr	r2, [pc, #600]	; (8001f40 <HAL_RCC_OscConfig+0x31c>)
 8001ce6:	6812      	ldr	r2, [r2, #0]
 8001ce8:	4997      	ldr	r1, [pc, #604]	; (8001f48 <HAL_RCC_OscConfig+0x324>)
 8001cea:	400a      	ands	r2, r1
 8001cec:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d014      	beq.n	8001d20 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cf6:	f7ff fc81 	bl	80015fc <HAL_GetTick>
 8001cfa:	0003      	movs	r3, r0
 8001cfc:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cfe:	e008      	b.n	8001d12 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d00:	f7ff fc7c 	bl	80015fc <HAL_GetTick>
 8001d04:	0002      	movs	r2, r0
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	2b64      	cmp	r3, #100	; 0x64
 8001d0c:	d901      	bls.n	8001d12 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	e320      	b.n	8002354 <HAL_RCC_OscConfig+0x730>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d12:	4b8b      	ldr	r3, [pc, #556]	; (8001f40 <HAL_RCC_OscConfig+0x31c>)
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	2380      	movs	r3, #128	; 0x80
 8001d18:	029b      	lsls	r3, r3, #10
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	d0f0      	beq.n	8001d00 <HAL_RCC_OscConfig+0xdc>
 8001d1e:	e015      	b.n	8001d4c <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d20:	f7ff fc6c 	bl	80015fc <HAL_GetTick>
 8001d24:	0003      	movs	r3, r0
 8001d26:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d28:	e008      	b.n	8001d3c <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d2a:	f7ff fc67 	bl	80015fc <HAL_GetTick>
 8001d2e:	0002      	movs	r2, r0
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	1ad3      	subs	r3, r2, r3
 8001d34:	2b64      	cmp	r3, #100	; 0x64
 8001d36:	d901      	bls.n	8001d3c <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 8001d38:	2303      	movs	r3, #3
 8001d3a:	e30b      	b.n	8002354 <HAL_RCC_OscConfig+0x730>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d3c:	4b80      	ldr	r3, [pc, #512]	; (8001f40 <HAL_RCC_OscConfig+0x31c>)
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	2380      	movs	r3, #128	; 0x80
 8001d42:	029b      	lsls	r3, r3, #10
 8001d44:	4013      	ands	r3, r2
 8001d46:	d1f0      	bne.n	8001d2a <HAL_RCC_OscConfig+0x106>
 8001d48:	e000      	b.n	8001d4c <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d4a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	2202      	movs	r2, #2
 8001d52:	4013      	ands	r3, r2
 8001d54:	d100      	bne.n	8001d58 <HAL_RCC_OscConfig+0x134>
 8001d56:	e06c      	b.n	8001e32 <HAL_RCC_OscConfig+0x20e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001d58:	4b79      	ldr	r3, [pc, #484]	; (8001f40 <HAL_RCC_OscConfig+0x31c>)
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	220c      	movs	r2, #12
 8001d5e:	4013      	ands	r3, r2
 8001d60:	2b04      	cmp	r3, #4
 8001d62:	d00b      	beq.n	8001d7c <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001d64:	4b76      	ldr	r3, [pc, #472]	; (8001f40 <HAL_RCC_OscConfig+0x31c>)
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	220c      	movs	r2, #12
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	2b0c      	cmp	r3, #12
 8001d6e:	d11b      	bne.n	8001da8 <HAL_RCC_OscConfig+0x184>
 8001d70:	4b73      	ldr	r3, [pc, #460]	; (8001f40 <HAL_RCC_OscConfig+0x31c>)
 8001d72:	68da      	ldr	r2, [r3, #12]
 8001d74:	2380      	movs	r3, #128	; 0x80
 8001d76:	025b      	lsls	r3, r3, #9
 8001d78:	4013      	ands	r3, r2
 8001d7a:	d115      	bne.n	8001da8 <HAL_RCC_OscConfig+0x184>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d7c:	4b70      	ldr	r3, [pc, #448]	; (8001f40 <HAL_RCC_OscConfig+0x31c>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	2204      	movs	r2, #4
 8001d82:	4013      	ands	r3, r2
 8001d84:	d005      	beq.n	8001d92 <HAL_RCC_OscConfig+0x16e>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	68db      	ldr	r3, [r3, #12]
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d001      	beq.n	8001d92 <HAL_RCC_OscConfig+0x16e>
      {
        return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e2e0      	b.n	8002354 <HAL_RCC_OscConfig+0x730>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d92:	4a6b      	ldr	r2, [pc, #428]	; (8001f40 <HAL_RCC_OscConfig+0x31c>)
 8001d94:	4b6a      	ldr	r3, [pc, #424]	; (8001f40 <HAL_RCC_OscConfig+0x31c>)
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	496c      	ldr	r1, [pc, #432]	; (8001f4c <HAL_RCC_OscConfig+0x328>)
 8001d9a:	4019      	ands	r1, r3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	691b      	ldr	r3, [r3, #16]
 8001da0:	021b      	lsls	r3, r3, #8
 8001da2:	430b      	orrs	r3, r1
 8001da4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001da6:	e044      	b.n	8001e32 <HAL_RCC_OscConfig+0x20e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d027      	beq.n	8001e00 <HAL_RCC_OscConfig+0x1dc>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001db0:	4a63      	ldr	r2, [pc, #396]	; (8001f40 <HAL_RCC_OscConfig+0x31c>)
 8001db2:	4b63      	ldr	r3, [pc, #396]	; (8001f40 <HAL_RCC_OscConfig+0x31c>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	2109      	movs	r1, #9
 8001db8:	438b      	bics	r3, r1
 8001dba:	0019      	movs	r1, r3
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	430b      	orrs	r3, r1
 8001dc2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dc4:	f7ff fc1a 	bl	80015fc <HAL_GetTick>
 8001dc8:	0003      	movs	r3, r0
 8001dca:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dcc:	e008      	b.n	8001de0 <HAL_RCC_OscConfig+0x1bc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dce:	f7ff fc15 	bl	80015fc <HAL_GetTick>
 8001dd2:	0002      	movs	r2, r0
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	1ad3      	subs	r3, r2, r3
 8001dd8:	2b02      	cmp	r3, #2
 8001dda:	d901      	bls.n	8001de0 <HAL_RCC_OscConfig+0x1bc>
          {
            return HAL_TIMEOUT;
 8001ddc:	2303      	movs	r3, #3
 8001dde:	e2b9      	b.n	8002354 <HAL_RCC_OscConfig+0x730>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001de0:	4b57      	ldr	r3, [pc, #348]	; (8001f40 <HAL_RCC_OscConfig+0x31c>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	2204      	movs	r2, #4
 8001de6:	4013      	ands	r3, r2
 8001de8:	d0f1      	beq.n	8001dce <HAL_RCC_OscConfig+0x1aa>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dea:	4a55      	ldr	r2, [pc, #340]	; (8001f40 <HAL_RCC_OscConfig+0x31c>)
 8001dec:	4b54      	ldr	r3, [pc, #336]	; (8001f40 <HAL_RCC_OscConfig+0x31c>)
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	4956      	ldr	r1, [pc, #344]	; (8001f4c <HAL_RCC_OscConfig+0x328>)
 8001df2:	4019      	ands	r1, r3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	691b      	ldr	r3, [r3, #16]
 8001df8:	021b      	lsls	r3, r3, #8
 8001dfa:	430b      	orrs	r3, r1
 8001dfc:	6053      	str	r3, [r2, #4]
 8001dfe:	e018      	b.n	8001e32 <HAL_RCC_OscConfig+0x20e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e00:	4b4f      	ldr	r3, [pc, #316]	; (8001f40 <HAL_RCC_OscConfig+0x31c>)
 8001e02:	4a4f      	ldr	r2, [pc, #316]	; (8001f40 <HAL_RCC_OscConfig+0x31c>)
 8001e04:	6812      	ldr	r2, [r2, #0]
 8001e06:	2101      	movs	r1, #1
 8001e08:	438a      	bics	r2, r1
 8001e0a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e0c:	f7ff fbf6 	bl	80015fc <HAL_GetTick>
 8001e10:	0003      	movs	r3, r0
 8001e12:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e14:	e008      	b.n	8001e28 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e16:	f7ff fbf1 	bl	80015fc <HAL_GetTick>
 8001e1a:	0002      	movs	r2, r0
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	2b02      	cmp	r3, #2
 8001e22:	d901      	bls.n	8001e28 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8001e24:	2303      	movs	r3, #3
 8001e26:	e295      	b.n	8002354 <HAL_RCC_OscConfig+0x730>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e28:	4b45      	ldr	r3, [pc, #276]	; (8001f40 <HAL_RCC_OscConfig+0x31c>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	2204      	movs	r2, #4
 8001e2e:	4013      	ands	r3, r2
 8001e30:	d1f1      	bne.n	8001e16 <HAL_RCC_OscConfig+0x1f2>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	2210      	movs	r2, #16
 8001e38:	4013      	ands	r3, r2
 8001e3a:	d100      	bne.n	8001e3e <HAL_RCC_OscConfig+0x21a>
 8001e3c:	e0c2      	b.n	8001fc4 <HAL_RCC_OscConfig+0x3a0>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 8001e3e:	4b40      	ldr	r3, [pc, #256]	; (8001f40 <HAL_RCC_OscConfig+0x31c>)
 8001e40:	68db      	ldr	r3, [r3, #12]
 8001e42:	220c      	movs	r2, #12
 8001e44:	4013      	ands	r3, r2
 8001e46:	d162      	bne.n	8001f0e <HAL_RCC_OscConfig+0x2ea>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e48:	4b3d      	ldr	r3, [pc, #244]	; (8001f40 <HAL_RCC_OscConfig+0x31c>)
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	2380      	movs	r3, #128	; 0x80
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	4013      	ands	r3, r2
 8001e52:	d005      	beq.n	8001e60 <HAL_RCC_OscConfig+0x23c>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	69db      	ldr	r3, [r3, #28]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d101      	bne.n	8001e60 <HAL_RCC_OscConfig+0x23c>
      {
        return HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	e279      	b.n	8002354 <HAL_RCC_OscConfig+0x730>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e64:	4b36      	ldr	r3, [pc, #216]	; (8001f40 <HAL_RCC_OscConfig+0x31c>)
 8001e66:	6859      	ldr	r1, [r3, #4]
 8001e68:	23e0      	movs	r3, #224	; 0xe0
 8001e6a:	021b      	lsls	r3, r3, #8
 8001e6c:	400b      	ands	r3, r1
 8001e6e:	429a      	cmp	r2, r3
 8001e70:	d91c      	bls.n	8001eac <HAL_RCC_OscConfig+0x288>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e76:	0018      	movs	r0, r3
 8001e78:	f000 fc18 	bl	80026ac <RCC_SetFlashLatencyFromMSIRange>
 8001e7c:	1e03      	subs	r3, r0, #0
 8001e7e:	d001      	beq.n	8001e84 <HAL_RCC_OscConfig+0x260>
          {
            return HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	e267      	b.n	8002354 <HAL_RCC_OscConfig+0x730>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e84:	4a2e      	ldr	r2, [pc, #184]	; (8001f40 <HAL_RCC_OscConfig+0x31c>)
 8001e86:	4b2e      	ldr	r3, [pc, #184]	; (8001f40 <HAL_RCC_OscConfig+0x31c>)
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	4931      	ldr	r1, [pc, #196]	; (8001f50 <HAL_RCC_OscConfig+0x32c>)
 8001e8c:	4019      	ands	r1, r3
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e92:	430b      	orrs	r3, r1
 8001e94:	6053      	str	r3, [r2, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e96:	4a2a      	ldr	r2, [pc, #168]	; (8001f40 <HAL_RCC_OscConfig+0x31c>)
 8001e98:	4b29      	ldr	r3, [pc, #164]	; (8001f40 <HAL_RCC_OscConfig+0x31c>)
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	021b      	lsls	r3, r3, #8
 8001e9e:	0a19      	lsrs	r1, r3, #8
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6a1b      	ldr	r3, [r3, #32]
 8001ea4:	061b      	lsls	r3, r3, #24
 8001ea6:	430b      	orrs	r3, r1
 8001ea8:	6053      	str	r3, [r2, #4]
 8001eaa:	e01b      	b.n	8001ee4 <HAL_RCC_OscConfig+0x2c0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001eac:	4a24      	ldr	r2, [pc, #144]	; (8001f40 <HAL_RCC_OscConfig+0x31c>)
 8001eae:	4b24      	ldr	r3, [pc, #144]	; (8001f40 <HAL_RCC_OscConfig+0x31c>)
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	4927      	ldr	r1, [pc, #156]	; (8001f50 <HAL_RCC_OscConfig+0x32c>)
 8001eb4:	4019      	ands	r1, r3
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eba:	430b      	orrs	r3, r1
 8001ebc:	6053      	str	r3, [r2, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ebe:	4a20      	ldr	r2, [pc, #128]	; (8001f40 <HAL_RCC_OscConfig+0x31c>)
 8001ec0:	4b1f      	ldr	r3, [pc, #124]	; (8001f40 <HAL_RCC_OscConfig+0x31c>)
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	021b      	lsls	r3, r3, #8
 8001ec6:	0a19      	lsrs	r1, r3, #8
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6a1b      	ldr	r3, [r3, #32]
 8001ecc:	061b      	lsls	r3, r3, #24
 8001ece:	430b      	orrs	r3, r1
 8001ed0:	6053      	str	r3, [r2, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed6:	0018      	movs	r0, r3
 8001ed8:	f000 fbe8 	bl	80026ac <RCC_SetFlashLatencyFromMSIRange>
 8001edc:	1e03      	subs	r3, r0, #0
 8001ede:	d001      	beq.n	8001ee4 <HAL_RCC_OscConfig+0x2c0>
          {
            return HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e237      	b.n	8002354 <HAL_RCC_OscConfig+0x730>
          }          
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee8:	0b5b      	lsrs	r3, r3, #13
 8001eea:	3301      	adds	r3, #1
 8001eec:	2280      	movs	r2, #128	; 0x80
 8001eee:	0212      	lsls	r2, r2, #8
 8001ef0:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 8001ef2:	4b13      	ldr	r3, [pc, #76]	; (8001f40 <HAL_RCC_OscConfig+0x31c>)
 8001ef4:	68db      	ldr	r3, [r3, #12]
 8001ef6:	091b      	lsrs	r3, r3, #4
 8001ef8:	210f      	movs	r1, #15
 8001efa:	400b      	ands	r3, r1
 8001efc:	4915      	ldr	r1, [pc, #84]	; (8001f54 <HAL_RCC_OscConfig+0x330>)
 8001efe:	5ccb      	ldrb	r3, [r1, r3]
 8001f00:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 8001f02:	4b15      	ldr	r3, [pc, #84]	; (8001f58 <HAL_RCC_OscConfig+0x334>)
 8001f04:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        HAL_InitTick (TICK_INT_PRIORITY);
 8001f06:	2000      	movs	r0, #0
 8001f08:	f7ff fb4e 	bl	80015a8 <HAL_InitTick>
 8001f0c:	e05a      	b.n	8001fc4 <HAL_RCC_OscConfig+0x3a0>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	69db      	ldr	r3, [r3, #28]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d03c      	beq.n	8001f90 <HAL_RCC_OscConfig+0x36c>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001f16:	4b0a      	ldr	r3, [pc, #40]	; (8001f40 <HAL_RCC_OscConfig+0x31c>)
 8001f18:	4a09      	ldr	r2, [pc, #36]	; (8001f40 <HAL_RCC_OscConfig+0x31c>)
 8001f1a:	6812      	ldr	r2, [r2, #0]
 8001f1c:	2180      	movs	r1, #128	; 0x80
 8001f1e:	0049      	lsls	r1, r1, #1
 8001f20:	430a      	orrs	r2, r1
 8001f22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f24:	f7ff fb6a 	bl	80015fc <HAL_GetTick>
 8001f28:	0003      	movs	r3, r0
 8001f2a:	613b      	str	r3, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 8001f2c:	e016      	b.n	8001f5c <HAL_RCC_OscConfig+0x338>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f2e:	f7ff fb65 	bl	80015fc <HAL_GetTick>
 8001f32:	0002      	movs	r2, r0
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	1ad3      	subs	r3, r2, r3
 8001f38:	2b02      	cmp	r3, #2
 8001f3a:	d90f      	bls.n	8001f5c <HAL_RCC_OscConfig+0x338>
          {
            return HAL_TIMEOUT;
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	e209      	b.n	8002354 <HAL_RCC_OscConfig+0x730>
 8001f40:	40021000 	.word	0x40021000
 8001f44:	fffeffff 	.word	0xfffeffff
 8001f48:	fffbffff 	.word	0xfffbffff
 8001f4c:	ffffe0ff 	.word	0xffffe0ff
 8001f50:	ffff1fff 	.word	0xffff1fff
 8001f54:	08004230 	.word	0x08004230
 8001f58:	20000004 	.word	0x20000004
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 8001f5c:	4bc7      	ldr	r3, [pc, #796]	; (800227c <HAL_RCC_OscConfig+0x658>)
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	2380      	movs	r3, #128	; 0x80
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	4013      	ands	r3, r2
 8001f66:	d0e2      	beq.n	8001f2e <HAL_RCC_OscConfig+0x30a>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f68:	4ac4      	ldr	r2, [pc, #784]	; (800227c <HAL_RCC_OscConfig+0x658>)
 8001f6a:	4bc4      	ldr	r3, [pc, #784]	; (800227c <HAL_RCC_OscConfig+0x658>)
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	49c4      	ldr	r1, [pc, #784]	; (8002280 <HAL_RCC_OscConfig+0x65c>)
 8001f70:	4019      	ands	r1, r3
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f76:	430b      	orrs	r3, r1
 8001f78:	6053      	str	r3, [r2, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f7a:	4ac0      	ldr	r2, [pc, #768]	; (800227c <HAL_RCC_OscConfig+0x658>)
 8001f7c:	4bbf      	ldr	r3, [pc, #764]	; (800227c <HAL_RCC_OscConfig+0x658>)
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	021b      	lsls	r3, r3, #8
 8001f82:	0a19      	lsrs	r1, r3, #8
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6a1b      	ldr	r3, [r3, #32]
 8001f88:	061b      	lsls	r3, r3, #24
 8001f8a:	430b      	orrs	r3, r1
 8001f8c:	6053      	str	r3, [r2, #4]
 8001f8e:	e019      	b.n	8001fc4 <HAL_RCC_OscConfig+0x3a0>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001f90:	4bba      	ldr	r3, [pc, #744]	; (800227c <HAL_RCC_OscConfig+0x658>)
 8001f92:	4aba      	ldr	r2, [pc, #744]	; (800227c <HAL_RCC_OscConfig+0x658>)
 8001f94:	6812      	ldr	r2, [r2, #0]
 8001f96:	49bb      	ldr	r1, [pc, #748]	; (8002284 <HAL_RCC_OscConfig+0x660>)
 8001f98:	400a      	ands	r2, r1
 8001f9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f9c:	f7ff fb2e 	bl	80015fc <HAL_GetTick>
 8001fa0:	0003      	movs	r3, r0
 8001fa2:	613b      	str	r3, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET)
 8001fa4:	e008      	b.n	8001fb8 <HAL_RCC_OscConfig+0x394>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001fa6:	f7ff fb29 	bl	80015fc <HAL_GetTick>
 8001faa:	0002      	movs	r2, r0
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	1ad3      	subs	r3, r2, r3
 8001fb0:	2b02      	cmp	r3, #2
 8001fb2:	d901      	bls.n	8001fb8 <HAL_RCC_OscConfig+0x394>
          {
            return HAL_TIMEOUT;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	e1cd      	b.n	8002354 <HAL_RCC_OscConfig+0x730>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET)
 8001fb8:	4bb0      	ldr	r3, [pc, #704]	; (800227c <HAL_RCC_OscConfig+0x658>)
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	2380      	movs	r3, #128	; 0x80
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	d1f0      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x382>
        }
      }
    }
  }  
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	2208      	movs	r2, #8
 8001fca:	4013      	ands	r3, r2
 8001fcc:	d036      	beq.n	800203c <HAL_RCC_OscConfig+0x418>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	695b      	ldr	r3, [r3, #20]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d019      	beq.n	800200a <HAL_RCC_OscConfig+0x3e6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fd6:	4ba9      	ldr	r3, [pc, #676]	; (800227c <HAL_RCC_OscConfig+0x658>)
 8001fd8:	4aa8      	ldr	r2, [pc, #672]	; (800227c <HAL_RCC_OscConfig+0x658>)
 8001fda:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001fdc:	2101      	movs	r1, #1
 8001fde:	430a      	orrs	r2, r1
 8001fe0:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fe2:	f7ff fb0b 	bl	80015fc <HAL_GetTick>
 8001fe6:	0003      	movs	r3, r0
 8001fe8:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fea:	e008      	b.n	8001ffe <HAL_RCC_OscConfig+0x3da>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fec:	f7ff fb06 	bl	80015fc <HAL_GetTick>
 8001ff0:	0002      	movs	r2, r0
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	2b02      	cmp	r3, #2
 8001ff8:	d901      	bls.n	8001ffe <HAL_RCC_OscConfig+0x3da>
        {
          return HAL_TIMEOUT;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	e1aa      	b.n	8002354 <HAL_RCC_OscConfig+0x730>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ffe:	4b9f      	ldr	r3, [pc, #636]	; (800227c <HAL_RCC_OscConfig+0x658>)
 8002000:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002002:	2202      	movs	r2, #2
 8002004:	4013      	ands	r3, r2
 8002006:	d0f1      	beq.n	8001fec <HAL_RCC_OscConfig+0x3c8>
 8002008:	e018      	b.n	800203c <HAL_RCC_OscConfig+0x418>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800200a:	4b9c      	ldr	r3, [pc, #624]	; (800227c <HAL_RCC_OscConfig+0x658>)
 800200c:	4a9b      	ldr	r2, [pc, #620]	; (800227c <HAL_RCC_OscConfig+0x658>)
 800200e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002010:	2101      	movs	r1, #1
 8002012:	438a      	bics	r2, r1
 8002014:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002016:	f7ff faf1 	bl	80015fc <HAL_GetTick>
 800201a:	0003      	movs	r3, r0
 800201c:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800201e:	e008      	b.n	8002032 <HAL_RCC_OscConfig+0x40e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002020:	f7ff faec 	bl	80015fc <HAL_GetTick>
 8002024:	0002      	movs	r2, r0
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	2b02      	cmp	r3, #2
 800202c:	d901      	bls.n	8002032 <HAL_RCC_OscConfig+0x40e>
        {
          return HAL_TIMEOUT;
 800202e:	2303      	movs	r3, #3
 8002030:	e190      	b.n	8002354 <HAL_RCC_OscConfig+0x730>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002032:	4b92      	ldr	r3, [pc, #584]	; (800227c <HAL_RCC_OscConfig+0x658>)
 8002034:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002036:	2202      	movs	r2, #2
 8002038:	4013      	ands	r3, r2
 800203a:	d1f1      	bne.n	8002020 <HAL_RCC_OscConfig+0x3fc>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	2204      	movs	r2, #4
 8002042:	4013      	ands	r3, r2
 8002044:	d100      	bne.n	8002048 <HAL_RCC_OscConfig+0x424>
 8002046:	e0af      	b.n	80021a8 <HAL_RCC_OscConfig+0x584>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002048:	2317      	movs	r3, #23
 800204a:	18fb      	adds	r3, r7, r3
 800204c:	2200      	movs	r2, #0
 800204e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002050:	4b8a      	ldr	r3, [pc, #552]	; (800227c <HAL_RCC_OscConfig+0x658>)
 8002052:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002054:	2380      	movs	r3, #128	; 0x80
 8002056:	055b      	lsls	r3, r3, #21
 8002058:	4013      	ands	r3, r2
 800205a:	d10a      	bne.n	8002072 <HAL_RCC_OscConfig+0x44e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800205c:	4b87      	ldr	r3, [pc, #540]	; (800227c <HAL_RCC_OscConfig+0x658>)
 800205e:	4a87      	ldr	r2, [pc, #540]	; (800227c <HAL_RCC_OscConfig+0x658>)
 8002060:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002062:	2180      	movs	r1, #128	; 0x80
 8002064:	0549      	lsls	r1, r1, #21
 8002066:	430a      	orrs	r2, r1
 8002068:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800206a:	2317      	movs	r3, #23
 800206c:	18fb      	adds	r3, r7, r3
 800206e:	2201      	movs	r2, #1
 8002070:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002072:	4b85      	ldr	r3, [pc, #532]	; (8002288 <HAL_RCC_OscConfig+0x664>)
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	2380      	movs	r3, #128	; 0x80
 8002078:	005b      	lsls	r3, r3, #1
 800207a:	4013      	ands	r3, r2
 800207c:	d11a      	bne.n	80020b4 <HAL_RCC_OscConfig+0x490>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800207e:	4b82      	ldr	r3, [pc, #520]	; (8002288 <HAL_RCC_OscConfig+0x664>)
 8002080:	4a81      	ldr	r2, [pc, #516]	; (8002288 <HAL_RCC_OscConfig+0x664>)
 8002082:	6812      	ldr	r2, [r2, #0]
 8002084:	2180      	movs	r1, #128	; 0x80
 8002086:	0049      	lsls	r1, r1, #1
 8002088:	430a      	orrs	r2, r1
 800208a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800208c:	f7ff fab6 	bl	80015fc <HAL_GetTick>
 8002090:	0003      	movs	r3, r0
 8002092:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002094:	e008      	b.n	80020a8 <HAL_RCC_OscConfig+0x484>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002096:	f7ff fab1 	bl	80015fc <HAL_GetTick>
 800209a:	0002      	movs	r2, r0
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	2b64      	cmp	r3, #100	; 0x64
 80020a2:	d901      	bls.n	80020a8 <HAL_RCC_OscConfig+0x484>
        {
          return HAL_TIMEOUT;
 80020a4:	2303      	movs	r3, #3
 80020a6:	e155      	b.n	8002354 <HAL_RCC_OscConfig+0x730>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020a8:	4b77      	ldr	r3, [pc, #476]	; (8002288 <HAL_RCC_OscConfig+0x664>)
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	2380      	movs	r3, #128	; 0x80
 80020ae:	005b      	lsls	r3, r3, #1
 80020b0:	4013      	ands	r3, r2
 80020b2:	d0f0      	beq.n	8002096 <HAL_RCC_OscConfig+0x472>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	689a      	ldr	r2, [r3, #8]
 80020b8:	2380      	movs	r3, #128	; 0x80
 80020ba:	005b      	lsls	r3, r3, #1
 80020bc:	429a      	cmp	r2, r3
 80020be:	d107      	bne.n	80020d0 <HAL_RCC_OscConfig+0x4ac>
 80020c0:	4b6e      	ldr	r3, [pc, #440]	; (800227c <HAL_RCC_OscConfig+0x658>)
 80020c2:	4a6e      	ldr	r2, [pc, #440]	; (800227c <HAL_RCC_OscConfig+0x658>)
 80020c4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80020c6:	2180      	movs	r1, #128	; 0x80
 80020c8:	0049      	lsls	r1, r1, #1
 80020ca:	430a      	orrs	r2, r1
 80020cc:	651a      	str	r2, [r3, #80]	; 0x50
 80020ce:	e031      	b.n	8002134 <HAL_RCC_OscConfig+0x510>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d10c      	bne.n	80020f2 <HAL_RCC_OscConfig+0x4ce>
 80020d8:	4b68      	ldr	r3, [pc, #416]	; (800227c <HAL_RCC_OscConfig+0x658>)
 80020da:	4a68      	ldr	r2, [pc, #416]	; (800227c <HAL_RCC_OscConfig+0x658>)
 80020dc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80020de:	4969      	ldr	r1, [pc, #420]	; (8002284 <HAL_RCC_OscConfig+0x660>)
 80020e0:	400a      	ands	r2, r1
 80020e2:	651a      	str	r2, [r3, #80]	; 0x50
 80020e4:	4b65      	ldr	r3, [pc, #404]	; (800227c <HAL_RCC_OscConfig+0x658>)
 80020e6:	4a65      	ldr	r2, [pc, #404]	; (800227c <HAL_RCC_OscConfig+0x658>)
 80020e8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80020ea:	4968      	ldr	r1, [pc, #416]	; (800228c <HAL_RCC_OscConfig+0x668>)
 80020ec:	400a      	ands	r2, r1
 80020ee:	651a      	str	r2, [r3, #80]	; 0x50
 80020f0:	e020      	b.n	8002134 <HAL_RCC_OscConfig+0x510>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	689a      	ldr	r2, [r3, #8]
 80020f6:	23a0      	movs	r3, #160	; 0xa0
 80020f8:	00db      	lsls	r3, r3, #3
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d10e      	bne.n	800211c <HAL_RCC_OscConfig+0x4f8>
 80020fe:	4b5f      	ldr	r3, [pc, #380]	; (800227c <HAL_RCC_OscConfig+0x658>)
 8002100:	4a5e      	ldr	r2, [pc, #376]	; (800227c <HAL_RCC_OscConfig+0x658>)
 8002102:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002104:	2180      	movs	r1, #128	; 0x80
 8002106:	00c9      	lsls	r1, r1, #3
 8002108:	430a      	orrs	r2, r1
 800210a:	651a      	str	r2, [r3, #80]	; 0x50
 800210c:	4b5b      	ldr	r3, [pc, #364]	; (800227c <HAL_RCC_OscConfig+0x658>)
 800210e:	4a5b      	ldr	r2, [pc, #364]	; (800227c <HAL_RCC_OscConfig+0x658>)
 8002110:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002112:	2180      	movs	r1, #128	; 0x80
 8002114:	0049      	lsls	r1, r1, #1
 8002116:	430a      	orrs	r2, r1
 8002118:	651a      	str	r2, [r3, #80]	; 0x50
 800211a:	e00b      	b.n	8002134 <HAL_RCC_OscConfig+0x510>
 800211c:	4b57      	ldr	r3, [pc, #348]	; (800227c <HAL_RCC_OscConfig+0x658>)
 800211e:	4a57      	ldr	r2, [pc, #348]	; (800227c <HAL_RCC_OscConfig+0x658>)
 8002120:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002122:	4958      	ldr	r1, [pc, #352]	; (8002284 <HAL_RCC_OscConfig+0x660>)
 8002124:	400a      	ands	r2, r1
 8002126:	651a      	str	r2, [r3, #80]	; 0x50
 8002128:	4b54      	ldr	r3, [pc, #336]	; (800227c <HAL_RCC_OscConfig+0x658>)
 800212a:	4a54      	ldr	r2, [pc, #336]	; (800227c <HAL_RCC_OscConfig+0x658>)
 800212c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800212e:	4957      	ldr	r1, [pc, #348]	; (800228c <HAL_RCC_OscConfig+0x668>)
 8002130:	400a      	ands	r2, r1
 8002132:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d015      	beq.n	8002168 <HAL_RCC_OscConfig+0x544>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800213c:	f7ff fa5e 	bl	80015fc <HAL_GetTick>
 8002140:	0003      	movs	r3, r0
 8002142:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002144:	e009      	b.n	800215a <HAL_RCC_OscConfig+0x536>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002146:	f7ff fa59 	bl	80015fc <HAL_GetTick>
 800214a:	0002      	movs	r2, r0
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	1ad3      	subs	r3, r2, r3
 8002150:	4a4f      	ldr	r2, [pc, #316]	; (8002290 <HAL_RCC_OscConfig+0x66c>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d901      	bls.n	800215a <HAL_RCC_OscConfig+0x536>
        {
          return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e0fc      	b.n	8002354 <HAL_RCC_OscConfig+0x730>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800215a:	4b48      	ldr	r3, [pc, #288]	; (800227c <HAL_RCC_OscConfig+0x658>)
 800215c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800215e:	2380      	movs	r3, #128	; 0x80
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	4013      	ands	r3, r2
 8002164:	d0ef      	beq.n	8002146 <HAL_RCC_OscConfig+0x522>
 8002166:	e014      	b.n	8002192 <HAL_RCC_OscConfig+0x56e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002168:	f7ff fa48 	bl	80015fc <HAL_GetTick>
 800216c:	0003      	movs	r3, r0
 800216e:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002170:	e009      	b.n	8002186 <HAL_RCC_OscConfig+0x562>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002172:	f7ff fa43 	bl	80015fc <HAL_GetTick>
 8002176:	0002      	movs	r2, r0
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	1ad3      	subs	r3, r2, r3
 800217c:	4a44      	ldr	r2, [pc, #272]	; (8002290 <HAL_RCC_OscConfig+0x66c>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d901      	bls.n	8002186 <HAL_RCC_OscConfig+0x562>
        {
          return HAL_TIMEOUT;
 8002182:	2303      	movs	r3, #3
 8002184:	e0e6      	b.n	8002354 <HAL_RCC_OscConfig+0x730>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002186:	4b3d      	ldr	r3, [pc, #244]	; (800227c <HAL_RCC_OscConfig+0x658>)
 8002188:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800218a:	2380      	movs	r3, #128	; 0x80
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	4013      	ands	r3, r2
 8002190:	d1ef      	bne.n	8002172 <HAL_RCC_OscConfig+0x54e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002192:	2317      	movs	r3, #23
 8002194:	18fb      	adds	r3, r7, r3
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	2b01      	cmp	r3, #1
 800219a:	d105      	bne.n	80021a8 <HAL_RCC_OscConfig+0x584>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800219c:	4b37      	ldr	r3, [pc, #220]	; (800227c <HAL_RCC_OscConfig+0x658>)
 800219e:	4a37      	ldr	r2, [pc, #220]	; (800227c <HAL_RCC_OscConfig+0x658>)
 80021a0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80021a2:	493c      	ldr	r1, [pc, #240]	; (8002294 <HAL_RCC_OscConfig+0x670>)
 80021a4:	400a      	ands	r2, r1
 80021a6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	2220      	movs	r2, #32
 80021ae:	4013      	ands	r3, r2
 80021b0:	d049      	beq.n	8002246 <HAL_RCC_OscConfig+0x622>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	699b      	ldr	r3, [r3, #24]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d026      	beq.n	8002208 <HAL_RCC_OscConfig+0x5e4>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80021ba:	4b30      	ldr	r3, [pc, #192]	; (800227c <HAL_RCC_OscConfig+0x658>)
 80021bc:	4a2f      	ldr	r2, [pc, #188]	; (800227c <HAL_RCC_OscConfig+0x658>)
 80021be:	6892      	ldr	r2, [r2, #8]
 80021c0:	2101      	movs	r1, #1
 80021c2:	430a      	orrs	r2, r1
 80021c4:	609a      	str	r2, [r3, #8]
 80021c6:	4b2d      	ldr	r3, [pc, #180]	; (800227c <HAL_RCC_OscConfig+0x658>)
 80021c8:	4a2c      	ldr	r2, [pc, #176]	; (800227c <HAL_RCC_OscConfig+0x658>)
 80021ca:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80021cc:	2101      	movs	r1, #1
 80021ce:	430a      	orrs	r2, r1
 80021d0:	635a      	str	r2, [r3, #52]	; 0x34
 80021d2:	4b31      	ldr	r3, [pc, #196]	; (8002298 <HAL_RCC_OscConfig+0x674>)
 80021d4:	4a30      	ldr	r2, [pc, #192]	; (8002298 <HAL_RCC_OscConfig+0x674>)
 80021d6:	6a12      	ldr	r2, [r2, #32]
 80021d8:	2180      	movs	r1, #128	; 0x80
 80021da:	0189      	lsls	r1, r1, #6
 80021dc:	430a      	orrs	r2, r1
 80021de:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021e0:	f7ff fa0c 	bl	80015fc <HAL_GetTick>
 80021e4:	0003      	movs	r3, r0
 80021e6:	613b      	str	r3, [r7, #16]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80021e8:	e008      	b.n	80021fc <HAL_RCC_OscConfig+0x5d8>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80021ea:	f7ff fa07 	bl	80015fc <HAL_GetTick>
 80021ee:	0002      	movs	r2, r0
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	1ad3      	subs	r3, r2, r3
 80021f4:	2b02      	cmp	r3, #2
 80021f6:	d901      	bls.n	80021fc <HAL_RCC_OscConfig+0x5d8>
          {
            return HAL_TIMEOUT;
 80021f8:	2303      	movs	r3, #3
 80021fa:	e0ab      	b.n	8002354 <HAL_RCC_OscConfig+0x730>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80021fc:	4b1f      	ldr	r3, [pc, #124]	; (800227c <HAL_RCC_OscConfig+0x658>)
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	2202      	movs	r2, #2
 8002202:	4013      	ands	r3, r2
 8002204:	d0f1      	beq.n	80021ea <HAL_RCC_OscConfig+0x5c6>
 8002206:	e01e      	b.n	8002246 <HAL_RCC_OscConfig+0x622>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002208:	4b1c      	ldr	r3, [pc, #112]	; (800227c <HAL_RCC_OscConfig+0x658>)
 800220a:	4a1c      	ldr	r2, [pc, #112]	; (800227c <HAL_RCC_OscConfig+0x658>)
 800220c:	6892      	ldr	r2, [r2, #8]
 800220e:	2101      	movs	r1, #1
 8002210:	438a      	bics	r2, r1
 8002212:	609a      	str	r2, [r3, #8]
 8002214:	4b20      	ldr	r3, [pc, #128]	; (8002298 <HAL_RCC_OscConfig+0x674>)
 8002216:	4a20      	ldr	r2, [pc, #128]	; (8002298 <HAL_RCC_OscConfig+0x674>)
 8002218:	6a12      	ldr	r2, [r2, #32]
 800221a:	4920      	ldr	r1, [pc, #128]	; (800229c <HAL_RCC_OscConfig+0x678>)
 800221c:	400a      	ands	r2, r1
 800221e:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002220:	f7ff f9ec 	bl	80015fc <HAL_GetTick>
 8002224:	0003      	movs	r3, r0
 8002226:	613b      	str	r3, [r7, #16]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002228:	e008      	b.n	800223c <HAL_RCC_OscConfig+0x618>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800222a:	f7ff f9e7 	bl	80015fc <HAL_GetTick>
 800222e:	0002      	movs	r2, r0
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	1ad3      	subs	r3, r2, r3
 8002234:	2b02      	cmp	r3, #2
 8002236:	d901      	bls.n	800223c <HAL_RCC_OscConfig+0x618>
          {
            return HAL_TIMEOUT;
 8002238:	2303      	movs	r3, #3
 800223a:	e08b      	b.n	8002354 <HAL_RCC_OscConfig+0x730>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800223c:	4b0f      	ldr	r3, [pc, #60]	; (800227c <HAL_RCC_OscConfig+0x658>)
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	2202      	movs	r2, #2
 8002242:	4013      	ands	r3, r2
 8002244:	d1f1      	bne.n	800222a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800224a:	2b00      	cmp	r3, #0
 800224c:	d100      	bne.n	8002250 <HAL_RCC_OscConfig+0x62c>
 800224e:	e080      	b.n	8002352 <HAL_RCC_OscConfig+0x72e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002250:	4b0a      	ldr	r3, [pc, #40]	; (800227c <HAL_RCC_OscConfig+0x658>)
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	220c      	movs	r2, #12
 8002256:	4013      	ands	r3, r2
 8002258:	2b0c      	cmp	r3, #12
 800225a:	d100      	bne.n	800225e <HAL_RCC_OscConfig+0x63a>
 800225c:	e077      	b.n	800234e <HAL_RCC_OscConfig+0x72a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002262:	2b02      	cmp	r3, #2
 8002264:	d158      	bne.n	8002318 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002266:	4b05      	ldr	r3, [pc, #20]	; (800227c <HAL_RCC_OscConfig+0x658>)
 8002268:	4a04      	ldr	r2, [pc, #16]	; (800227c <HAL_RCC_OscConfig+0x658>)
 800226a:	6812      	ldr	r2, [r2, #0]
 800226c:	490c      	ldr	r1, [pc, #48]	; (80022a0 <HAL_RCC_OscConfig+0x67c>)
 800226e:	400a      	ands	r2, r1
 8002270:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002272:	f7ff f9c3 	bl	80015fc <HAL_GetTick>
 8002276:	0003      	movs	r3, r0
 8002278:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800227a:	e01c      	b.n	80022b6 <HAL_RCC_OscConfig+0x692>
 800227c:	40021000 	.word	0x40021000
 8002280:	ffff1fff 	.word	0xffff1fff
 8002284:	fffffeff 	.word	0xfffffeff
 8002288:	40007000 	.word	0x40007000
 800228c:	fffffbff 	.word	0xfffffbff
 8002290:	00001388 	.word	0x00001388
 8002294:	efffffff 	.word	0xefffffff
 8002298:	40010000 	.word	0x40010000
 800229c:	ffffdfff 	.word	0xffffdfff
 80022a0:	feffffff 	.word	0xfeffffff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022a4:	f7ff f9aa 	bl	80015fc <HAL_GetTick>
 80022a8:	0002      	movs	r2, r0
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	d901      	bls.n	80022b6 <HAL_RCC_OscConfig+0x692>
          {
            return HAL_TIMEOUT;
 80022b2:	2303      	movs	r3, #3
 80022b4:	e04e      	b.n	8002354 <HAL_RCC_OscConfig+0x730>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022b6:	4b29      	ldr	r3, [pc, #164]	; (800235c <HAL_RCC_OscConfig+0x738>)
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	2380      	movs	r3, #128	; 0x80
 80022bc:	049b      	lsls	r3, r3, #18
 80022be:	4013      	ands	r3, r2
 80022c0:	d1f0      	bne.n	80022a4 <HAL_RCC_OscConfig+0x680>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022c2:	4a26      	ldr	r2, [pc, #152]	; (800235c <HAL_RCC_OscConfig+0x738>)
 80022c4:	4b25      	ldr	r3, [pc, #148]	; (800235c <HAL_RCC_OscConfig+0x738>)
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	4925      	ldr	r1, [pc, #148]	; (8002360 <HAL_RCC_OscConfig+0x73c>)
 80022ca:	4019      	ands	r1, r3
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d4:	4318      	orrs	r0, r3
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022da:	4303      	orrs	r3, r0
 80022dc:	430b      	orrs	r3, r1
 80022de:	60d3      	str	r3, [r2, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022e0:	4b1e      	ldr	r3, [pc, #120]	; (800235c <HAL_RCC_OscConfig+0x738>)
 80022e2:	4a1e      	ldr	r2, [pc, #120]	; (800235c <HAL_RCC_OscConfig+0x738>)
 80022e4:	6812      	ldr	r2, [r2, #0]
 80022e6:	2180      	movs	r1, #128	; 0x80
 80022e8:	0449      	lsls	r1, r1, #17
 80022ea:	430a      	orrs	r2, r1
 80022ec:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ee:	f7ff f985 	bl	80015fc <HAL_GetTick>
 80022f2:	0003      	movs	r3, r0
 80022f4:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022f6:	e008      	b.n	800230a <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022f8:	f7ff f980 	bl	80015fc <HAL_GetTick>
 80022fc:	0002      	movs	r2, r0
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	2b02      	cmp	r3, #2
 8002304:	d901      	bls.n	800230a <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8002306:	2303      	movs	r3, #3
 8002308:	e024      	b.n	8002354 <HAL_RCC_OscConfig+0x730>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800230a:	4b14      	ldr	r3, [pc, #80]	; (800235c <HAL_RCC_OscConfig+0x738>)
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	2380      	movs	r3, #128	; 0x80
 8002310:	049b      	lsls	r3, r3, #18
 8002312:	4013      	ands	r3, r2
 8002314:	d0f0      	beq.n	80022f8 <HAL_RCC_OscConfig+0x6d4>
 8002316:	e01c      	b.n	8002352 <HAL_RCC_OscConfig+0x72e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002318:	4b10      	ldr	r3, [pc, #64]	; (800235c <HAL_RCC_OscConfig+0x738>)
 800231a:	4a10      	ldr	r2, [pc, #64]	; (800235c <HAL_RCC_OscConfig+0x738>)
 800231c:	6812      	ldr	r2, [r2, #0]
 800231e:	4911      	ldr	r1, [pc, #68]	; (8002364 <HAL_RCC_OscConfig+0x740>)
 8002320:	400a      	ands	r2, r1
 8002322:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002324:	f7ff f96a 	bl	80015fc <HAL_GetTick>
 8002328:	0003      	movs	r3, r0
 800232a:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800232c:	e008      	b.n	8002340 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800232e:	f7ff f965 	bl	80015fc <HAL_GetTick>
 8002332:	0002      	movs	r2, r0
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	1ad3      	subs	r3, r2, r3
 8002338:	2b02      	cmp	r3, #2
 800233a:	d901      	bls.n	8002340 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 800233c:	2303      	movs	r3, #3
 800233e:	e009      	b.n	8002354 <HAL_RCC_OscConfig+0x730>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002340:	4b06      	ldr	r3, [pc, #24]	; (800235c <HAL_RCC_OscConfig+0x738>)
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	2380      	movs	r3, #128	; 0x80
 8002346:	049b      	lsls	r3, r3, #18
 8002348:	4013      	ands	r3, r2
 800234a:	d1f0      	bne.n	800232e <HAL_RCC_OscConfig+0x70a>
 800234c:	e001      	b.n	8002352 <HAL_RCC_OscConfig+0x72e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e000      	b.n	8002354 <HAL_RCC_OscConfig+0x730>
    }
  }
  
  return HAL_OK;
 8002352:	2300      	movs	r3, #0
}
 8002354:	0018      	movs	r0, r3
 8002356:	46bd      	mov	sp, r7
 8002358:	b006      	add	sp, #24
 800235a:	bd80      	pop	{r7, pc}
 800235c:	40021000 	.word	0x40021000
 8002360:	ff02ffff 	.word	0xff02ffff
 8002364:	feffffff 	.word	0xfeffffff

08002368 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b084      	sub	sp, #16
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002372:	2300      	movs	r3, #0
 8002374:	60fb      	str	r3, [r7, #12]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002376:	4b82      	ldr	r3, [pc, #520]	; (8002580 <HAL_RCC_ClockConfig+0x218>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	2201      	movs	r2, #1
 800237c:	401a      	ands	r2, r3
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	429a      	cmp	r2, r3
 8002382:	d211      	bcs.n	80023a8 <HAL_RCC_ClockConfig+0x40>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002384:	4b7e      	ldr	r3, [pc, #504]	; (8002580 <HAL_RCC_ClockConfig+0x218>)
 8002386:	4a7e      	ldr	r2, [pc, #504]	; (8002580 <HAL_RCC_ClockConfig+0x218>)
 8002388:	6812      	ldr	r2, [r2, #0]
 800238a:	2101      	movs	r1, #1
 800238c:	438a      	bics	r2, r1
 800238e:	0011      	movs	r1, r2
 8002390:	683a      	ldr	r2, [r7, #0]
 8002392:	430a      	orrs	r2, r1
 8002394:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002396:	4b7a      	ldr	r3, [pc, #488]	; (8002580 <HAL_RCC_ClockConfig+0x218>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	2201      	movs	r2, #1
 800239c:	401a      	ands	r2, r3
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d001      	beq.n	80023a8 <HAL_RCC_ClockConfig+0x40>
    {
      return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e0e6      	b.n	8002576 <HAL_RCC_ClockConfig+0x20e>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	2202      	movs	r2, #2
 80023ae:	4013      	ands	r3, r2
 80023b0:	d009      	beq.n	80023c6 <HAL_RCC_ClockConfig+0x5e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023b2:	4a74      	ldr	r2, [pc, #464]	; (8002584 <HAL_RCC_ClockConfig+0x21c>)
 80023b4:	4b73      	ldr	r3, [pc, #460]	; (8002584 <HAL_RCC_ClockConfig+0x21c>)
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	21f0      	movs	r1, #240	; 0xf0
 80023ba:	438b      	bics	r3, r1
 80023bc:	0019      	movs	r1, r3
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	430b      	orrs	r3, r1
 80023c4:	60d3      	str	r3, [r2, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	2201      	movs	r2, #1
 80023cc:	4013      	ands	r3, r2
 80023ce:	d100      	bne.n	80023d2 <HAL_RCC_ClockConfig+0x6a>
 80023d0:	e089      	b.n	80024e6 <HAL_RCC_ClockConfig+0x17e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d107      	bne.n	80023ea <HAL_RCC_ClockConfig+0x82>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023da:	4b6a      	ldr	r3, [pc, #424]	; (8002584 <HAL_RCC_ClockConfig+0x21c>)
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	2380      	movs	r3, #128	; 0x80
 80023e0:	029b      	lsls	r3, r3, #10
 80023e2:	4013      	ands	r3, r2
 80023e4:	d120      	bne.n	8002428 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e0c5      	b.n	8002576 <HAL_RCC_ClockConfig+0x20e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	2b03      	cmp	r3, #3
 80023f0:	d107      	bne.n	8002402 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023f2:	4b64      	ldr	r3, [pc, #400]	; (8002584 <HAL_RCC_ClockConfig+0x21c>)
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	2380      	movs	r3, #128	; 0x80
 80023f8:	049b      	lsls	r3, r3, #18
 80023fa:	4013      	ands	r3, r2
 80023fc:	d114      	bne.n	8002428 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e0b9      	b.n	8002576 <HAL_RCC_ClockConfig+0x20e>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	2b01      	cmp	r3, #1
 8002408:	d106      	bne.n	8002418 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800240a:	4b5e      	ldr	r3, [pc, #376]	; (8002584 <HAL_RCC_ClockConfig+0x21c>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	2204      	movs	r2, #4
 8002410:	4013      	ands	r3, r2
 8002412:	d109      	bne.n	8002428 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	e0ae      	b.n	8002576 <HAL_RCC_ClockConfig+0x20e>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 8002418:	4b5a      	ldr	r3, [pc, #360]	; (8002584 <HAL_RCC_ClockConfig+0x21c>)
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	2380      	movs	r3, #128	; 0x80
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	4013      	ands	r3, r2
 8002422:	d101      	bne.n	8002428 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e0a6      	b.n	8002576 <HAL_RCC_ClockConfig+0x20e>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002428:	4a56      	ldr	r2, [pc, #344]	; (8002584 <HAL_RCC_ClockConfig+0x21c>)
 800242a:	4b56      	ldr	r3, [pc, #344]	; (8002584 <HAL_RCC_ClockConfig+0x21c>)
 800242c:	68db      	ldr	r3, [r3, #12]
 800242e:	2103      	movs	r1, #3
 8002430:	438b      	bics	r3, r1
 8002432:	0019      	movs	r1, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	430b      	orrs	r3, r1
 800243a:	60d3      	str	r3, [r2, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800243c:	f7ff f8de 	bl	80015fc <HAL_GetTick>
 8002440:	0003      	movs	r3, r0
 8002442:	60fb      	str	r3, [r7, #12]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	2b02      	cmp	r3, #2
 800244a:	d111      	bne.n	8002470 <HAL_RCC_ClockConfig+0x108>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800244c:	e009      	b.n	8002462 <HAL_RCC_ClockConfig+0xfa>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800244e:	f7ff f8d5 	bl	80015fc <HAL_GetTick>
 8002452:	0002      	movs	r2, r0
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	4a4b      	ldr	r2, [pc, #300]	; (8002588 <HAL_RCC_ClockConfig+0x220>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d901      	bls.n	8002462 <HAL_RCC_ClockConfig+0xfa>
        {
          return HAL_TIMEOUT;
 800245e:	2303      	movs	r3, #3
 8002460:	e089      	b.n	8002576 <HAL_RCC_ClockConfig+0x20e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002462:	4b48      	ldr	r3, [pc, #288]	; (8002584 <HAL_RCC_ClockConfig+0x21c>)
 8002464:	68db      	ldr	r3, [r3, #12]
 8002466:	220c      	movs	r2, #12
 8002468:	4013      	ands	r3, r2
 800246a:	2b08      	cmp	r3, #8
 800246c:	d1ef      	bne.n	800244e <HAL_RCC_ClockConfig+0xe6>
 800246e:	e03a      	b.n	80024e6 <HAL_RCC_ClockConfig+0x17e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	2b03      	cmp	r3, #3
 8002476:	d111      	bne.n	800249c <HAL_RCC_ClockConfig+0x134>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002478:	e009      	b.n	800248e <HAL_RCC_ClockConfig+0x126>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800247a:	f7ff f8bf 	bl	80015fc <HAL_GetTick>
 800247e:	0002      	movs	r2, r0
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	1ad3      	subs	r3, r2, r3
 8002484:	4a40      	ldr	r2, [pc, #256]	; (8002588 <HAL_RCC_ClockConfig+0x220>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d901      	bls.n	800248e <HAL_RCC_ClockConfig+0x126>
        {
          return HAL_TIMEOUT;
 800248a:	2303      	movs	r3, #3
 800248c:	e073      	b.n	8002576 <HAL_RCC_ClockConfig+0x20e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800248e:	4b3d      	ldr	r3, [pc, #244]	; (8002584 <HAL_RCC_ClockConfig+0x21c>)
 8002490:	68db      	ldr	r3, [r3, #12]
 8002492:	220c      	movs	r2, #12
 8002494:	4013      	ands	r3, r2
 8002496:	2b0c      	cmp	r3, #12
 8002498:	d1ef      	bne.n	800247a <HAL_RCC_ClockConfig+0x112>
 800249a:	e024      	b.n	80024e6 <HAL_RCC_ClockConfig+0x17e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d11b      	bne.n	80024dc <HAL_RCC_ClockConfig+0x174>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80024a4:	e009      	b.n	80024ba <HAL_RCC_ClockConfig+0x152>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024a6:	f7ff f8a9 	bl	80015fc <HAL_GetTick>
 80024aa:	0002      	movs	r2, r0
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	4a35      	ldr	r2, [pc, #212]	; (8002588 <HAL_RCC_ClockConfig+0x220>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d901      	bls.n	80024ba <HAL_RCC_ClockConfig+0x152>
        {
          return HAL_TIMEOUT;
 80024b6:	2303      	movs	r3, #3
 80024b8:	e05d      	b.n	8002576 <HAL_RCC_ClockConfig+0x20e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80024ba:	4b32      	ldr	r3, [pc, #200]	; (8002584 <HAL_RCC_ClockConfig+0x21c>)
 80024bc:	68db      	ldr	r3, [r3, #12]
 80024be:	220c      	movs	r2, #12
 80024c0:	4013      	ands	r3, r2
 80024c2:	2b04      	cmp	r3, #4
 80024c4:	d1ef      	bne.n	80024a6 <HAL_RCC_ClockConfig+0x13e>
 80024c6:	e00e      	b.n	80024e6 <HAL_RCC_ClockConfig+0x17e>
    }      
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024c8:	f7ff f898 	bl	80015fc <HAL_GetTick>
 80024cc:	0002      	movs	r2, r0
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	4a2d      	ldr	r2, [pc, #180]	; (8002588 <HAL_RCC_ClockConfig+0x220>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d901      	bls.n	80024dc <HAL_RCC_ClockConfig+0x174>
        {
          return HAL_TIMEOUT;
 80024d8:	2303      	movs	r3, #3
 80024da:	e04c      	b.n	8002576 <HAL_RCC_ClockConfig+0x20e>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80024dc:	4b29      	ldr	r3, [pc, #164]	; (8002584 <HAL_RCC_ClockConfig+0x21c>)
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	220c      	movs	r2, #12
 80024e2:	4013      	ands	r3, r2
 80024e4:	d1f0      	bne.n	80024c8 <HAL_RCC_ClockConfig+0x160>
        }
      }
    }
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80024e6:	4b26      	ldr	r3, [pc, #152]	; (8002580 <HAL_RCC_ClockConfig+0x218>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	2201      	movs	r2, #1
 80024ec:	401a      	ands	r2, r3
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d911      	bls.n	8002518 <HAL_RCC_ClockConfig+0x1b0>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024f4:	4b22      	ldr	r3, [pc, #136]	; (8002580 <HAL_RCC_ClockConfig+0x218>)
 80024f6:	4a22      	ldr	r2, [pc, #136]	; (8002580 <HAL_RCC_ClockConfig+0x218>)
 80024f8:	6812      	ldr	r2, [r2, #0]
 80024fa:	2101      	movs	r1, #1
 80024fc:	438a      	bics	r2, r1
 80024fe:	0011      	movs	r1, r2
 8002500:	683a      	ldr	r2, [r7, #0]
 8002502:	430a      	orrs	r2, r1
 8002504:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002506:	4b1e      	ldr	r3, [pc, #120]	; (8002580 <HAL_RCC_ClockConfig+0x218>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	2201      	movs	r2, #1
 800250c:	401a      	ands	r2, r3
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	429a      	cmp	r2, r3
 8002512:	d001      	beq.n	8002518 <HAL_RCC_ClockConfig+0x1b0>
    {
      return HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	e02e      	b.n	8002576 <HAL_RCC_ClockConfig+0x20e>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	2204      	movs	r2, #4
 800251e:	4013      	ands	r3, r2
 8002520:	d008      	beq.n	8002534 <HAL_RCC_ClockConfig+0x1cc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002522:	4a18      	ldr	r2, [pc, #96]	; (8002584 <HAL_RCC_ClockConfig+0x21c>)
 8002524:	4b17      	ldr	r3, [pc, #92]	; (8002584 <HAL_RCC_ClockConfig+0x21c>)
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	4918      	ldr	r1, [pc, #96]	; (800258c <HAL_RCC_ClockConfig+0x224>)
 800252a:	4019      	ands	r1, r3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	430b      	orrs	r3, r1
 8002532:	60d3      	str	r3, [r2, #12]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	2208      	movs	r2, #8
 800253a:	4013      	ands	r3, r2
 800253c:	d009      	beq.n	8002552 <HAL_RCC_ClockConfig+0x1ea>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800253e:	4a11      	ldr	r2, [pc, #68]	; (8002584 <HAL_RCC_ClockConfig+0x21c>)
 8002540:	4b10      	ldr	r3, [pc, #64]	; (8002584 <HAL_RCC_ClockConfig+0x21c>)
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	4912      	ldr	r1, [pc, #72]	; (8002590 <HAL_RCC_ClockConfig+0x228>)
 8002546:	4019      	ands	r1, r3
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	691b      	ldr	r3, [r3, #16]
 800254c:	00db      	lsls	r3, r3, #3
 800254e:	430b      	orrs	r3, r1
 8002550:	60d3      	str	r3, [r2, #12]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002552:	f000 f823 	bl	800259c <HAL_RCC_GetSysClockFreq>
 8002556:	0001      	movs	r1, r0
 8002558:	4b0a      	ldr	r3, [pc, #40]	; (8002584 <HAL_RCC_ClockConfig+0x21c>)
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	091b      	lsrs	r3, r3, #4
 800255e:	220f      	movs	r2, #15
 8002560:	4013      	ands	r3, r2
 8002562:	4a0c      	ldr	r2, [pc, #48]	; (8002594 <HAL_RCC_ClockConfig+0x22c>)
 8002564:	5cd3      	ldrb	r3, [r2, r3]
 8002566:	000a      	movs	r2, r1
 8002568:	40da      	lsrs	r2, r3
 800256a:	4b0b      	ldr	r3, [pc, #44]	; (8002598 <HAL_RCC_ClockConfig+0x230>)
 800256c:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800256e:	2000      	movs	r0, #0
 8002570:	f7ff f81a 	bl	80015a8 <HAL_InitTick>
  
  return HAL_OK;
 8002574:	2300      	movs	r3, #0
}
 8002576:	0018      	movs	r0, r3
 8002578:	46bd      	mov	sp, r7
 800257a:	b004      	add	sp, #16
 800257c:	bd80      	pop	{r7, pc}
 800257e:	46c0      	nop			; (mov r8, r8)
 8002580:	40022000 	.word	0x40022000
 8002584:	40021000 	.word	0x40021000
 8002588:	00001388 	.word	0x00001388
 800258c:	fffff8ff 	.word	0xfffff8ff
 8002590:	ffffc7ff 	.word	0xffffc7ff
 8002594:	08004230 	.word	0x08004230
 8002598:	20000004 	.word	0x20000004

0800259c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b086      	sub	sp, #24
 80025a0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0, pllm = 0, plld = 0, pllvco = 0, msiclkrange = 0;
 80025a2:	2300      	movs	r3, #0
 80025a4:	60fb      	str	r3, [r7, #12]
 80025a6:	2300      	movs	r3, #0
 80025a8:	60bb      	str	r3, [r7, #8]
 80025aa:	2300      	movs	r3, #0
 80025ac:	607b      	str	r3, [r7, #4]
 80025ae:	2300      	movs	r3, #0
 80025b0:	617b      	str	r3, [r7, #20]
 80025b2:	2300      	movs	r3, #0
 80025b4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80025b6:	2300      	movs	r3, #0
 80025b8:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80025ba:	4b32      	ldr	r3, [pc, #200]	; (8002684 <HAL_RCC_GetSysClockFreq+0xe8>)
 80025bc:	68db      	ldr	r3, [r3, #12]
 80025be:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	220c      	movs	r2, #12
 80025c4:	4013      	ands	r3, r2
 80025c6:	2b08      	cmp	r3, #8
 80025c8:	d00e      	beq.n	80025e8 <HAL_RCC_GetSysClockFreq+0x4c>
 80025ca:	2b0c      	cmp	r3, #12
 80025cc:	d00f      	beq.n	80025ee <HAL_RCC_GetSysClockFreq+0x52>
 80025ce:	2b04      	cmp	r3, #4
 80025d0:	d145      	bne.n	800265e <HAL_RCC_GetSysClockFreq+0xc2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0)
 80025d2:	4b2c      	ldr	r3, [pc, #176]	; (8002684 <HAL_RCC_GetSysClockFreq+0xe8>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	2210      	movs	r2, #16
 80025d8:	4013      	ands	r3, r2
 80025da:	d002      	beq.n	80025e2 <HAL_RCC_GetSysClockFreq+0x46>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80025dc:	4b2a      	ldr	r3, [pc, #168]	; (8002688 <HAL_RCC_GetSysClockFreq+0xec>)
 80025de:	613b      	str	r3, [r7, #16]
      }
      else 
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80025e0:	e04b      	b.n	800267a <HAL_RCC_GetSysClockFreq+0xde>
        sysclockfreq =  HSI_VALUE;
 80025e2:	4b2a      	ldr	r3, [pc, #168]	; (800268c <HAL_RCC_GetSysClockFreq+0xf0>)
 80025e4:	613b      	str	r3, [r7, #16]
      break;
 80025e6:	e048      	b.n	800267a <HAL_RCC_GetSysClockFreq+0xde>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80025e8:	4b29      	ldr	r3, [pc, #164]	; (8002690 <HAL_RCC_GetSysClockFreq+0xf4>)
 80025ea:	613b      	str	r3, [r7, #16]
      break;
 80025ec:	e045      	b.n	800267a <HAL_RCC_GetSysClockFreq+0xde>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	0c9b      	lsrs	r3, r3, #18
 80025f2:	220f      	movs	r2, #15
 80025f4:	4013      	ands	r3, r2
 80025f6:	4a27      	ldr	r2, [pc, #156]	; (8002694 <HAL_RCC_GetSysClockFreq+0xf8>)
 80025f8:	5cd3      	ldrb	r3, [r2, r3]
 80025fa:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_BITNUMBER) + 1;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	0d9b      	lsrs	r3, r3, #22
 8002600:	2203      	movs	r2, #3
 8002602:	4013      	ands	r3, r2
 8002604:	3301      	adds	r3, #1
 8002606:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002608:	4b1e      	ldr	r3, [pc, #120]	; (8002684 <HAL_RCC_GetSysClockFreq+0xe8>)
 800260a:	68da      	ldr	r2, [r3, #12]
 800260c:	2380      	movs	r3, #128	; 0x80
 800260e:	025b      	lsls	r3, r3, #9
 8002610:	4013      	ands	r3, r2
 8002612:	d009      	beq.n	8002628 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	4a1e      	ldr	r2, [pc, #120]	; (8002690 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002618:	4353      	muls	r3, r2
 800261a:	6879      	ldr	r1, [r7, #4]
 800261c:	0018      	movs	r0, r3
 800261e:	f7fd fd73 	bl	8000108 <__udivsi3>
 8002622:	0003      	movs	r3, r0
 8002624:	617b      	str	r3, [r7, #20]
 8002626:	e017      	b.n	8002658 <HAL_RCC_GetSysClockFreq+0xbc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0)
 8002628:	4b16      	ldr	r3, [pc, #88]	; (8002684 <HAL_RCC_GetSysClockFreq+0xe8>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	2210      	movs	r2, #16
 800262e:	4013      	ands	r3, r2
 8002630:	d009      	beq.n	8002646 <HAL_RCC_GetSysClockFreq+0xaa>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	4a14      	ldr	r2, [pc, #80]	; (8002688 <HAL_RCC_GetSysClockFreq+0xec>)
 8002636:	4353      	muls	r3, r2
 8002638:	6879      	ldr	r1, [r7, #4]
 800263a:	0018      	movs	r0, r3
 800263c:	f7fd fd64 	bl	8000108 <__udivsi3>
 8002640:	0003      	movs	r3, r0
 8002642:	617b      	str	r3, [r7, #20]
 8002644:	e008      	b.n	8002658 <HAL_RCC_GetSysClockFreq+0xbc>
        }
        else 
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	4a10      	ldr	r2, [pc, #64]	; (800268c <HAL_RCC_GetSysClockFreq+0xf0>)
 800264a:	4353      	muls	r3, r2
 800264c:	6879      	ldr	r1, [r7, #4]
 800264e:	0018      	movs	r0, r3
 8002650:	f7fd fd5a 	bl	8000108 <__udivsi3>
 8002654:	0003      	movs	r3, r0
 8002656:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	613b      	str	r3, [r7, #16]
      break;
 800265c:	e00d      	b.n	800267a <HAL_RCC_GetSysClockFreq+0xde>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_BITNUMBER;
 800265e:	4b09      	ldr	r3, [pc, #36]	; (8002684 <HAL_RCC_GetSysClockFreq+0xe8>)
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	0b5b      	lsrs	r3, r3, #13
 8002664:	2207      	movs	r2, #7
 8002666:	4013      	ands	r3, r2
 8002668:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768 * (1 << (msiclkrange + 1)));
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	3301      	adds	r3, #1
 800266e:	2280      	movs	r2, #128	; 0x80
 8002670:	0212      	lsls	r2, r2, #8
 8002672:	409a      	lsls	r2, r3
 8002674:	0013      	movs	r3, r2
 8002676:	613b      	str	r3, [r7, #16]
      break;
 8002678:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800267a:	693b      	ldr	r3, [r7, #16]
}
 800267c:	0018      	movs	r0, r3
 800267e:	46bd      	mov	sp, r7
 8002680:	b006      	add	sp, #24
 8002682:	bd80      	pop	{r7, pc}
 8002684:	40021000 	.word	0x40021000
 8002688:	003d0900 	.word	0x003d0900
 800268c:	00f42400 	.word	0x00f42400
 8002690:	007a1200 	.word	0x007a1200
 8002694:	08004240 	.word	0x08004240

08002698 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800269c:	4b02      	ldr	r3, [pc, #8]	; (80026a8 <HAL_RCC_GetHCLKFreq+0x10>)
 800269e:	681b      	ldr	r3, [r3, #0]
}
 80026a0:	0018      	movs	r0, r3
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	46c0      	nop			; (mov r8, r8)
 80026a8:	20000004 	.word	0x20000004

080026ac <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b084      	sub	sp, #16
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  uint32_t vos = 0;
 80026b4:	2300      	movs	r3, #0
 80026b6:	60fb      	str	r3, [r7, #12]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80026b8:	2300      	movs	r3, #0
 80026ba:	60bb      	str	r3, [r7, #8]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80026bc:	4b23      	ldr	r3, [pc, #140]	; (800274c <RCC_SetFlashLatencyFromMSIRange+0xa0>)
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	22f0      	movs	r2, #240	; 0xf0
 80026c2:	4013      	ands	r3, r2
 80026c4:	d12b      	bne.n	800271e <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80026c6:	4b21      	ldr	r3, [pc, #132]	; (800274c <RCC_SetFlashLatencyFromMSIRange+0xa0>)
 80026c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80026ca:	2380      	movs	r3, #128	; 0x80
 80026cc:	055b      	lsls	r3, r3, #21
 80026ce:	4013      	ands	r3, r2
 80026d0:	d006      	beq.n	80026e0 <RCC_SetFlashLatencyFromMSIRange+0x34>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80026d2:	4b1f      	ldr	r3, [pc, #124]	; (8002750 <RCC_SetFlashLatencyFromMSIRange+0xa4>)
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	23c0      	movs	r3, #192	; 0xc0
 80026d8:	015b      	lsls	r3, r3, #5
 80026da:	4013      	ands	r3, r2
 80026dc:	60fb      	str	r3, [r7, #12]
 80026de:	e012      	b.n	8002706 <RCC_SetFlashLatencyFromMSIRange+0x5a>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026e0:	4b1a      	ldr	r3, [pc, #104]	; (800274c <RCC_SetFlashLatencyFromMSIRange+0xa0>)
 80026e2:	4a1a      	ldr	r2, [pc, #104]	; (800274c <RCC_SetFlashLatencyFromMSIRange+0xa0>)
 80026e4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80026e6:	2180      	movs	r1, #128	; 0x80
 80026e8:	0549      	lsls	r1, r1, #21
 80026ea:	430a      	orrs	r2, r1
 80026ec:	639a      	str	r2, [r3, #56]	; 0x38
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80026ee:	4b18      	ldr	r3, [pc, #96]	; (8002750 <RCC_SetFlashLatencyFromMSIRange+0xa4>)
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	23c0      	movs	r3, #192	; 0xc0
 80026f4:	015b      	lsls	r3, r3, #5
 80026f6:	4013      	ands	r3, r2
 80026f8:	60fb      	str	r3, [r7, #12]
      __HAL_RCC_PWR_CLK_DISABLE();
 80026fa:	4b14      	ldr	r3, [pc, #80]	; (800274c <RCC_SetFlashLatencyFromMSIRange+0xa0>)
 80026fc:	4a13      	ldr	r2, [pc, #76]	; (800274c <RCC_SetFlashLatencyFromMSIRange+0xa0>)
 80026fe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002700:	4914      	ldr	r1, [pc, #80]	; (8002754 <RCC_SetFlashLatencyFromMSIRange+0xa8>)
 8002702:	400a      	ands	r2, r1
 8002704:	639a      	str	r2, [r3, #56]	; 0x38
    }
    
    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8002706:	68fa      	ldr	r2, [r7, #12]
 8002708:	23c0      	movs	r3, #192	; 0xc0
 800270a:	015b      	lsls	r3, r3, #5
 800270c:	429a      	cmp	r2, r3
 800270e:	d106      	bne.n	800271e <RCC_SetFlashLatencyFromMSIRange+0x72>
 8002710:	687a      	ldr	r2, [r7, #4]
 8002712:	23c0      	movs	r3, #192	; 0xc0
 8002714:	021b      	lsls	r3, r3, #8
 8002716:	429a      	cmp	r2, r3
 8002718:	d101      	bne.n	800271e <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 800271a:	2301      	movs	r3, #1
 800271c:	60bb      	str	r3, [r7, #8]
    }
  }
  
  __HAL_FLASH_SET_LATENCY(latency);
 800271e:	4b0e      	ldr	r3, [pc, #56]	; (8002758 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002720:	4a0d      	ldr	r2, [pc, #52]	; (8002758 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002722:	6812      	ldr	r2, [r2, #0]
 8002724:	2101      	movs	r1, #1
 8002726:	438a      	bics	r2, r1
 8002728:	0011      	movs	r1, r2
 800272a:	68ba      	ldr	r2, [r7, #8]
 800272c:	430a      	orrs	r2, r1
 800272e:	601a      	str	r2, [r3, #0]
  
  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8002730:	4b09      	ldr	r3, [pc, #36]	; (8002758 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	2201      	movs	r2, #1
 8002736:	401a      	ands	r2, r3
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	429a      	cmp	r2, r3
 800273c:	d001      	beq.n	8002742 <RCC_SetFlashLatencyFromMSIRange+0x96>
  {
    return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e000      	b.n	8002744 <RCC_SetFlashLatencyFromMSIRange+0x98>
  }
  
  return HAL_OK;
 8002742:	2300      	movs	r3, #0
}
 8002744:	0018      	movs	r0, r3
 8002746:	46bd      	mov	sp, r7
 8002748:	b004      	add	sp, #16
 800274a:	bd80      	pop	{r7, pc}
 800274c:	40021000 	.word	0x40021000
 8002750:	40007000 	.word	0x40007000
 8002754:	efffffff 	.word	0xefffffff
 8002758:	40022000 	.word	0x40022000

0800275c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b086      	sub	sp, #24
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002764:	2300      	movs	r3, #0
 8002766:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002768:	2300      	movs	r3, #0
 800276a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC) 
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	2220      	movs	r2, #32
 8002772:	4013      	ands	r3, r2
 8002774:	d100      	bne.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8002776:	e0c3      	b.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 8002778:	2317      	movs	r3, #23
 800277a:	18fb      	adds	r3, r7, r3
 800277c:	2200      	movs	r2, #0
 800277e:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002780:	4b8d      	ldr	r3, [pc, #564]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002782:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002784:	2380      	movs	r3, #128	; 0x80
 8002786:	055b      	lsls	r3, r3, #21
 8002788:	4013      	ands	r3, r2
 800278a:	d10a      	bne.n	80027a2 <HAL_RCCEx_PeriphCLKConfig+0x46>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800278c:	4b8a      	ldr	r3, [pc, #552]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800278e:	4a8a      	ldr	r2, [pc, #552]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002790:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002792:	2180      	movs	r1, #128	; 0x80
 8002794:	0549      	lsls	r1, r1, #21
 8002796:	430a      	orrs	r2, r1
 8002798:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800279a:	2317      	movs	r3, #23
 800279c:	18fb      	adds	r3, r7, r3
 800279e:	2201      	movs	r2, #1
 80027a0:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027a2:	4b86      	ldr	r3, [pc, #536]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	2380      	movs	r3, #128	; 0x80
 80027a8:	005b      	lsls	r3, r3, #1
 80027aa:	4013      	ands	r3, r2
 80027ac:	d11a      	bne.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027ae:	4b83      	ldr	r3, [pc, #524]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027b0:	4a82      	ldr	r2, [pc, #520]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027b2:	6812      	ldr	r2, [r2, #0]
 80027b4:	2180      	movs	r1, #128	; 0x80
 80027b6:	0049      	lsls	r1, r1, #1
 80027b8:	430a      	orrs	r2, r1
 80027ba:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027bc:	f7fe ff1e 	bl	80015fc <HAL_GetTick>
 80027c0:	0003      	movs	r3, r0
 80027c2:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027c4:	e008      	b.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027c6:	f7fe ff19 	bl	80015fc <HAL_GetTick>
 80027ca:	0002      	movs	r2, r0
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	1ad3      	subs	r3, r2, r3
 80027d0:	2b64      	cmp	r3, #100	; 0x64
 80027d2:	d901      	bls.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
        {
          return HAL_TIMEOUT;
 80027d4:	2303      	movs	r3, #3
 80027d6:	e0ea      	b.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x252>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027d8:	4b78      	ldr	r3, [pc, #480]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	2380      	movs	r3, #128	; 0x80
 80027de:	005b      	lsls	r3, r3, #1
 80027e0:	4013      	ands	r3, r2
 80027e2:	d0f0      	beq.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x6a>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */ 
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80027e4:	4b74      	ldr	r3, [pc, #464]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	23c0      	movs	r3, #192	; 0xc0
 80027ea:	039b      	lsls	r3, r3, #14
 80027ec:	4013      	ands	r3, r2
 80027ee:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	685a      	ldr	r2, [r3, #4]
 80027f4:	23c0      	movs	r3, #192	; 0xc0
 80027f6:	039b      	lsls	r3, r3, #14
 80027f8:	401a      	ands	r2, r3
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d010      	beq.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0xc6>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if (((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE) && HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	685a      	ldr	r2, [r3, #4]
 8002804:	23c0      	movs	r3, #192	; 0xc0
 8002806:	029b      	lsls	r3, r3, #10
 8002808:	401a      	ands	r2, r3
 800280a:	23c0      	movs	r3, #192	; 0xc0
 800280c:	029b      	lsls	r3, r3, #10
 800280e:	429a      	cmp	r2, r3
 8002810:	d107      	bne.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0xc6>
 8002812:	4b69      	ldr	r3, [pc, #420]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	2380      	movs	r3, #128	; 0x80
 8002818:	029b      	lsls	r3, r3, #10
 800281a:	4013      	ands	r3, r2
 800281c:	d001      	beq.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0xc6>
      {
        /* To update HSE divider, first switch-OFF HSE clock oscillator*/
        return HAL_ERROR; 
 800281e:	2301      	movs	r3, #1
 8002820:	e0c5      	b.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x252>
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002822:	4b65      	ldr	r3, [pc, #404]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002824:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002826:	23c0      	movs	r3, #192	; 0xc0
 8002828:	029b      	lsls	r3, r3, #10
 800282a:	4013      	ands	r3, r2
 800282c:	60fb      	str	r3, [r7, #12]
    
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d03b      	beq.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x150>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	685a      	ldr	r2, [r3, #4]
 8002838:	23c0      	movs	r3, #192	; 0xc0
 800283a:	029b      	lsls	r3, r3, #10
 800283c:	401a      	ands	r2, r3
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	429a      	cmp	r2, r3
 8002842:	d033      	beq.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x150>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	2220      	movs	r2, #32
 800284a:	4013      	ands	r3, r2
 800284c:	d02e      	beq.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x150>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800284e:	4b5a      	ldr	r3, [pc, #360]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002850:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002852:	4a5b      	ldr	r2, [pc, #364]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002854:	4013      	ands	r3, r2
 8002856:	60fb      	str	r3, [r7, #12]
      
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002858:	4b57      	ldr	r3, [pc, #348]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800285a:	4a57      	ldr	r2, [pc, #348]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800285c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800285e:	2180      	movs	r1, #128	; 0x80
 8002860:	0309      	lsls	r1, r1, #12
 8002862:	430a      	orrs	r2, r1
 8002864:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002866:	4b54      	ldr	r3, [pc, #336]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002868:	4a53      	ldr	r2, [pc, #332]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800286a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800286c:	4955      	ldr	r1, [pc, #340]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800286e:	400a      	ands	r2, r1
 8002870:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002872:	4b51      	ldr	r3, [pc, #324]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002874:	68fa      	ldr	r2, [r7, #12]
 8002876:	651a      	str	r2, [r3, #80]	; 0x50
      
       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002878:	68fa      	ldr	r2, [r7, #12]
 800287a:	2380      	movs	r3, #128	; 0x80
 800287c:	005b      	lsls	r3, r3, #1
 800287e:	4013      	ands	r3, r2
 8002880:	d014      	beq.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002882:	f7fe febb 	bl	80015fc <HAL_GetTick>
 8002886:	0003      	movs	r3, r0
 8002888:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800288a:	e009      	b.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x144>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800288c:	f7fe feb6 	bl	80015fc <HAL_GetTick>
 8002890:	0002      	movs	r2, r0
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	4a4c      	ldr	r2, [pc, #304]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d901      	bls.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x144>
          {
            return HAL_TIMEOUT;
 800289c:	2303      	movs	r3, #3
 800289e:	e086      	b.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x252>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028a0:	4b45      	ldr	r3, [pc, #276]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80028a2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80028a4:	2380      	movs	r3, #128	; 0x80
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	4013      	ands	r3, r2
 80028aa:	d0ef      	beq.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x130>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	685a      	ldr	r2, [r3, #4]
 80028b0:	23c0      	movs	r3, #192	; 0xc0
 80028b2:	029b      	lsls	r3, r3, #10
 80028b4:	401a      	ands	r2, r3
 80028b6:	23c0      	movs	r3, #192	; 0xc0
 80028b8:	029b      	lsls	r3, r3, #10
 80028ba:	429a      	cmp	r2, r3
 80028bc:	d10b      	bne.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80028be:	4a3e      	ldr	r2, [pc, #248]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80028c0:	4b3d      	ldr	r3, [pc, #244]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4941      	ldr	r1, [pc, #260]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x270>)
 80028c6:	4019      	ands	r1, r3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6858      	ldr	r0, [r3, #4]
 80028cc:	23c0      	movs	r3, #192	; 0xc0
 80028ce:	039b      	lsls	r3, r3, #14
 80028d0:	4003      	ands	r3, r0
 80028d2:	430b      	orrs	r3, r1
 80028d4:	6013      	str	r3, [r2, #0]
 80028d6:	4a38      	ldr	r2, [pc, #224]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80028d8:	4b37      	ldr	r3, [pc, #220]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80028da:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6858      	ldr	r0, [r3, #4]
 80028e0:	23c0      	movs	r3, #192	; 0xc0
 80028e2:	029b      	lsls	r3, r3, #10
 80028e4:	4003      	ands	r3, r0
 80028e6:	430b      	orrs	r3, r1
 80028e8:	6513      	str	r3, [r2, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80028ea:	2317      	movs	r3, #23
 80028ec:	18fb      	adds	r3, r7, r3
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d105      	bne.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028f4:	4b30      	ldr	r3, [pc, #192]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80028f6:	4a30      	ldr	r2, [pc, #192]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80028f8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80028fa:	4935      	ldr	r1, [pc, #212]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 80028fc:	400a      	ands	r2, r1
 80028fe:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }
  
#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	2201      	movs	r2, #1
 8002906:	4013      	ands	r3, r2
 8002908:	d009      	beq.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800290a:	4a2b      	ldr	r2, [pc, #172]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800290c:	4b2a      	ldr	r3, [pc, #168]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800290e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002910:	2103      	movs	r1, #3
 8002912:	438b      	bics	r3, r1
 8002914:	0019      	movs	r1, r3
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	430b      	orrs	r3, r1
 800291c:	64d3      	str	r3, [r2, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */
  
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	2202      	movs	r2, #2
 8002924:	4013      	ands	r3, r2
 8002926:	d009      	beq.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x1e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002928:	4a23      	ldr	r2, [pc, #140]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800292a:	4b23      	ldr	r3, [pc, #140]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800292c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800292e:	210c      	movs	r1, #12
 8002930:	438b      	bics	r3, r1
 8002932:	0019      	movs	r1, r3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	68db      	ldr	r3, [r3, #12]
 8002938:	430b      	orrs	r3, r1
 800293a:	64d3      	str	r3, [r2, #76]	; 0x4c
  }
  
  /*------------------------------ LPUART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	2204      	movs	r2, #4
 8002942:	4013      	ands	r3, r2
 8002944:	d008      	beq.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));
    
    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002946:	4a1c      	ldr	r2, [pc, #112]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002948:	4b1b      	ldr	r3, [pc, #108]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800294a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800294c:	4921      	ldr	r1, [pc, #132]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 800294e:	4019      	ands	r1, r3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	691b      	ldr	r3, [r3, #16]
 8002954:	430b      	orrs	r3, r1
 8002956:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	2208      	movs	r2, #8
 800295e:	4013      	ands	r3, r2
 8002960:	d008      	beq.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002962:	4a15      	ldr	r2, [pc, #84]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002964:	4b14      	ldr	r3, [pc, #80]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002966:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002968:	491b      	ldr	r1, [pc, #108]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800296a:	4019      	ands	r1, r3
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	695b      	ldr	r3, [r3, #20]
 8002970:	430b      	orrs	r3, r1
 8002972:	64d3      	str	r3, [r2, #76]	; 0x4c
  }  
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	2240      	movs	r2, #64	; 0x40
 800297a:	4013      	ands	r3, r2
 800297c:	d008      	beq.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800297e:	4a0e      	ldr	r2, [pc, #56]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002980:	4b0d      	ldr	r3, [pc, #52]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002982:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002984:	4915      	ldr	r1, [pc, #84]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002986:	4019      	ands	r1, r3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	69db      	ldr	r3, [r3, #28]
 800298c:	430b      	orrs	r3, r1
 800298e:	64d3      	str	r3, [r2, #76]	; 0x4c
  }
#endif /* USB */
  
  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	2280      	movs	r2, #128	; 0x80
 8002996:	4013      	ands	r3, r2
 8002998:	d008      	beq.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800299a:	4a07      	ldr	r2, [pc, #28]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800299c:	4b06      	ldr	r3, [pc, #24]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800299e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029a0:	490f      	ldr	r1, [pc, #60]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80029a2:	4019      	ands	r1, r3
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	699b      	ldr	r3, [r3, #24]
 80029a8:	430b      	orrs	r3, r1
 80029aa:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  return HAL_OK;
 80029ac:	2300      	movs	r3, #0
}
 80029ae:	0018      	movs	r0, r3
 80029b0:	46bd      	mov	sp, r7
 80029b2:	b006      	add	sp, #24
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	46c0      	nop			; (mov r8, r8)
 80029b8:	40021000 	.word	0x40021000
 80029bc:	40007000 	.word	0x40007000
 80029c0:	fffcffff 	.word	0xfffcffff
 80029c4:	fff7ffff 	.word	0xfff7ffff
 80029c8:	00001388 	.word	0x00001388
 80029cc:	ffcfffff 	.word	0xffcfffff
 80029d0:	efffffff 	.word	0xefffffff
 80029d4:	fffff3ff 	.word	0xfffff3ff
 80029d8:	ffffcfff 	.word	0xffffcfff
 80029dc:	fbffffff 	.word	0xfbffffff
 80029e0:	fff3ffff 	.word	0xfff3ffff

080029e4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc: RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b082      	sub	sp, #8
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d101      	bne.n	80029f6 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e074      	b.n	8002ae0 <HAL_RTC_Init+0xfc>
  assert_param(IS_RTC_OUTPUT(hrtc->Init.OutPut));
  assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
  assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
  assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
  
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2221      	movs	r2, #33	; 0x21
 80029fa:	5c9b      	ldrb	r3, [r3, r2]
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d107      	bne.n	8002a12 <HAL_RTC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2220      	movs	r2, #32
 8002a06:	2100      	movs	r1, #0
 8002a08:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	0018      	movs	r0, r3
 8002a0e:	f001 fad3 	bl	8003fb8 <HAL_RTC_MspInit>
  }

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2221      	movs	r2, #33	; 0x21
 8002a16:	2102      	movs	r1, #2
 8002a18:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	22ca      	movs	r2, #202	; 0xca
 8002a20:	625a      	str	r2, [r3, #36]	; 0x24
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	2253      	movs	r2, #83	; 0x53
 8002a28:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	0018      	movs	r0, r3
 8002a2e:	f000 fac0 	bl	8002fb2 <RTC_EnterInitMode>
 8002a32:	1e03      	subs	r3, r0, #0
 8002a34:	d009      	beq.n	8002a4a <HAL_RTC_Init+0x66>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	22ff      	movs	r2, #255	; 0xff
 8002a3c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2221      	movs	r2, #33	; 0x21
 8002a42:	2104      	movs	r1, #4
 8002a44:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e04a      	b.n	8002ae0 <HAL_RTC_Init+0xfc>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	6812      	ldr	r2, [r2, #0]
 8002a52:	6892      	ldr	r2, [r2, #8]
 8002a54:	4924      	ldr	r1, [pc, #144]	; (8002ae8 <HAL_RTC_Init+0x104>)
 8002a56:	400a      	ands	r2, r1
 8002a58:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	687a      	ldr	r2, [r7, #4]
 8002a60:	6812      	ldr	r2, [r2, #0]
 8002a62:	6891      	ldr	r1, [r2, #8]
 8002a64:	687a      	ldr	r2, [r7, #4]
 8002a66:	6850      	ldr	r0, [r2, #4]
 8002a68:	687a      	ldr	r2, [r7, #4]
 8002a6a:	6912      	ldr	r2, [r2, #16]
 8002a6c:	4310      	orrs	r0, r2
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	6992      	ldr	r2, [r2, #24]
 8002a72:	4302      	orrs	r2, r0
 8002a74:	430a      	orrs	r2, r1
 8002a76:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	687a      	ldr	r2, [r7, #4]
 8002a7e:	68d2      	ldr	r2, [r2, #12]
 8002a80:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	6812      	ldr	r2, [r2, #0]
 8002a8a:	6911      	ldr	r1, [r2, #16]
 8002a8c:	687a      	ldr	r2, [r7, #4]
 8002a8e:	6892      	ldr	r2, [r2, #8]
 8002a90:	0412      	lsls	r2, r2, #16
 8002a92:	430a      	orrs	r2, r1
 8002a94:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	6812      	ldr	r2, [r2, #0]
 8002a9e:	68d2      	ldr	r2, [r2, #12]
 8002aa0:	2180      	movs	r1, #128	; 0x80
 8002aa2:	438a      	bics	r2, r1
 8002aa4:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	6812      	ldr	r2, [r2, #0]
 8002aae:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002ab0:	2103      	movs	r1, #3
 8002ab2:	438a      	bics	r2, r1
 8002ab4:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	687a      	ldr	r2, [r7, #4]
 8002abc:	6812      	ldr	r2, [r2, #0]
 8002abe:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 8002ac0:	687a      	ldr	r2, [r7, #4]
 8002ac2:	69d0      	ldr	r0, [r2, #28]
 8002ac4:	687a      	ldr	r2, [r7, #4]
 8002ac6:	6952      	ldr	r2, [r2, #20]
 8002ac8:	4302      	orrs	r2, r0
 8002aca:	430a      	orrs	r2, r1
 8002acc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	22ff      	movs	r2, #255	; 0xff
 8002ad4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2221      	movs	r2, #33	; 0x21
 8002ada:	2101      	movs	r1, #1
 8002adc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002ade:	2300      	movs	r3, #0
  }
}
 8002ae0:	0018      	movs	r0, r3
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	b002      	add	sp, #8
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	ff8fffbf 	.word	0xff8fffbf

08002aec <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format 
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002aec:	b590      	push	{r4, r7, lr}
 8002aee:	b087      	sub	sp, #28
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	60f8      	str	r0, [r7, #12]
 8002af4:	60b9      	str	r1, [r7, #8]
 8002af6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002af8:	2300      	movs	r3, #0
 8002afa:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */ 
  __HAL_LOCK(hrtc);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2220      	movs	r2, #32
 8002b00:	5c9b      	ldrb	r3, [r3, r2]
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d101      	bne.n	8002b0a <HAL_RTC_SetTime+0x1e>
 8002b06:	2302      	movs	r3, #2
 8002b08:	e0b5      	b.n	8002c76 <HAL_RTC_SetTime+0x18a>
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2220      	movs	r2, #32
 8002b0e:	2101      	movs	r1, #1
 8002b10:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2221      	movs	r2, #33	; 0x21
 8002b16:	2102      	movs	r1, #2
 8002b18:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d125      	bne.n	8002b6c <HAL_RTC_SetTime+0x80>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	2240      	movs	r2, #64	; 0x40
 8002b28:	4013      	ands	r3, r2
 8002b2a:	d102      	bne.n	8002b32 <HAL_RTC_SetTime+0x46>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	781b      	ldrb	r3, [r3, #0]
 8002b36:	0018      	movs	r0, r3
 8002b38:	f000 fa67 	bl	800300a <RTC_ByteToBcd2>
 8002b3c:	0003      	movs	r3, r0
 8002b3e:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	785b      	ldrb	r3, [r3, #1]
 8002b44:	0018      	movs	r0, r3
 8002b46:	f000 fa60 	bl	800300a <RTC_ByteToBcd2>
 8002b4a:	0003      	movs	r3, r0
 8002b4c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002b4e:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	789b      	ldrb	r3, [r3, #2]
 8002b54:	0018      	movs	r0, r3
 8002b56:	f000 fa58 	bl	800300a <RTC_ByteToBcd2>
 8002b5a:	0003      	movs	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002b5c:	0022      	movs	r2, r4
 8002b5e:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	78db      	ldrb	r3, [r3, #3]
 8002b64:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002b66:	4313      	orrs	r3, r2
 8002b68:	617b      	str	r3, [r7, #20]
 8002b6a:	e01f      	b.n	8002bac <HAL_RTC_SetTime+0xc0>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	2240      	movs	r2, #64	; 0x40
 8002b74:	4013      	ands	r3, r2
 8002b76:	d007      	beq.n	8002b88 <HAL_RTC_SetTime+0x9c>
    {
      tmpreg = RTC_Bcd2ToByte(sTime->Hours);
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	0018      	movs	r0, r3
 8002b7e:	f000 fa65 	bl	800304c <RTC_Bcd2ToByte>
 8002b82:	0003      	movs	r3, r0
 8002b84:	617b      	str	r3, [r7, #20]
 8002b86:	e002      	b.n	8002b8e <HAL_RTC_SetTime+0xa2>
      assert_param(IS_RTC_HOUR12(tmpreg));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	781b      	ldrb	r3, [r3, #0]
 8002b92:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	785b      	ldrb	r3, [r3, #1]
 8002b98:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002b9a:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8002b9c:	68ba      	ldr	r2, [r7, #8]
 8002b9e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002ba0:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	78db      	ldrb	r3, [r3, #3]
 8002ba6:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	22ca      	movs	r2, #202	; 0xca
 8002bb2:	625a      	str	r2, [r3, #36]	; 0x24
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	2253      	movs	r2, #83	; 0x53
 8002bba:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	0018      	movs	r0, r3
 8002bc0:	f000 f9f7 	bl	8002fb2 <RTC_EnterInitMode>
 8002bc4:	1e03      	subs	r3, r0, #0
 8002bc6:	d00d      	beq.n	8002be4 <HAL_RTC_SetTime+0xf8>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	22ff      	movs	r2, #255	; 0xff
 8002bce:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2221      	movs	r2, #33	; 0x21
 8002bd4:	2104      	movs	r1, #4
 8002bd6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2220      	movs	r2, #32
 8002bdc:	2100      	movs	r1, #0
 8002bde:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e048      	b.n	8002c76 <HAL_RTC_SetTime+0x18a>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	697a      	ldr	r2, [r7, #20]
 8002bea:	4925      	ldr	r1, [pc, #148]	; (8002c80 <HAL_RTC_SetTime+0x194>)
 8002bec:	400a      	ands	r2, r1
 8002bee:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	68fa      	ldr	r2, [r7, #12]
 8002bf6:	6812      	ldr	r2, [r2, #0]
 8002bf8:	6892      	ldr	r2, [r2, #8]
 8002bfa:	4922      	ldr	r1, [pc, #136]	; (8002c84 <HAL_RTC_SetTime+0x198>)
 8002bfc:	400a      	ands	r2, r1
 8002bfe:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	68fa      	ldr	r2, [r7, #12]
 8002c06:	6812      	ldr	r2, [r2, #0]
 8002c08:	6891      	ldr	r1, [r2, #8]
 8002c0a:	68ba      	ldr	r2, [r7, #8]
 8002c0c:	68d0      	ldr	r0, [r2, #12]
 8002c0e:	68ba      	ldr	r2, [r7, #8]
 8002c10:	6912      	ldr	r2, [r2, #16]
 8002c12:	4302      	orrs	r2, r0
 8002c14:	430a      	orrs	r2, r1
 8002c16:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	68fa      	ldr	r2, [r7, #12]
 8002c1e:	6812      	ldr	r2, [r2, #0]
 8002c20:	68d2      	ldr	r2, [r2, #12]
 8002c22:	2180      	movs	r1, #128	; 0x80
 8002c24:	438a      	bics	r2, r1
 8002c26:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	2220      	movs	r2, #32
 8002c30:	4013      	ands	r3, r2
 8002c32:	d113      	bne.n	8002c5c <HAL_RTC_SetTime+0x170>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	0018      	movs	r0, r3
 8002c38:	f000 f992 	bl	8002f60 <HAL_RTC_WaitForSynchro>
 8002c3c:	1e03      	subs	r3, r0, #0
 8002c3e:	d00d      	beq.n	8002c5c <HAL_RTC_SetTime+0x170>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	22ff      	movs	r2, #255	; 0xff
 8002c46:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2221      	movs	r2, #33	; 0x21
 8002c4c:	2104      	movs	r1, #4
 8002c4e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2220      	movs	r2, #32
 8002c54:	2100      	movs	r1, #0
 8002c56:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e00c      	b.n	8002c76 <HAL_RTC_SetTime+0x18a>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	22ff      	movs	r2, #255	; 0xff
 8002c62:	625a      	str	r2, [r3, #36]	; 0x24
    
   hrtc->State = HAL_RTC_STATE_READY;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2221      	movs	r2, #33	; 0x21
 8002c68:	2101      	movs	r1, #1
 8002c6a:	5499      	strb	r1, [r3, r2]

   __HAL_UNLOCK(hrtc); 
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2220      	movs	r2, #32
 8002c70:	2100      	movs	r1, #0
 8002c72:	5499      	strb	r1, [r3, r2]

   return HAL_OK;
 8002c74:	2300      	movs	r3, #0
  }
}
 8002c76:	0018      	movs	r0, r3
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	b007      	add	sp, #28
 8002c7c:	bd90      	pop	{r4, r7, pc}
 8002c7e:	46c0      	nop			; (mov r8, r8)
 8002c80:	007f7f7f 	.word	0x007f7f7f
 8002c84:	fffbffff 	.word	0xfffbffff

08002c88 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b086      	sub	sp, #24
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	60f8      	str	r0, [r7, #12]
 8002c90:	60b9      	str	r1, [r7, #8]
 8002c92:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002c94:	2300      	movs	r3, #0
 8002c96:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	691b      	ldr	r3, [r3, #16]
 8002ca8:	045b      	lsls	r3, r3, #17
 8002caa:	0c5a      	lsrs	r2, r3, #17
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	609a      	str	r2, [r3, #8]
  
  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a22      	ldr	r2, [pc, #136]	; (8002d40 <HAL_RTC_GetTime+0xb8>)
 8002cb8:	4013      	ands	r3, r2
 8002cba:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	0c1b      	lsrs	r3, r3, #16
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	223f      	movs	r2, #63	; 0x3f
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	b2da      	uxtb	r2, r3
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8U);
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	0a1b      	lsrs	r3, r3, #8
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	227f      	movs	r2, #127	; 0x7f
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	b2da      	uxtb	r2, r3
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	227f      	movs	r2, #127	; 0x7f
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	b2da      	uxtb	r2, r3
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	0c1b      	lsrs	r3, r3, #16
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	2240      	movs	r2, #64	; 0x40
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	b2da      	uxtb	r2, r3
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d11a      	bne.n	8002d36 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	0018      	movs	r0, r3
 8002d06:	f000 f9a1 	bl	800304c <RTC_Bcd2ToByte>
 8002d0a:	0003      	movs	r3, r0
 8002d0c:	001a      	movs	r2, r3
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	785b      	ldrb	r3, [r3, #1]
 8002d16:	0018      	movs	r0, r3
 8002d18:	f000 f998 	bl	800304c <RTC_Bcd2ToByte>
 8002d1c:	0003      	movs	r3, r0
 8002d1e:	001a      	movs	r2, r3
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	789b      	ldrb	r3, [r3, #2]
 8002d28:	0018      	movs	r0, r3
 8002d2a:	f000 f98f 	bl	800304c <RTC_Bcd2ToByte>
 8002d2e:	0003      	movs	r3, r0
 8002d30:	001a      	movs	r2, r3
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8002d36:	2300      	movs	r3, #0
}
 8002d38:	0018      	movs	r0, r3
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	b006      	add	sp, #24
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	007f7f7f 	.word	0x007f7f7f

08002d44 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format 
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002d44:	b590      	push	{r4, r7, lr}
 8002d46:	b087      	sub	sp, #28
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	60f8      	str	r0, [r7, #12]
 8002d4c:	60b9      	str	r1, [r7, #8]
 8002d4e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002d50:	2300      	movs	r3, #0
 8002d52:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2220      	movs	r2, #32
 8002d58:	5c9b      	ldrb	r3, [r3, r2]
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d101      	bne.n	8002d62 <HAL_RTC_SetDate+0x1e>
 8002d5e:	2302      	movs	r3, #2
 8002d60:	e0a7      	b.n	8002eb2 <HAL_RTC_SetDate+0x16e>
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2220      	movs	r2, #32
 8002d66:	2101      	movs	r1, #1
 8002d68:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2221      	movs	r2, #33	; 0x21
 8002d6e:	2102      	movs	r1, #2
 8002d70:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d10e      	bne.n	8002d96 <HAL_RTC_SetDate+0x52>
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	785b      	ldrb	r3, [r3, #1]
 8002d7c:	001a      	movs	r2, r3
 8002d7e:	2310      	movs	r3, #16
 8002d80:	4013      	ands	r3, r2
 8002d82:	d008      	beq.n	8002d96 <HAL_RTC_SetDate+0x52>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	785b      	ldrb	r3, [r3, #1]
 8002d88:	2210      	movs	r2, #16
 8002d8a:	4393      	bics	r3, r2
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	330a      	adds	r3, #10
 8002d90:	b2da      	uxtb	r2, r3
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d11c      	bne.n	8002dd6 <HAL_RTC_SetDate+0x92>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	78db      	ldrb	r3, [r3, #3]
 8002da0:	0018      	movs	r0, r3
 8002da2:	f000 f932 	bl	800300a <RTC_ByteToBcd2>
 8002da6:	0003      	movs	r3, r0
 8002da8:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	785b      	ldrb	r3, [r3, #1]
 8002dae:	0018      	movs	r0, r3
 8002db0:	f000 f92b 	bl	800300a <RTC_ByteToBcd2>
 8002db4:	0003      	movs	r3, r0
 8002db6:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002db8:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	789b      	ldrb	r3, [r3, #2]
 8002dbe:	0018      	movs	r0, r3
 8002dc0:	f000 f923 	bl	800300a <RTC_ByteToBcd2>
 8002dc4:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002dc6:	0022      	movs	r2, r4
 8002dc8:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	781b      	ldrb	r3, [r3, #0]
 8002dce:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	617b      	str	r3, [r7, #20]
 8002dd4:	e01c      	b.n	8002e10 <HAL_RTC_SetDate+0xcc>
  }
  else
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    datetmpreg = RTC_Bcd2ToByte(sDate->Month);
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	785b      	ldrb	r3, [r3, #1]
 8002dda:	0018      	movs	r0, r3
 8002ddc:	f000 f936 	bl	800304c <RTC_Bcd2ToByte>
 8002de0:	0003      	movs	r3, r0
 8002de2:	617b      	str	r3, [r7, #20]
    assert_param(IS_RTC_MONTH(datetmpreg));
    datetmpreg = RTC_Bcd2ToByte(sDate->Date);
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	789b      	ldrb	r3, [r3, #2]
 8002de8:	0018      	movs	r0, r3
 8002dea:	f000 f92f 	bl	800304c <RTC_Bcd2ToByte>
 8002dee:	0003      	movs	r3, r0
 8002df0:	617b      	str	r3, [r7, #20]
    assert_param(IS_RTC_DATE(datetmpreg));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	78db      	ldrb	r3, [r3, #3]
 8002df6:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	785b      	ldrb	r3, [r3, #1]
 8002dfc:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002dfe:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8002e00:	68ba      	ldr	r2, [r7, #8]
 8002e02:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8002e04:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	781b      	ldrb	r3, [r3, #0]
 8002e0a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	22ca      	movs	r2, #202	; 0xca
 8002e16:	625a      	str	r2, [r3, #36]	; 0x24
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	2253      	movs	r2, #83	; 0x53
 8002e1e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	0018      	movs	r0, r3
 8002e24:	f000 f8c5 	bl	8002fb2 <RTC_EnterInitMode>
 8002e28:	1e03      	subs	r3, r0, #0
 8002e2a:	d00d      	beq.n	8002e48 <HAL_RTC_SetDate+0x104>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	22ff      	movs	r2, #255	; 0xff
 8002e32:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2221      	movs	r2, #33	; 0x21
 8002e38:	2104      	movs	r1, #4
 8002e3a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2220      	movs	r2, #32
 8002e40:	2100      	movs	r1, #0
 8002e42:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	e034      	b.n	8002eb2 <HAL_RTC_SetDate+0x16e>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	697a      	ldr	r2, [r7, #20]
 8002e4e:	491b      	ldr	r1, [pc, #108]	; (8002ebc <HAL_RTC_SetDate+0x178>)
 8002e50:	400a      	ands	r2, r1
 8002e52:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	68fa      	ldr	r2, [r7, #12]
 8002e5a:	6812      	ldr	r2, [r2, #0]
 8002e5c:	68d2      	ldr	r2, [r2, #12]
 8002e5e:	2180      	movs	r1, #128	; 0x80
 8002e60:	438a      	bics	r2, r1
 8002e62:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	2220      	movs	r2, #32
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	d113      	bne.n	8002e98 <HAL_RTC_SetDate+0x154>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	0018      	movs	r0, r3
 8002e74:	f000 f874 	bl	8002f60 <HAL_RTC_WaitForSynchro>
 8002e78:	1e03      	subs	r3, r0, #0
 8002e7a:	d00d      	beq.n	8002e98 <HAL_RTC_SetDate+0x154>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	22ff      	movs	r2, #255	; 0xff
 8002e82:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2221      	movs	r2, #33	; 0x21
 8002e88:	2104      	movs	r1, #4
 8002e8a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2220      	movs	r2, #32
 8002e90:	2100      	movs	r1, #0
 8002e92:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e00c      	b.n	8002eb2 <HAL_RTC_SetDate+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	22ff      	movs	r2, #255	; 0xff
 8002e9e:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2221      	movs	r2, #33	; 0x21
 8002ea4:	2101      	movs	r1, #1
 8002ea6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2220      	movs	r2, #32
 8002eac:	2100      	movs	r1, #0
 8002eae:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002eb0:	2300      	movs	r3, #0
  }
}
 8002eb2:	0018      	movs	r0, r3
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	b007      	add	sp, #28
 8002eb8:	bd90      	pop	{r4, r7, pc}
 8002eba:	46c0      	nop			; (mov r8, r8)
 8002ebc:	00ffff3f 	.word	0x00ffff3f

08002ec0 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b086      	sub	sp, #24
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	60f8      	str	r0, [r7, #12]
 8002ec8:	60b9      	str	r1, [r7, #8]
 8002eca:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	4a21      	ldr	r2, [pc, #132]	; (8002f5c <HAL_RTC_GetDate+0x9c>)
 8002ed8:	4013      	ands	r3, r2
 8002eda:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	0c1b      	lsrs	r3, r3, #16
 8002ee0:	b2da      	uxtb	r2, r3
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	0a1b      	lsrs	r3, r3, #8
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	221f      	movs	r2, #31
 8002eee:	4013      	ands	r3, r2
 8002ef0:	b2da      	uxtb	r2, r3
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	223f      	movs	r2, #63	; 0x3f
 8002efc:	4013      	ands	r3, r2
 8002efe:	b2da      	uxtb	r2, r3
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U); 
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	0b5b      	lsrs	r3, r3, #13
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	2207      	movs	r2, #7
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	b2da      	uxtb	r2, r3
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d11a      	bne.n	8002f50 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	78db      	ldrb	r3, [r3, #3]
 8002f1e:	0018      	movs	r0, r3
 8002f20:	f000 f894 	bl	800304c <RTC_Bcd2ToByte>
 8002f24:	0003      	movs	r3, r0
 8002f26:	001a      	movs	r2, r3
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	785b      	ldrb	r3, [r3, #1]
 8002f30:	0018      	movs	r0, r3
 8002f32:	f000 f88b 	bl	800304c <RTC_Bcd2ToByte>
 8002f36:	0003      	movs	r3, r0
 8002f38:	001a      	movs	r2, r3
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	789b      	ldrb	r3, [r3, #2]
 8002f42:	0018      	movs	r0, r3
 8002f44:	f000 f882 	bl	800304c <RTC_Bcd2ToByte>
 8002f48:	0003      	movs	r3, r0
 8002f4a:	001a      	movs	r2, r3
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8002f50:	2300      	movs	r3, #0
}
 8002f52:	0018      	movs	r0, r3
 8002f54:	46bd      	mov	sp, r7
 8002f56:	b006      	add	sp, #24
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	46c0      	nop			; (mov r8, r8)
 8002f5c:	00ffff3f 	.word	0x00ffff3f

08002f60 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc: RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b084      	sub	sp, #16
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	687a      	ldr	r2, [r7, #4]
 8002f72:	6812      	ldr	r2, [r2, #0]
 8002f74:	68d2      	ldr	r2, [r2, #12]
 8002f76:	21a0      	movs	r1, #160	; 0xa0
 8002f78:	438a      	bics	r2, r1
 8002f7a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8002f7c:	f7fe fb3e 	bl	80015fc <HAL_GetTick>
 8002f80:	0003      	movs	r3, r0
 8002f82:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8002f84:	e00a      	b.n	8002f9c <HAL_RTC_WaitForSynchro+0x3c>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002f86:	f7fe fb39 	bl	80015fc <HAL_GetTick>
 8002f8a:	0002      	movs	r2, r0
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	1ad2      	subs	r2, r2, r3
 8002f90:	23fa      	movs	r3, #250	; 0xfa
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	429a      	cmp	r2, r3
 8002f96:	d901      	bls.n	8002f9c <HAL_RTC_WaitForSynchro+0x3c>
    {
      return HAL_TIMEOUT;
 8002f98:	2303      	movs	r3, #3
 8002f9a:	e006      	b.n	8002faa <HAL_RTC_WaitForSynchro+0x4a>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	68db      	ldr	r3, [r3, #12]
 8002fa2:	2220      	movs	r2, #32
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	d0ee      	beq.n	8002f86 <HAL_RTC_WaitForSynchro+0x26>
    }
  }

  return HAL_OK;
 8002fa8:	2300      	movs	r3, #0
}
 8002faa:	0018      	movs	r0, r3
 8002fac:	46bd      	mov	sp, r7
 8002fae:	b004      	add	sp, #16
 8002fb0:	bd80      	pop	{r7, pc}

08002fb2 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc: RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8002fb2:	b580      	push	{r7, lr}
 8002fb4:	b084      	sub	sp, #16
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	2240      	movs	r2, #64	; 0x40
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	d11a      	bne.n	8003000 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	4252      	negs	r2, r2
 8002fd2:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002fd4:	f7fe fb12 	bl	80015fc <HAL_GetTick>
 8002fd8:	0003      	movs	r3, r0
 8002fda:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002fdc:	e00a      	b.n	8002ff4 <RTC_EnterInitMode+0x42>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8002fde:	f7fe fb0d 	bl	80015fc <HAL_GetTick>
 8002fe2:	0002      	movs	r2, r0
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	1ad2      	subs	r2, r2, r3
 8002fe8:	23fa      	movs	r3, #250	; 0xfa
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d901      	bls.n	8002ff4 <RTC_EnterInitMode+0x42>
      {
        return HAL_TIMEOUT;
 8002ff0:	2303      	movs	r3, #3
 8002ff2:	e006      	b.n	8003002 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	68db      	ldr	r3, [r3, #12]
 8002ffa:	2240      	movs	r2, #64	; 0x40
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	d0ee      	beq.n	8002fde <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8003000:	2300      	movs	r3, #0
}
 8003002:	0018      	movs	r0, r3
 8003004:	46bd      	mov	sp, r7
 8003006:	b004      	add	sp, #16
 8003008:	bd80      	pop	{r7, pc}

0800300a <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800300a:	b580      	push	{r7, lr}
 800300c:	b084      	sub	sp, #16
 800300e:	af00      	add	r7, sp, #0
 8003010:	0002      	movs	r2, r0
 8003012:	1dfb      	adds	r3, r7, #7
 8003014:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8003016:	2300      	movs	r3, #0
 8003018:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 800301a:	e007      	b.n	800302c <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	3301      	adds	r3, #1
 8003020:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8003022:	1dfb      	adds	r3, r7, #7
 8003024:	1dfa      	adds	r2, r7, #7
 8003026:	7812      	ldrb	r2, [r2, #0]
 8003028:	3a0a      	subs	r2, #10
 800302a:	701a      	strb	r2, [r3, #0]
  while(Value >= 10U)
 800302c:	1dfb      	adds	r3, r7, #7
 800302e:	781b      	ldrb	r3, [r3, #0]
 8003030:	2b09      	cmp	r3, #9
 8003032:	d8f3      	bhi.n	800301c <RTC_ByteToBcd2+0x12>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	b2db      	uxtb	r3, r3
 8003038:	011b      	lsls	r3, r3, #4
 800303a:	b2da      	uxtb	r2, r3
 800303c:	1dfb      	adds	r3, r7, #7
 800303e:	781b      	ldrb	r3, [r3, #0]
 8003040:	4313      	orrs	r3, r2
 8003042:	b2db      	uxtb	r3, r3
}
 8003044:	0018      	movs	r0, r3
 8003046:	46bd      	mov	sp, r7
 8003048:	b004      	add	sp, #16
 800304a:	bd80      	pop	{r7, pc}

0800304c <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b084      	sub	sp, #16
 8003050:	af00      	add	r7, sp, #0
 8003052:	0002      	movs	r2, r0
 8003054:	1dfb      	adds	r3, r7, #7
 8003056:	701a      	strb	r2, [r3, #0]
  uint32_t tmp = 0U;
 8003058:	2300      	movs	r3, #0
 800305a:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0U) >> (uint8_t)0x4U) * 10U;
 800305c:	1dfb      	adds	r3, r7, #7
 800305e:	781b      	ldrb	r3, [r3, #0]
 8003060:	091b      	lsrs	r3, r3, #4
 8003062:	b2db      	uxtb	r3, r3
 8003064:	001a      	movs	r2, r3
 8003066:	0013      	movs	r3, r2
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	189b      	adds	r3, r3, r2
 800306c:	005b      	lsls	r3, r3, #1
 800306e:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0FU));
 8003070:	1dfb      	adds	r3, r7, #7
 8003072:	781b      	ldrb	r3, [r3, #0]
 8003074:	220f      	movs	r2, #15
 8003076:	4013      	ands	r3, r2
 8003078:	b2da      	uxtb	r2, r3
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	b2db      	uxtb	r3, r3
 800307e:	18d3      	adds	r3, r2, r3
 8003080:	b2db      	uxtb	r3, r3
}
 8003082:	0018      	movs	r0, r3
 8003084:	46bd      	mov	sp, r7
 8003086:	b004      	add	sp, #16
 8003088:	bd80      	pop	{r7, pc}

0800308a <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800308a:	b580      	push	{r7, lr}
 800308c:	b082      	sub	sp, #8
 800308e:	af00      	add	r7, sp, #0
 8003090:	6078      	str	r0, [r7, #4]
 8003092:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	6839      	ldr	r1, [r7, #0]
 800309a:	2201      	movs	r2, #1
 800309c:	0018      	movs	r0, r3
 800309e:	f000 fa07 	bl	80034b0 <TIM_CCxChannelCmd>

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	687a      	ldr	r2, [r7, #4]
 80030a8:	6812      	ldr	r2, [r2, #0]
 80030aa:	6812      	ldr	r2, [r2, #0]
 80030ac:	2101      	movs	r1, #1
 80030ae:	430a      	orrs	r2, r1
 80030b0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80030b2:	2300      	movs	r3, #0
}
 80030b4:	0018      	movs	r0, r3
 80030b6:	46bd      	mov	sp, r7
 80030b8:	b002      	add	sp, #8
 80030ba:	bd80      	pop	{r7, pc}

080030bc <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b082      	sub	sp, #8
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	6839      	ldr	r1, [r7, #0]
 80030cc:	2200      	movs	r2, #0
 80030ce:	0018      	movs	r0, r3
 80030d0:	f000 f9ee 	bl	80034b0 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	6a1b      	ldr	r3, [r3, #32]
 80030da:	4a0a      	ldr	r2, [pc, #40]	; (8003104 <HAL_TIM_PWM_Stop+0x48>)
 80030dc:	4013      	ands	r3, r2
 80030de:	d107      	bne.n	80030f0 <HAL_TIM_PWM_Stop+0x34>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	6812      	ldr	r2, [r2, #0]
 80030e8:	6812      	ldr	r2, [r2, #0]
 80030ea:	2101      	movs	r1, #1
 80030ec:	438a      	bics	r2, r1
 80030ee:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2235      	movs	r2, #53	; 0x35
 80030f4:	2101      	movs	r1, #1
 80030f6:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80030f8:	2300      	movs	r3, #0
}
 80030fa:	0018      	movs	r0, r3
 80030fc:	46bd      	mov	sp, r7
 80030fe:	b002      	add	sp, #8
 8003100:	bd80      	pop	{r7, pc}
 8003102:	46c0      	nop			; (mov r8, r8)
 8003104:	00001111 	.word	0x00001111

08003108 <HAL_TIM_PWM_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b084      	sub	sp, #16
 800310c:	af00      	add	r7, sp, #0
 800310e:	60f8      	str	r0, [r7, #12]
 8003110:	60b9      	str	r1, [r7, #8]
 8003112:	607a      	str	r2, [r7, #4]
  __HAL_LOCK(htim);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2234      	movs	r2, #52	; 0x34
 8003118:	5c9b      	ldrb	r3, [r3, r2]
 800311a:	2b01      	cmp	r3, #1
 800311c:	d101      	bne.n	8003122 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800311e:	2302      	movs	r3, #2
 8003120:	e0a4      	b.n	800326c <HAL_TIM_PWM_ConfigChannel+0x164>
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2234      	movs	r2, #52	; 0x34
 8003126:	2101      	movs	r1, #1
 8003128:	5499      	strb	r1, [r3, r2]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
  
  htim->State = HAL_TIM_STATE_BUSY;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2235      	movs	r2, #53	; 0x35
 800312e:	2102      	movs	r1, #2
 8003130:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2b04      	cmp	r3, #4
 8003136:	d029      	beq.n	800318c <HAL_TIM_PWM_ConfigChannel+0x84>
 8003138:	d802      	bhi.n	8003140 <HAL_TIM_PWM_ConfigChannel+0x38>
 800313a:	2b00      	cmp	r3, #0
 800313c:	d005      	beq.n	800314a <HAL_TIM_PWM_ConfigChannel+0x42>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
    }
    break;

    default:
    break;
 800313e:	e08c      	b.n	800325a <HAL_TIM_PWM_ConfigChannel+0x152>
  switch (Channel)
 8003140:	2b08      	cmp	r3, #8
 8003142:	d046      	beq.n	80031d2 <HAL_TIM_PWM_ConfigChannel+0xca>
 8003144:	2b0c      	cmp	r3, #12
 8003146:	d065      	beq.n	8003214 <HAL_TIM_PWM_ConfigChannel+0x10c>
    break;
 8003148:	e087      	b.n	800325a <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	68ba      	ldr	r2, [r7, #8]
 8003150:	0011      	movs	r1, r2
 8003152:	0018      	movs	r0, r3
 8003154:	f000 f890 	bl	8003278 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	68fa      	ldr	r2, [r7, #12]
 800315e:	6812      	ldr	r2, [r2, #0]
 8003160:	6992      	ldr	r2, [r2, #24]
 8003162:	2108      	movs	r1, #8
 8003164:	430a      	orrs	r2, r1
 8003166:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	68fa      	ldr	r2, [r7, #12]
 800316e:	6812      	ldr	r2, [r2, #0]
 8003170:	6992      	ldr	r2, [r2, #24]
 8003172:	2104      	movs	r1, #4
 8003174:	438a      	bics	r2, r1
 8003176:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	68fa      	ldr	r2, [r7, #12]
 800317e:	6812      	ldr	r2, [r2, #0]
 8003180:	6991      	ldr	r1, [r2, #24]
 8003182:	68ba      	ldr	r2, [r7, #8]
 8003184:	68d2      	ldr	r2, [r2, #12]
 8003186:	430a      	orrs	r2, r1
 8003188:	619a      	str	r2, [r3, #24]
    break;
 800318a:	e066      	b.n	800325a <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	68ba      	ldr	r2, [r7, #8]
 8003192:	0011      	movs	r1, r2
 8003194:	0018      	movs	r0, r3
 8003196:	f000 f8b1 	bl	80032fc <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	68fa      	ldr	r2, [r7, #12]
 80031a0:	6812      	ldr	r2, [r2, #0]
 80031a2:	6992      	ldr	r2, [r2, #24]
 80031a4:	2180      	movs	r1, #128	; 0x80
 80031a6:	0109      	lsls	r1, r1, #4
 80031a8:	430a      	orrs	r2, r1
 80031aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	68fa      	ldr	r2, [r7, #12]
 80031b2:	6812      	ldr	r2, [r2, #0]
 80031b4:	6992      	ldr	r2, [r2, #24]
 80031b6:	492f      	ldr	r1, [pc, #188]	; (8003274 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 80031b8:	400a      	ands	r2, r1
 80031ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	68fa      	ldr	r2, [r7, #12]
 80031c2:	6812      	ldr	r2, [r2, #0]
 80031c4:	6991      	ldr	r1, [r2, #24]
 80031c6:	68ba      	ldr	r2, [r7, #8]
 80031c8:	68d2      	ldr	r2, [r2, #12]
 80031ca:	0212      	lsls	r2, r2, #8
 80031cc:	430a      	orrs	r2, r1
 80031ce:	619a      	str	r2, [r3, #24]
    break;
 80031d0:	e043      	b.n	800325a <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	68ba      	ldr	r2, [r7, #8]
 80031d8:	0011      	movs	r1, r2
 80031da:	0018      	movs	r0, r3
 80031dc:	f000 f8d6 	bl	800338c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	68fa      	ldr	r2, [r7, #12]
 80031e6:	6812      	ldr	r2, [r2, #0]
 80031e8:	69d2      	ldr	r2, [r2, #28]
 80031ea:	2108      	movs	r1, #8
 80031ec:	430a      	orrs	r2, r1
 80031ee:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	68fa      	ldr	r2, [r7, #12]
 80031f6:	6812      	ldr	r2, [r2, #0]
 80031f8:	69d2      	ldr	r2, [r2, #28]
 80031fa:	2104      	movs	r1, #4
 80031fc:	438a      	bics	r2, r1
 80031fe:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	68fa      	ldr	r2, [r7, #12]
 8003206:	6812      	ldr	r2, [r2, #0]
 8003208:	69d1      	ldr	r1, [r2, #28]
 800320a:	68ba      	ldr	r2, [r7, #8]
 800320c:	68d2      	ldr	r2, [r2, #12]
 800320e:	430a      	orrs	r2, r1
 8003210:	61da      	str	r2, [r3, #28]
    break;
 8003212:	e022      	b.n	800325a <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	68ba      	ldr	r2, [r7, #8]
 800321a:	0011      	movs	r1, r2
 800321c:	0018      	movs	r0, r3
 800321e:	f000 f8fb 	bl	8003418 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	68fa      	ldr	r2, [r7, #12]
 8003228:	6812      	ldr	r2, [r2, #0]
 800322a:	69d2      	ldr	r2, [r2, #28]
 800322c:	2180      	movs	r1, #128	; 0x80
 800322e:	0109      	lsls	r1, r1, #4
 8003230:	430a      	orrs	r2, r1
 8003232:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	68fa      	ldr	r2, [r7, #12]
 800323a:	6812      	ldr	r2, [r2, #0]
 800323c:	69d2      	ldr	r2, [r2, #28]
 800323e:	490d      	ldr	r1, [pc, #52]	; (8003274 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 8003240:	400a      	ands	r2, r1
 8003242:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	68fa      	ldr	r2, [r7, #12]
 800324a:	6812      	ldr	r2, [r2, #0]
 800324c:	69d1      	ldr	r1, [r2, #28]
 800324e:	68ba      	ldr	r2, [r7, #8]
 8003250:	68d2      	ldr	r2, [r2, #12]
 8003252:	0212      	lsls	r2, r2, #8
 8003254:	430a      	orrs	r2, r1
 8003256:	61da      	str	r2, [r3, #28]
    break;
 8003258:	46c0      	nop			; (mov r8, r8)
  }
  
  htim->State = HAL_TIM_STATE_READY;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2235      	movs	r2, #53	; 0x35
 800325e:	2101      	movs	r1, #1
 8003260:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2234      	movs	r2, #52	; 0x34
 8003266:	2100      	movs	r1, #0
 8003268:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800326a:	2300      	movs	r3, #0
}
 800326c:	0018      	movs	r0, r3
 800326e:	46bd      	mov	sp, r7
 8003270:	b004      	add	sp, #16
 8003272:	bd80      	pop	{r7, pc}
 8003274:	fffffbff 	.word	0xfffffbff

08003278 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b086      	sub	sp, #24
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
 8003280:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8003282:	2300      	movs	r3, #0
 8003284:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8003286:	2300      	movs	r3, #0
 8003288:	613b      	str	r3, [r7, #16]
  uint32_t tmpcr2 = 0U;  
 800328a:	2300      	movs	r3, #0
 800328c:	60fb      	str	r3, [r7, #12]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6a1b      	ldr	r3, [r3, #32]
 8003292:	2201      	movs	r2, #1
 8003294:	4393      	bics	r3, r2
 8003296:	001a      	movs	r2, r3
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6a1b      	ldr	r3, [r3, #32]
 80032a0:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	60fb      	str	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	699b      	ldr	r3, [r3, #24]
 80032ac:	617b      	str	r3, [r7, #20]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	2270      	movs	r2, #112	; 0x70
 80032b2:	4393      	bics	r3, r2
 80032b4:	617b      	str	r3, [r7, #20]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	2203      	movs	r2, #3
 80032ba:	4393      	bics	r3, r2
 80032bc:	617b      	str	r3, [r7, #20]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	697a      	ldr	r2, [r7, #20]
 80032c4:	4313      	orrs	r3, r2
 80032c6:	617b      	str	r3, [r7, #20]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	2202      	movs	r2, #2
 80032cc:	4393      	bics	r3, r2
 80032ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	693a      	ldr	r2, [r7, #16]
 80032d6:	4313      	orrs	r3, r2
 80032d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	68fa      	ldr	r2, [r7, #12]
 80032de:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	697a      	ldr	r2, [r7, #20]
 80032e4:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	685a      	ldr	r2, [r3, #4]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	693a      	ldr	r2, [r7, #16]
 80032f2:	621a      	str	r2, [r3, #32]
} 
 80032f4:	46c0      	nop			; (mov r8, r8)
 80032f6:	46bd      	mov	sp, r7
 80032f8:	b006      	add	sp, #24
 80032fa:	bd80      	pop	{r7, pc}

080032fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The ouput configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b086      	sub	sp, #24
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
 8003304:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8003306:	2300      	movs	r3, #0
 8003308:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 800330a:	2300      	movs	r3, #0
 800330c:	613b      	str	r3, [r7, #16]
  uint32_t tmpcr2 = 0U;
 800330e:	2300      	movs	r3, #0
 8003310:	60fb      	str	r3, [r7, #12]
   
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6a1b      	ldr	r3, [r3, #32]
 8003316:	2210      	movs	r2, #16
 8003318:	4393      	bics	r3, r2
 800331a:	001a      	movs	r2, r3
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6a1b      	ldr	r3, [r3, #32]
 8003324:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	60fb      	str	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	699b      	ldr	r3, [r3, #24]
 8003330:	617b      	str	r3, [r7, #20]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	4a13      	ldr	r2, [pc, #76]	; (8003384 <TIM_OC2_SetConfig+0x88>)
 8003336:	4013      	ands	r3, r2
 8003338:	617b      	str	r3, [r7, #20]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	4a12      	ldr	r2, [pc, #72]	; (8003388 <TIM_OC2_SetConfig+0x8c>)
 800333e:	4013      	ands	r3, r2
 8003340:	617b      	str	r3, [r7, #20]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	021b      	lsls	r3, r3, #8
 8003348:	697a      	ldr	r2, [r7, #20]
 800334a:	4313      	orrs	r3, r2
 800334c:	617b      	str	r3, [r7, #20]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	2220      	movs	r2, #32
 8003352:	4393      	bics	r3, r2
 8003354:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	011b      	lsls	r3, r3, #4
 800335c:	693a      	ldr	r2, [r7, #16]
 800335e:	4313      	orrs	r3, r2
 8003360:	613b      	str	r3, [r7, #16]
    
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	68fa      	ldr	r2, [r7, #12]
 8003366:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	697a      	ldr	r2, [r7, #20]
 800336c:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	685a      	ldr	r2, [r3, #4]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	693a      	ldr	r2, [r7, #16]
 800337a:	621a      	str	r2, [r3, #32]
}
 800337c:	46c0      	nop			; (mov r8, r8)
 800337e:	46bd      	mov	sp, r7
 8003380:	b006      	add	sp, #24
 8003382:	bd80      	pop	{r7, pc}
 8003384:	ffff8fff 	.word	0xffff8fff
 8003388:	fffffcff 	.word	0xfffffcff

0800338c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b086      	sub	sp, #24
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
 8003394:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8003396:	2300      	movs	r3, #0
 8003398:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 800339a:	2300      	movs	r3, #0
 800339c:	613b      	str	r3, [r7, #16]
  uint32_t tmpcr2 = 0U;   
 800339e:	2300      	movs	r3, #0
 80033a0:	60fb      	str	r3, [r7, #12]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6a1b      	ldr	r3, [r3, #32]
 80033a6:	4a1a      	ldr	r2, [pc, #104]	; (8003410 <TIM_OC3_SetConfig+0x84>)
 80033a8:	401a      	ands	r2, r3
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6a1b      	ldr	r3, [r3, #32]
 80033b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	60fb      	str	r3, [r7, #12]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	69db      	ldr	r3, [r3, #28]
 80033be:	617b      	str	r3, [r7, #20]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	2270      	movs	r2, #112	; 0x70
 80033c4:	4393      	bics	r3, r2
 80033c6:	617b      	str	r3, [r7, #20]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	2203      	movs	r2, #3
 80033cc:	4393      	bics	r3, r2
 80033ce:	617b      	str	r3, [r7, #20]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	697a      	ldr	r2, [r7, #20]
 80033d6:	4313      	orrs	r3, r2
 80033d8:	617b      	str	r3, [r7, #20]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	4a0d      	ldr	r2, [pc, #52]	; (8003414 <TIM_OC3_SetConfig+0x88>)
 80033de:	4013      	ands	r3, r2
 80033e0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	021b      	lsls	r3, r3, #8
 80033e8:	693a      	ldr	r2, [r7, #16]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	613b      	str	r3, [r7, #16]
    
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	68fa      	ldr	r2, [r7, #12]
 80033f2:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	697a      	ldr	r2, [r7, #20]
 80033f8:	61da      	str	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	685a      	ldr	r2, [r3, #4]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	693a      	ldr	r2, [r7, #16]
 8003406:	621a      	str	r2, [r3, #32]
}
 8003408:	46c0      	nop			; (mov r8, r8)
 800340a:	46bd      	mov	sp, r7
 800340c:	b006      	add	sp, #24
 800340e:	bd80      	pop	{r7, pc}
 8003410:	fffffeff 	.word	0xfffffeff
 8003414:	fffffdff 	.word	0xfffffdff

08003418 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b086      	sub	sp, #24
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8003422:	2300      	movs	r3, #0
 8003424:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8003426:	2300      	movs	r3, #0
 8003428:	613b      	str	r3, [r7, #16]
  uint32_t tmpcr2 = 0U;
 800342a:	2300      	movs	r3, #0
 800342c:	60fb      	str	r3, [r7, #12]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6a1b      	ldr	r3, [r3, #32]
 8003432:	4a1b      	ldr	r2, [pc, #108]	; (80034a0 <TIM_OC4_SetConfig+0x88>)
 8003434:	401a      	ands	r2, r3
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6a1b      	ldr	r3, [r3, #32]
 800343e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	60fb      	str	r3, [r7, #12]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	69db      	ldr	r3, [r3, #28]
 800344a:	617b      	str	r3, [r7, #20]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	4a15      	ldr	r2, [pc, #84]	; (80034a4 <TIM_OC4_SetConfig+0x8c>)
 8003450:	4013      	ands	r3, r2
 8003452:	617b      	str	r3, [r7, #20]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	4a14      	ldr	r2, [pc, #80]	; (80034a8 <TIM_OC4_SetConfig+0x90>)
 8003458:	4013      	ands	r3, r2
 800345a:	617b      	str	r3, [r7, #20]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	021b      	lsls	r3, r3, #8
 8003462:	697a      	ldr	r2, [r7, #20]
 8003464:	4313      	orrs	r3, r2
 8003466:	617b      	str	r3, [r7, #20]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	4a10      	ldr	r2, [pc, #64]	; (80034ac <TIM_OC4_SetConfig+0x94>)
 800346c:	4013      	ands	r3, r2
 800346e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	031b      	lsls	r3, r3, #12
 8003476:	693a      	ldr	r2, [r7, #16]
 8003478:	4313      	orrs	r3, r2
 800347a:	613b      	str	r3, [r7, #16]
   
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	68fa      	ldr	r2, [r7, #12]
 8003480:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	697a      	ldr	r2, [r7, #20]
 8003486:	61da      	str	r2, [r3, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	685a      	ldr	r2, [r3, #4]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	693a      	ldr	r2, [r7, #16]
 8003494:	621a      	str	r2, [r3, #32]
}
 8003496:	46c0      	nop			; (mov r8, r8)
 8003498:	46bd      	mov	sp, r7
 800349a:	b006      	add	sp, #24
 800349c:	bd80      	pop	{r7, pc}
 800349e:	46c0      	nop			; (mov r8, r8)
 80034a0:	ffffefff 	.word	0xffffefff
 80034a4:	ffff8fff 	.word	0xffff8fff
 80034a8:	fffffcff 	.word	0xfffffcff
 80034ac:	ffffdfff 	.word	0xffffdfff

080034b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState: specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable. 
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b086      	sub	sp, #24
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	60f8      	str	r0, [r7, #12]
 80034b8:	60b9      	str	r1, [r7, #8]
 80034ba:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 80034bc:	2300      	movs	r3, #0
 80034be:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(TIMx,Channel));

  tmp = TIM_CCER_CC1E << Channel;
 80034c0:	2201      	movs	r2, #1
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	409a      	lsls	r2, r3
 80034c6:	0013      	movs	r3, r2
 80034c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	6a1b      	ldr	r3, [r3, #32]
 80034ce:	697a      	ldr	r2, [r7, #20]
 80034d0:	43d2      	mvns	r2, r2
 80034d2:	401a      	ands	r2, r3
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	6a1a      	ldr	r2, [r3, #32]
 80034dc:	6879      	ldr	r1, [r7, #4]
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	4099      	lsls	r1, r3
 80034e2:	000b      	movs	r3, r1
 80034e4:	431a      	orrs	r2, r3
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	621a      	str	r2, [r3, #32]
}
 80034ea:	46c0      	nop			; (mov r8, r8)
 80034ec:	46bd      	mov	sp, r7
 80034ee:	b006      	add	sp, #24
 80034f0:	bd80      	pop	{r7, pc}
	...

080034f4 <TSL_tim_ProcessIT>:
  * @brief  Management of the timing module interrupt service routine.
  * @param  None
  * @retval None
  */
void TSL_tim_ProcessIT(void)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	af00      	add	r7, sp, #0
  static TSL_tTick_ms_T count_1s = 0;

  // Count 1 global tick every xxx ms (defined by TSLPRM_TICK_FREQ parameter)
  TSL_Globals.Tick_ms++;
 80034f8:	4b11      	ldr	r3, [pc, #68]	; (8003540 <TSL_tim_ProcessIT+0x4c>)
 80034fa:	881b      	ldrh	r3, [r3, #0]
 80034fc:	3301      	adds	r3, #1
 80034fe:	b29a      	uxth	r2, r3
 8003500:	4b0f      	ldr	r3, [pc, #60]	; (8003540 <TSL_tim_ProcessIT+0x4c>)
 8003502:	801a      	strh	r2, [r3, #0]

  // Check if 1 second has elapsed
  count_1s++;
 8003504:	4b0f      	ldr	r3, [pc, #60]	; (8003544 <TSL_tim_ProcessIT+0x50>)
 8003506:	881b      	ldrh	r3, [r3, #0]
 8003508:	3301      	adds	r3, #1
 800350a:	b29a      	uxth	r2, r3
 800350c:	4b0d      	ldr	r3, [pc, #52]	; (8003544 <TSL_tim_ProcessIT+0x50>)
 800350e:	801a      	strh	r2, [r3, #0]
  if (count_1s > (TSLPRM_TICK_FREQ - 1))
 8003510:	4b0c      	ldr	r3, [pc, #48]	; (8003544 <TSL_tim_ProcessIT+0x50>)
 8003512:	881b      	ldrh	r3, [r3, #0]
 8003514:	4a0c      	ldr	r2, [pc, #48]	; (8003548 <TSL_tim_ProcessIT+0x54>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d90f      	bls.n	800353a <TSL_tim_ProcessIT+0x46>
  {
    TSL_Globals.Tick_sec++; // 1 global tick every second
 800351a:	4b09      	ldr	r3, [pc, #36]	; (8003540 <TSL_tim_ProcessIT+0x4c>)
 800351c:	789b      	ldrb	r3, [r3, #2]
 800351e:	3301      	adds	r3, #1
 8003520:	b2da      	uxtb	r2, r3
 8003522:	4b07      	ldr	r3, [pc, #28]	; (8003540 <TSL_tim_ProcessIT+0x4c>)
 8003524:	709a      	strb	r2, [r3, #2]
    if (TSL_Globals.Tick_sec > 63)  // Due to DTO counter on 6 bits...
 8003526:	4b06      	ldr	r3, [pc, #24]	; (8003540 <TSL_tim_ProcessIT+0x4c>)
 8003528:	789b      	ldrb	r3, [r3, #2]
 800352a:	2b3f      	cmp	r3, #63	; 0x3f
 800352c:	d902      	bls.n	8003534 <TSL_tim_ProcessIT+0x40>
    {
      TSL_Globals.Tick_sec = 0;
 800352e:	4b04      	ldr	r3, [pc, #16]	; (8003540 <TSL_tim_ProcessIT+0x4c>)
 8003530:	2200      	movs	r2, #0
 8003532:	709a      	strb	r2, [r3, #2]
    }
    count_1s = 0;
 8003534:	4b03      	ldr	r3, [pc, #12]	; (8003544 <TSL_tim_ProcessIT+0x50>)
 8003536:	2200      	movs	r2, #0
 8003538:	801a      	strh	r2, [r3, #0]
  }
}
 800353a:	46c0      	nop			; (mov r8, r8)
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}
 8003540:	2000045c 	.word	0x2000045c
 8003544:	20000024 	.word	0x20000024
 8003548:	000003e7 	.word	0x000003e7

0800354c <led_start>:
	 HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
}


void led_start()
{
 800354c:	b580      	push	{r7, lr}
 800354e:	af00      	add	r7, sp, #0
	led_stop();
 8003550:	f000 f832 	bl	80035b8 <led_stop>
	if(eColor==eRed||eColor==eOrange)
 8003554:	4b15      	ldr	r3, [pc, #84]	; (80035ac <led_start+0x60>)
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	2b01      	cmp	r3, #1
 800355a:	d003      	beq.n	8003564 <led_start+0x18>
 800355c:	4b13      	ldr	r3, [pc, #76]	; (80035ac <led_start+0x60>)
 800355e:	781b      	ldrb	r3, [r3, #0]
 8003560:	2b02      	cmp	r3, #2
 8003562:	d10b      	bne.n	800357c <led_start+0x30>
	{
		if(HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1) != HAL_OK)
 8003564:	4b12      	ldr	r3, [pc, #72]	; (80035b0 <led_start+0x64>)
 8003566:	2100      	movs	r1, #0
 8003568:	0018      	movs	r0, r3
 800356a:	f7ff fd8e 	bl	800308a <HAL_TIM_PWM_Start>
 800356e:	1e03      	subs	r3, r0, #0
 8003570:	d004      	beq.n	800357c <led_start+0x30>
		{
		  /* Starting Error */
			_Error_Handler(__FILE__, __LINE__);
 8003572:	4b10      	ldr	r3, [pc, #64]	; (80035b4 <led_start+0x68>)
 8003574:	2174      	movs	r1, #116	; 0x74
 8003576:	0018      	movs	r0, r3
 8003578:	f000 fa52 	bl	8003a20 <_Error_Handler>
		}
	}

	if(eColor==eGreen||eColor==eOrange)
 800357c:	4b0b      	ldr	r3, [pc, #44]	; (80035ac <led_start+0x60>)
 800357e:	781b      	ldrb	r3, [r3, #0]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d003      	beq.n	800358c <led_start+0x40>
 8003584:	4b09      	ldr	r3, [pc, #36]	; (80035ac <led_start+0x60>)
 8003586:	781b      	ldrb	r3, [r3, #0]
 8003588:	2b02      	cmp	r3, #2
 800358a:	d10b      	bne.n	80035a4 <led_start+0x58>
	{
		if(HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2) != HAL_OK)
 800358c:	4b08      	ldr	r3, [pc, #32]	; (80035b0 <led_start+0x64>)
 800358e:	2104      	movs	r1, #4
 8003590:	0018      	movs	r0, r3
 8003592:	f7ff fd7a 	bl	800308a <HAL_TIM_PWM_Start>
 8003596:	1e03      	subs	r3, r0, #0
 8003598:	d004      	beq.n	80035a4 <led_start+0x58>
		{
		  /* Starting Error */
		_Error_Handler(__FILE__, __LINE__);
 800359a:	4b06      	ldr	r3, [pc, #24]	; (80035b4 <led_start+0x68>)
 800359c:	217d      	movs	r1, #125	; 0x7d
 800359e:	0018      	movs	r0, r3
 80035a0:	f000 fa3e 	bl	8003a20 <_Error_Handler>
		}
	}
}
 80035a4:	46c0      	nop			; (mov r8, r8)
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	46c0      	nop			; (mov r8, r8)
 80035ac:	20000061 	.word	0x20000061
 80035b0:	20000028 	.word	0x20000028
 80035b4:	08004180 	.word	0x08004180

080035b8 <led_stop>:

void led_stop()
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	af00      	add	r7, sp, #0
	if(HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1) != HAL_OK)
 80035bc:	4b0d      	ldr	r3, [pc, #52]	; (80035f4 <led_stop+0x3c>)
 80035be:	2100      	movs	r1, #0
 80035c0:	0018      	movs	r0, r3
 80035c2:	f7ff fd7b 	bl	80030bc <HAL_TIM_PWM_Stop>
 80035c6:	1e03      	subs	r3, r0, #0
 80035c8:	d004      	beq.n	80035d4 <led_stop+0x1c>
	{
	  /* Starting Error */
		_Error_Handler(__FILE__, __LINE__);
 80035ca:	4b0b      	ldr	r3, [pc, #44]	; (80035f8 <led_stop+0x40>)
 80035cc:	2187      	movs	r1, #135	; 0x87
 80035ce:	0018      	movs	r0, r3
 80035d0:	f000 fa26 	bl	8003a20 <_Error_Handler>
	}

	if(HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2) != HAL_OK)
 80035d4:	4b07      	ldr	r3, [pc, #28]	; (80035f4 <led_stop+0x3c>)
 80035d6:	2104      	movs	r1, #4
 80035d8:	0018      	movs	r0, r3
 80035da:	f7ff fd6f 	bl	80030bc <HAL_TIM_PWM_Stop>
 80035de:	1e03      	subs	r3, r0, #0
 80035e0:	d004      	beq.n	80035ec <led_stop+0x34>
	{
	  /* Starting Error */
	_Error_Handler(__FILE__, __LINE__);
 80035e2:	4b05      	ldr	r3, [pc, #20]	; (80035f8 <led_stop+0x40>)
 80035e4:	218d      	movs	r1, #141	; 0x8d
 80035e6:	0018      	movs	r0, r3
 80035e8:	f000 fa1a 	bl	8003a20 <_Error_Handler>
	}
}
 80035ec:	46c0      	nop			; (mov r8, r8)
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	46c0      	nop			; (mov r8, r8)
 80035f4:	20000028 	.word	0x20000028
 80035f8:	08004180 	.word	0x08004180

080035fc <led_change_color>:

void led_change_color(uint8_t red_percent, uint8_t green_percent)
{
 80035fc:	b590      	push	{r4, r7, lr}
 80035fe:	b089      	sub	sp, #36	; 0x24
 8003600:	af00      	add	r7, sp, #0
 8003602:	0002      	movs	r2, r0
 8003604:	1dfb      	adds	r3, r7, #7
 8003606:	701a      	strb	r2, [r3, #0]
 8003608:	1dbb      	adds	r3, r7, #6
 800360a:	1c0a      	adds	r2, r1, #0
 800360c:	701a      	strb	r2, [r3, #0]
	TIM_OC_InitTypeDef sConfigOC;

	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800360e:	230c      	movs	r3, #12
 8003610:	18fb      	adds	r3, r7, r3
 8003612:	2260      	movs	r2, #96	; 0x60
 8003614:	601a      	str	r2, [r3, #0]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003616:	230c      	movs	r3, #12
 8003618:	18fb      	adds	r3, r7, r3
 800361a:	2200      	movs	r2, #0
 800361c:	609a      	str	r2, [r3, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800361e:	230c      	movs	r3, #12
 8003620:	18fb      	adds	r3, r7, r3
 8003622:	2200      	movs	r2, #0
 8003624:	60da      	str	r2, [r3, #12]

	float period = PERIOD;
 8003626:	4b36      	ldr	r3, [pc, #216]	; (8003700 <led_change_color+0x104>)
 8003628:	61fb      	str	r3, [r7, #28]

	if(eColor==eRed||eColor==eOrange)
 800362a:	4b36      	ldr	r3, [pc, #216]	; (8003704 <led_change_color+0x108>)
 800362c:	781b      	ldrb	r3, [r3, #0]
 800362e:	2b01      	cmp	r3, #1
 8003630:	d003      	beq.n	800363a <led_change_color+0x3e>
 8003632:	4b34      	ldr	r3, [pc, #208]	; (8003704 <led_change_color+0x108>)
 8003634:	781b      	ldrb	r3, [r3, #0]
 8003636:	2b02      	cmp	r3, #2
 8003638:	d129      	bne.n	800368e <led_change_color+0x92>
	{
		// LED RED
		sConfigOC.Pulse = (period * (float) red_percent) / 100.0;
 800363a:	1dfb      	adds	r3, r7, #7
 800363c:	781b      	ldrb	r3, [r3, #0]
 800363e:	0018      	movs	r0, r3
 8003640:	f7fc ff2c 	bl	800049c <__aeabi_ui2f>
 8003644:	1c03      	adds	r3, r0, #0
 8003646:	69f9      	ldr	r1, [r7, #28]
 8003648:	1c18      	adds	r0, r3, #0
 800364a:	f7fc fe07 	bl	800025c <__aeabi_fmul>
 800364e:	1c03      	adds	r3, r0, #0
 8003650:	1c18      	adds	r0, r3, #0
 8003652:	f7fd fde7 	bl	8001224 <__aeabi_f2d>
 8003656:	2200      	movs	r2, #0
 8003658:	4b2b      	ldr	r3, [pc, #172]	; (8003708 <led_change_color+0x10c>)
 800365a:	f7fc ff65 	bl	8000528 <__aeabi_ddiv>
 800365e:	0003      	movs	r3, r0
 8003660:	000c      	movs	r4, r1
 8003662:	0018      	movs	r0, r3
 8003664:	0021      	movs	r1, r4
 8003666:	f7fc fddb 	bl	8000220 <__aeabi_d2uiz>
 800366a:	0002      	movs	r2, r0
 800366c:	230c      	movs	r3, #12
 800366e:	18fb      	adds	r3, r7, r3
 8003670:	605a      	str	r2, [r3, #4]
		if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003672:	230c      	movs	r3, #12
 8003674:	18f9      	adds	r1, r7, r3
 8003676:	4b25      	ldr	r3, [pc, #148]	; (800370c <led_change_color+0x110>)
 8003678:	2200      	movs	r2, #0
 800367a:	0018      	movs	r0, r3
 800367c:	f7ff fd44 	bl	8003108 <HAL_TIM_PWM_ConfigChannel>
 8003680:	1e03      	subs	r3, r0, #0
 8003682:	d004      	beq.n	800368e <led_change_color+0x92>
		{
			_Error_Handler(__FILE__, __LINE__);
 8003684:	4b22      	ldr	r3, [pc, #136]	; (8003710 <led_change_color+0x114>)
 8003686:	21a1      	movs	r1, #161	; 0xa1
 8003688:	0018      	movs	r0, r3
 800368a:	f000 f9c9 	bl	8003a20 <_Error_Handler>
		}
	}

	if(eColor==eGreen||eColor==eOrange)
 800368e:	4b1d      	ldr	r3, [pc, #116]	; (8003704 <led_change_color+0x108>)
 8003690:	781b      	ldrb	r3, [r3, #0]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d003      	beq.n	800369e <led_change_color+0xa2>
 8003696:	4b1b      	ldr	r3, [pc, #108]	; (8003704 <led_change_color+0x108>)
 8003698:	781b      	ldrb	r3, [r3, #0]
 800369a:	2b02      	cmp	r3, #2
 800369c:	d129      	bne.n	80036f2 <led_change_color+0xf6>
	{
		// LED GREEN
		sConfigOC.Pulse = (period * (float) green_percent) / 100.0;
 800369e:	1dbb      	adds	r3, r7, #6
 80036a0:	781b      	ldrb	r3, [r3, #0]
 80036a2:	0018      	movs	r0, r3
 80036a4:	f7fc fefa 	bl	800049c <__aeabi_ui2f>
 80036a8:	1c03      	adds	r3, r0, #0
 80036aa:	69f9      	ldr	r1, [r7, #28]
 80036ac:	1c18      	adds	r0, r3, #0
 80036ae:	f7fc fdd5 	bl	800025c <__aeabi_fmul>
 80036b2:	1c03      	adds	r3, r0, #0
 80036b4:	1c18      	adds	r0, r3, #0
 80036b6:	f7fd fdb5 	bl	8001224 <__aeabi_f2d>
 80036ba:	2200      	movs	r2, #0
 80036bc:	4b12      	ldr	r3, [pc, #72]	; (8003708 <led_change_color+0x10c>)
 80036be:	f7fc ff33 	bl	8000528 <__aeabi_ddiv>
 80036c2:	0003      	movs	r3, r0
 80036c4:	000c      	movs	r4, r1
 80036c6:	0018      	movs	r0, r3
 80036c8:	0021      	movs	r1, r4
 80036ca:	f7fc fda9 	bl	8000220 <__aeabi_d2uiz>
 80036ce:	0002      	movs	r2, r0
 80036d0:	230c      	movs	r3, #12
 80036d2:	18fb      	adds	r3, r7, r3
 80036d4:	605a      	str	r2, [r3, #4]
		if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80036d6:	230c      	movs	r3, #12
 80036d8:	18f9      	adds	r1, r7, r3
 80036da:	4b0c      	ldr	r3, [pc, #48]	; (800370c <led_change_color+0x110>)
 80036dc:	2204      	movs	r2, #4
 80036de:	0018      	movs	r0, r3
 80036e0:	f7ff fd12 	bl	8003108 <HAL_TIM_PWM_ConfigChannel>
 80036e4:	1e03      	subs	r3, r0, #0
 80036e6:	d004      	beq.n	80036f2 <led_change_color+0xf6>
		{
			_Error_Handler(__FILE__, __LINE__);
 80036e8:	4b09      	ldr	r3, [pc, #36]	; (8003710 <led_change_color+0x114>)
 80036ea:	21ab      	movs	r1, #171	; 0xab
 80036ec:	0018      	movs	r0, r3
 80036ee:	f000 f997 	bl	8003a20 <_Error_Handler>
		}
	}

	led_start();
 80036f2:	f7ff ff2b 	bl	800354c <led_start>
}
 80036f6:	46c0      	nop			; (mov r8, r8)
 80036f8:	46bd      	mov	sp, r7
 80036fa:	b009      	add	sp, #36	; 0x24
 80036fc:	bd90      	pop	{r4, r7, pc}
 80036fe:	46c0      	nop			; (mov r8, r8)
 8003700:	46f9fe00 	.word	0x46f9fe00
 8003704:	20000061 	.word	0x20000061
 8003708:	40590000 	.word	0x40590000
 800370c:	20000028 	.word	0x20000028
 8003710:	08004180 	.word	0x08004180

08003714 <LED_ProcessIT>:
	led_stop();
}

// will be called every 1 ms
void LED_ProcessIT(void)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	af00      	add	r7, sp, #0
	static int i=0;
	static int cnt=0;
	static char flag_10ms;
	static char direction=1;

	if(led_active && eType == eFlash)
 8003718:	4b42      	ldr	r3, [pc, #264]	; (8003824 <LED_ProcessIT+0x110>)
 800371a:	781b      	ldrb	r3, [r3, #0]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d100      	bne.n	8003722 <LED_ProcessIT+0xe>
 8003720:	e06f      	b.n	8003802 <LED_ProcessIT+0xee>
 8003722:	4b41      	ldr	r3, [pc, #260]	; (8003828 <LED_ProcessIT+0x114>)
 8003724:	781b      	ldrb	r3, [r3, #0]
 8003726:	2b01      	cmp	r3, #1
 8003728:	d000      	beq.n	800372c <LED_ProcessIT+0x18>
 800372a:	e06a      	b.n	8003802 <LED_ProcessIT+0xee>
	{
		cnt++;
 800372c:	4b3f      	ldr	r3, [pc, #252]	; (800382c <LED_ProcessIT+0x118>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	1c5a      	adds	r2, r3, #1
 8003732:	4b3e      	ldr	r3, [pc, #248]	; (800382c <LED_ProcessIT+0x118>)
 8003734:	601a      	str	r2, [r3, #0]
		if(cnt>=15) // changed to 15ms flags
 8003736:	4b3d      	ldr	r3, [pc, #244]	; (800382c <LED_ProcessIT+0x118>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	2b0e      	cmp	r3, #14
 800373c:	dd06      	ble.n	800374c <LED_ProcessIT+0x38>
		{
			flag_10ms = 1;
 800373e:	4b3c      	ldr	r3, [pc, #240]	; (8003830 <LED_ProcessIT+0x11c>)
 8003740:	2201      	movs	r2, #1
 8003742:	701a      	strb	r2, [r3, #0]
			cnt = 0;
 8003744:	4b39      	ldr	r3, [pc, #228]	; (800382c <LED_ProcessIT+0x118>)
 8003746:	2200      	movs	r2, #0
 8003748:	601a      	str	r2, [r3, #0]
 800374a:	e002      	b.n	8003752 <LED_ProcessIT+0x3e>
		}
		else
		{
			flag_10ms = 0;
 800374c:	4b38      	ldr	r3, [pc, #224]	; (8003830 <LED_ProcessIT+0x11c>)
 800374e:	2200      	movs	r2, #0
 8003750:	701a      	strb	r2, [r3, #0]
		}

		if(flag_10ms && led_active)
 8003752:	4b37      	ldr	r3, [pc, #220]	; (8003830 <LED_ProcessIT+0x11c>)
 8003754:	781b      	ldrb	r3, [r3, #0]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d060      	beq.n	800381c <LED_ProcessIT+0x108>
 800375a:	4b32      	ldr	r3, [pc, #200]	; (8003824 <LED_ProcessIT+0x110>)
 800375c:	781b      	ldrb	r3, [r3, #0]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d05c      	beq.n	800381c <LED_ProcessIT+0x108>
		{
			if(direction==1)
 8003762:	4b34      	ldr	r3, [pc, #208]	; (8003834 <LED_ProcessIT+0x120>)
 8003764:	781b      	ldrb	r3, [r3, #0]
 8003766:	2b01      	cmp	r3, #1
 8003768:	d112      	bne.n	8003790 <LED_ProcessIT+0x7c>
			{
				if(i<100) i++;
 800376a:	4b33      	ldr	r3, [pc, #204]	; (8003838 <LED_ProcessIT+0x124>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	2b63      	cmp	r3, #99	; 0x63
 8003770:	dc05      	bgt.n	800377e <LED_ProcessIT+0x6a>
 8003772:	4b31      	ldr	r3, [pc, #196]	; (8003838 <LED_ProcessIT+0x124>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	1c5a      	adds	r2, r3, #1
 8003778:	4b2f      	ldr	r3, [pc, #188]	; (8003838 <LED_ProcessIT+0x124>)
 800377a:	601a      	str	r2, [r3, #0]
 800377c:	e01a      	b.n	80037b4 <LED_ProcessIT+0xa0>
				else
				{
					i--;
 800377e:	4b2e      	ldr	r3, [pc, #184]	; (8003838 <LED_ProcessIT+0x124>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	1e5a      	subs	r2, r3, #1
 8003784:	4b2c      	ldr	r3, [pc, #176]	; (8003838 <LED_ProcessIT+0x124>)
 8003786:	601a      	str	r2, [r3, #0]
					direction=0;
 8003788:	4b2a      	ldr	r3, [pc, #168]	; (8003834 <LED_ProcessIT+0x120>)
 800378a:	2200      	movs	r2, #0
 800378c:	701a      	strb	r2, [r3, #0]
 800378e:	e011      	b.n	80037b4 <LED_ProcessIT+0xa0>
				}
			}
			else
			{
				if(i>0) i--;
 8003790:	4b29      	ldr	r3, [pc, #164]	; (8003838 <LED_ProcessIT+0x124>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	2b00      	cmp	r3, #0
 8003796:	dd05      	ble.n	80037a4 <LED_ProcessIT+0x90>
 8003798:	4b27      	ldr	r3, [pc, #156]	; (8003838 <LED_ProcessIT+0x124>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	1e5a      	subs	r2, r3, #1
 800379e:	4b26      	ldr	r3, [pc, #152]	; (8003838 <LED_ProcessIT+0x124>)
 80037a0:	601a      	str	r2, [r3, #0]
 80037a2:	e007      	b.n	80037b4 <LED_ProcessIT+0xa0>
				else
				{
					i++;
 80037a4:	4b24      	ldr	r3, [pc, #144]	; (8003838 <LED_ProcessIT+0x124>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	1c5a      	adds	r2, r3, #1
 80037aa:	4b23      	ldr	r3, [pc, #140]	; (8003838 <LED_ProcessIT+0x124>)
 80037ac:	601a      	str	r2, [r3, #0]
					direction=1;
 80037ae:	4b21      	ldr	r3, [pc, #132]	; (8003834 <LED_ProcessIT+0x120>)
 80037b0:	2201      	movs	r2, #1
 80037b2:	701a      	strb	r2, [r3, #0]
				}
			}

			if(eColor==eGreen) led_change_color(0, i);
 80037b4:	4b21      	ldr	r3, [pc, #132]	; (800383c <LED_ProcessIT+0x128>)
 80037b6:	781b      	ldrb	r3, [r3, #0]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d107      	bne.n	80037cc <LED_ProcessIT+0xb8>
 80037bc:	4b1e      	ldr	r3, [pc, #120]	; (8003838 <LED_ProcessIT+0x124>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	0019      	movs	r1, r3
 80037c4:	2000      	movs	r0, #0
 80037c6:	f7ff ff19 	bl	80035fc <led_change_color>
		if(flag_10ms && led_active)
 80037ca:	e027      	b.n	800381c <LED_ProcessIT+0x108>
			else if(eColor==eRed) led_change_color(i, 0);
 80037cc:	4b1b      	ldr	r3, [pc, #108]	; (800383c <LED_ProcessIT+0x128>)
 80037ce:	781b      	ldrb	r3, [r3, #0]
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d107      	bne.n	80037e4 <LED_ProcessIT+0xd0>
 80037d4:	4b18      	ldr	r3, [pc, #96]	; (8003838 <LED_ProcessIT+0x124>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	2100      	movs	r1, #0
 80037dc:	0018      	movs	r0, r3
 80037de:	f7ff ff0d 	bl	80035fc <led_change_color>
		if(flag_10ms && led_active)
 80037e2:	e01b      	b.n	800381c <LED_ProcessIT+0x108>
			else if(eColor==eOrange) led_change_color(i, i);
 80037e4:	4b15      	ldr	r3, [pc, #84]	; (800383c <LED_ProcessIT+0x128>)
 80037e6:	781b      	ldrb	r3, [r3, #0]
 80037e8:	2b02      	cmp	r3, #2
 80037ea:	d117      	bne.n	800381c <LED_ProcessIT+0x108>
 80037ec:	4b12      	ldr	r3, [pc, #72]	; (8003838 <LED_ProcessIT+0x124>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	b2da      	uxtb	r2, r3
 80037f2:	4b11      	ldr	r3, [pc, #68]	; (8003838 <LED_ProcessIT+0x124>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	b2db      	uxtb	r3, r3
 80037f8:	0019      	movs	r1, r3
 80037fa:	0010      	movs	r0, r2
 80037fc:	f7ff fefe 	bl	80035fc <led_change_color>
		if(flag_10ms && led_active)
 8003800:	e00c      	b.n	800381c <LED_ProcessIT+0x108>
		}
	}
	else
	{
		i=0;
 8003802:	4b0d      	ldr	r3, [pc, #52]	; (8003838 <LED_ProcessIT+0x124>)
 8003804:	2200      	movs	r2, #0
 8003806:	601a      	str	r2, [r3, #0]
		cnt=0;
 8003808:	4b08      	ldr	r3, [pc, #32]	; (800382c <LED_ProcessIT+0x118>)
 800380a:	2200      	movs	r2, #0
 800380c:	601a      	str	r2, [r3, #0]
		direction=0;
 800380e:	4b09      	ldr	r3, [pc, #36]	; (8003834 <LED_ProcessIT+0x120>)
 8003810:	2200      	movs	r2, #0
 8003812:	701a      	strb	r2, [r3, #0]
		flag_10ms=0;
 8003814:	4b06      	ldr	r3, [pc, #24]	; (8003830 <LED_ProcessIT+0x11c>)
 8003816:	2200      	movs	r2, #0
 8003818:	701a      	strb	r2, [r3, #0]
	}
}
 800381a:	e000      	b.n	800381e <LED_ProcessIT+0x10a>
		if(flag_10ms && led_active)
 800381c:	46c0      	nop			; (mov r8, r8)
}
 800381e:	46c0      	nop			; (mov r8, r8)
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}
 8003824:	20000060 	.word	0x20000060
 8003828:	20000062 	.word	0x20000062
 800382c:	20000064 	.word	0x20000064
 8003830:	20000068 	.word	0x20000068
 8003834:	20000000 	.word	0x20000000
 8003838:	2000006c 	.word	0x2000006c
 800383c:	20000061 	.word	0x20000061

08003840 <main>:
  * @brief  The application entry point.
  *
  * @retval None
  */
int main(void)
{
 8003840:	b590      	push	{r4, r7, lr}
 8003842:	b08d      	sub	sp, #52	; 0x34
 8003844:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003846:	f7fd fe9b 	bl	8001580 <HAL_Init>

  /* USER CODE END Init */
  //__HAL_RCC_RTC_ENABLE();


  SystemClock_ConfigHigh();
 800384a:	f000 f857 	bl	80038fc <SystemClock_ConfigHigh>

  // Init RTC
  rtc_init();
 800384e:	f000 fb03 	bl	8003e58 <rtc_init>

  while(1)
  {
	  RTC_TimeTypeDef local_time = {0};
 8003852:	231c      	movs	r3, #28
 8003854:	18fb      	adds	r3, r7, r3
 8003856:	0018      	movs	r0, r3
 8003858:	2314      	movs	r3, #20
 800385a:	001a      	movs	r2, r3
 800385c:	2100      	movs	r1, #0
 800385e:	f000 fc7b 	bl	8004158 <memset>
	  HAL_Delay(10000);
 8003862:	4b0d      	ldr	r3, [pc, #52]	; (8003898 <main+0x58>)
 8003864:	0018      	movs	r0, r3
 8003866:	f7fd fed3 	bl	8001610 <HAL_Delay>
	  local_time =  rtc_get_time();
 800386a:	231c      	movs	r3, #28
 800386c:	18fb      	adds	r3, r7, r3
 800386e:	0018      	movs	r0, r3
 8003870:	f000 fb58 	bl	8003f24 <rtc_get_time>
	  HAL_Delay(3000);
 8003874:	4b09      	ldr	r3, [pc, #36]	; (800389c <main+0x5c>)
 8003876:	0018      	movs	r0, r3
 8003878:	f7fd feca 	bl	8001610 <HAL_Delay>
	  local_time =  rtc_get_time();
 800387c:	231c      	movs	r3, #28
 800387e:	18fc      	adds	r4, r7, r3
 8003880:	003b      	movs	r3, r7
 8003882:	0018      	movs	r0, r3
 8003884:	f000 fb4e 	bl	8003f24 <rtc_get_time>
 8003888:	003a      	movs	r2, r7
 800388a:	0023      	movs	r3, r4
 800388c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800388e:	c313      	stmia	r3!, {r0, r1, r4}
 8003890:	ca03      	ldmia	r2!, {r0, r1}
 8003892:	c303      	stmia	r3!, {r0, r1}
  {
 8003894:	e7dd      	b.n	8003852 <main+0x12>
 8003896:	46c0      	nop			; (mov r8, r8)
 8003898:	00002710 	.word	0x00002710
 800389c:	00000bb8 	.word	0x00000bb8

080038a0 <MAIN_TimerIT>:
  }
}


void MAIN_TimerIT(void)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	af00      	add	r7, sp, #0
	static int cnt=0;
	static enum eState eOldState;

	cnt++;
 80038a4:	4b10      	ldr	r3, [pc, #64]	; (80038e8 <MAIN_TimerIT+0x48>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	1c5a      	adds	r2, r3, #1
 80038aa:	4b0f      	ldr	r3, [pc, #60]	; (80038e8 <MAIN_TimerIT+0x48>)
 80038ac:	601a      	str	r2, [r3, #0]
	if(cnt>=1000)
 80038ae:	4b0e      	ldr	r3, [pc, #56]	; (80038e8 <MAIN_TimerIT+0x48>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a0e      	ldr	r2, [pc, #56]	; (80038ec <MAIN_TimerIT+0x4c>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	dd07      	ble.n	80038c8 <MAIN_TimerIT+0x28>
	{
		maintimer++;
 80038b8:	4b0d      	ldr	r3, [pc, #52]	; (80038f0 <MAIN_TimerIT+0x50>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	1c5a      	adds	r2, r3, #1
 80038be:	4b0c      	ldr	r3, [pc, #48]	; (80038f0 <MAIN_TimerIT+0x50>)
 80038c0:	601a      	str	r2, [r3, #0]
		cnt = 0;
 80038c2:	4b09      	ldr	r3, [pc, #36]	; (80038e8 <MAIN_TimerIT+0x48>)
 80038c4:	2200      	movs	r2, #0
 80038c6:	601a      	str	r2, [r3, #0]
	}

	if(eOldState!=state) maintimer = 0;
 80038c8:	4b0a      	ldr	r3, [pc, #40]	; (80038f4 <MAIN_TimerIT+0x54>)
 80038ca:	781a      	ldrb	r2, [r3, #0]
 80038cc:	4b0a      	ldr	r3, [pc, #40]	; (80038f8 <MAIN_TimerIT+0x58>)
 80038ce:	781b      	ldrb	r3, [r3, #0]
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d002      	beq.n	80038da <MAIN_TimerIT+0x3a>
 80038d4:	4b06      	ldr	r3, [pc, #24]	; (80038f0 <MAIN_TimerIT+0x50>)
 80038d6:	2200      	movs	r2, #0
 80038d8:	601a      	str	r2, [r3, #0]

	eOldState = state;
 80038da:	4b07      	ldr	r3, [pc, #28]	; (80038f8 <MAIN_TimerIT+0x58>)
 80038dc:	781a      	ldrb	r2, [r3, #0]
 80038de:	4b05      	ldr	r3, [pc, #20]	; (80038f4 <MAIN_TimerIT+0x54>)
 80038e0:	701a      	strb	r2, [r3, #0]
}
 80038e2:	46c0      	nop			; (mov r8, r8)
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}
 80038e8:	20000078 	.word	0x20000078
 80038ec:	000003e7 	.word	0x000003e7
 80038f0:	20000074 	.word	0x20000074
 80038f4:	2000007c 	.word	0x2000007c
 80038f8:	20000070 	.word	0x20000070

080038fc <SystemClock_ConfigHigh>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_ConfigHigh(void)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b09c      	sub	sp, #112	; 0x70
 8003900:	af00      	add	r7, sp, #0
	  RCC_ClkInitTypeDef RCC_ClkInitStruct;
	  RCC_PeriphCLKInitTypeDef PeriphClkInit;

	    /**Configure the main internal regulator output voltage
	    */
	  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003902:	4b43      	ldr	r3, [pc, #268]	; (8003a10 <SystemClock_ConfigHigh+0x114>)
 8003904:	4a42      	ldr	r2, [pc, #264]	; (8003a10 <SystemClock_ConfigHigh+0x114>)
 8003906:	6812      	ldr	r2, [r2, #0]
 8003908:	4942      	ldr	r1, [pc, #264]	; (8003a14 <SystemClock_ConfigHigh+0x118>)
 800390a:	400a      	ands	r2, r1
 800390c:	2180      	movs	r1, #128	; 0x80
 800390e:	0109      	lsls	r1, r1, #4
 8003910:	430a      	orrs	r2, r1
 8003912:	601a      	str	r2, [r3, #0]

	    /**Configure LSE Drive Capability
	    */
	  HAL_PWR_EnableBkUpAccess();
 8003914:	f7fe f978 	bl	8001c08 <HAL_PWR_EnableBkUpAccess>

	  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8003918:	4b3f      	ldr	r3, [pc, #252]	; (8003a18 <SystemClock_ConfigHigh+0x11c>)
 800391a:	4a3f      	ldr	r2, [pc, #252]	; (8003a18 <SystemClock_ConfigHigh+0x11c>)
 800391c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800391e:	493d      	ldr	r1, [pc, #244]	; (8003a14 <SystemClock_ConfigHigh+0x118>)
 8003920:	400a      	ands	r2, r1
 8003922:	651a      	str	r2, [r3, #80]	; 0x50

	    /**Initializes the CPU, AHB and APB busses clocks
	    */
	  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSE;
 8003924:	2338      	movs	r3, #56	; 0x38
 8003926:	18fb      	adds	r3, r7, r3
 8003928:	2206      	movs	r2, #6
 800392a:	601a      	str	r2, [r3, #0]
	  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800392c:	2338      	movs	r3, #56	; 0x38
 800392e:	18fb      	adds	r3, r7, r3
 8003930:	2201      	movs	r2, #1
 8003932:	60da      	str	r2, [r3, #12]
	  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003934:	2338      	movs	r3, #56	; 0x38
 8003936:	18fb      	adds	r3, r7, r3
 8003938:	2280      	movs	r2, #128	; 0x80
 800393a:	0052      	lsls	r2, r2, #1
 800393c:	609a      	str	r2, [r3, #8]
	  RCC_OscInitStruct.HSICalibrationValue = 16;
 800393e:	2338      	movs	r3, #56	; 0x38
 8003940:	18fb      	adds	r3, r7, r3
 8003942:	2210      	movs	r2, #16
 8003944:	611a      	str	r2, [r3, #16]
	  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003946:	2338      	movs	r3, #56	; 0x38
 8003948:	18fb      	adds	r3, r7, r3
 800394a:	2200      	movs	r2, #0
 800394c:	629a      	str	r2, [r3, #40]	; 0x28
	  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800394e:	2338      	movs	r3, #56	; 0x38
 8003950:	18fb      	adds	r3, r7, r3
 8003952:	0018      	movs	r0, r3
 8003954:	f7fe f966 	bl	8001c24 <HAL_RCC_OscConfig>
 8003958:	1e03      	subs	r3, r0, #0
 800395a:	d006      	beq.n	800396a <SystemClock_ConfigHigh+0x6e>
	  {
	    _Error_Handler(__FILE__, __LINE__);
 800395c:	2396      	movs	r3, #150	; 0x96
 800395e:	005a      	lsls	r2, r3, #1
 8003960:	4b2e      	ldr	r3, [pc, #184]	; (8003a1c <SystemClock_ConfigHigh+0x120>)
 8003962:	0011      	movs	r1, r2
 8003964:	0018      	movs	r0, r3
 8003966:	f000 f85b 	bl	8003a20 <_Error_Handler>
	  }

	    /**Initializes the CPU, AHB and APB busses clocks
	    */
	  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800396a:	2324      	movs	r3, #36	; 0x24
 800396c:	18fb      	adds	r3, r7, r3
 800396e:	220f      	movs	r2, #15
 8003970:	601a      	str	r2, [r3, #0]
	                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8003972:	2324      	movs	r3, #36	; 0x24
 8003974:	18fb      	adds	r3, r7, r3
 8003976:	2201      	movs	r2, #1
 8003978:	605a      	str	r2, [r3, #4]
	  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800397a:	2324      	movs	r3, #36	; 0x24
 800397c:	18fb      	adds	r3, r7, r3
 800397e:	2200      	movs	r2, #0
 8003980:	609a      	str	r2, [r3, #8]
	  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003982:	2324      	movs	r3, #36	; 0x24
 8003984:	18fb      	adds	r3, r7, r3
 8003986:	2200      	movs	r2, #0
 8003988:	60da      	str	r2, [r3, #12]
	  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800398a:	2324      	movs	r3, #36	; 0x24
 800398c:	18fb      	adds	r3, r7, r3
 800398e:	2200      	movs	r2, #0
 8003990:	611a      	str	r2, [r3, #16]

	  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003992:	2324      	movs	r3, #36	; 0x24
 8003994:	18fb      	adds	r3, r7, r3
 8003996:	2100      	movs	r1, #0
 8003998:	0018      	movs	r0, r3
 800399a:	f7fe fce5 	bl	8002368 <HAL_RCC_ClockConfig>
 800399e:	1e03      	subs	r3, r0, #0
 80039a0:	d006      	beq.n	80039b0 <SystemClock_ConfigHigh+0xb4>
	  {
	    _Error_Handler(__FILE__, __LINE__);
 80039a2:	239d      	movs	r3, #157	; 0x9d
 80039a4:	005a      	lsls	r2, r3, #1
 80039a6:	4b1d      	ldr	r3, [pc, #116]	; (8003a1c <SystemClock_ConfigHigh+0x120>)
 80039a8:	0011      	movs	r1, r2
 80039aa:	0018      	movs	r0, r3
 80039ac:	f000 f838 	bl	8003a20 <_Error_Handler>
	  }

	  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80039b0:	1d3b      	adds	r3, r7, #4
 80039b2:	2220      	movs	r2, #32
 80039b4:	601a      	str	r2, [r3, #0]
	  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80039b6:	1d3b      	adds	r3, r7, #4
 80039b8:	2280      	movs	r2, #128	; 0x80
 80039ba:	0252      	lsls	r2, r2, #9
 80039bc:	605a      	str	r2, [r3, #4]
	  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80039be:	1d3b      	adds	r3, r7, #4
 80039c0:	0018      	movs	r0, r3
 80039c2:	f7fe fecb 	bl	800275c <HAL_RCCEx_PeriphCLKConfig>
 80039c6:	1e03      	subs	r3, r0, #0
 80039c8:	d007      	beq.n	80039da <SystemClock_ConfigHigh+0xde>
	  {
		  _Error_Handler(__FILE__, __LINE__);
 80039ca:	2342      	movs	r3, #66	; 0x42
 80039cc:	33ff      	adds	r3, #255	; 0xff
 80039ce:	001a      	movs	r2, r3
 80039d0:	4b12      	ldr	r3, [pc, #72]	; (8003a1c <SystemClock_ConfigHigh+0x120>)
 80039d2:	0011      	movs	r1, r2
 80039d4:	0018      	movs	r0, r3
 80039d6:	f000 f823 	bl	8003a20 <_Error_Handler>
	  }

	    /**Configure the Systick interrupt time
	    */
	  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80039da:	f7fe fe5d 	bl	8002698 <HAL_RCC_GetHCLKFreq>
 80039de:	0002      	movs	r2, r0
 80039e0:	23fa      	movs	r3, #250	; 0xfa
 80039e2:	0099      	lsls	r1, r3, #2
 80039e4:	0010      	movs	r0, r2
 80039e6:	f7fc fb8f 	bl	8000108 <__udivsi3>
 80039ea:	0003      	movs	r3, r0
 80039ec:	0018      	movs	r0, r3
 80039ee:	f7fd fecf 	bl	8001790 <HAL_SYSTICK_Config>

	    /**Configure the Systick
	    */
	  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80039f2:	2004      	movs	r0, #4
 80039f4:	f7fd feda 	bl	80017ac <HAL_SYSTICK_CLKSourceConfig>

	  /* SysTick_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80039f8:	2301      	movs	r3, #1
 80039fa:	425b      	negs	r3, r3
 80039fc:	2200      	movs	r2, #0
 80039fe:	2100      	movs	r1, #0
 8003a00:	0018      	movs	r0, r3
 8003a02:	f7fd feaf 	bl	8001764 <HAL_NVIC_SetPriority>
}
 8003a06:	46c0      	nop			; (mov r8, r8)
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	b01c      	add	sp, #112	; 0x70
 8003a0c:	bd80      	pop	{r7, pc}
 8003a0e:	46c0      	nop			; (mov r8, r8)
 8003a10:	40007000 	.word	0x40007000
 8003a14:	ffffe7ff 	.word	0xffffe7ff
 8003a18:	40021000 	.word	0x40021000
 8003a1c:	08004190 	.word	0x08004190

08003a20 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b082      	sub	sp, #8
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 8003a2a:	e7fe      	b.n	8003a2a <_Error_Handler+0xa>

08003a2c <mot_power_on>:
{
	HAL_GPIO_WritePin(GPIOA, TP_POWER_PA12, GPIO_PIN_RESET);
}

void mot_power_on(void)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, MOT_PWR_PA4, GPIO_PIN_SET);
 8003a30:	23a0      	movs	r3, #160	; 0xa0
 8003a32:	05db      	lsls	r3, r3, #23
 8003a34:	2201      	movs	r2, #1
 8003a36:	2110      	movs	r1, #16
 8003a38:	0018      	movs	r0, r3
 8003a3a:	f7fe f8c7 	bl	8001bcc <HAL_GPIO_WritePin>
}
 8003a3e:	46c0      	nop			; (mov r8, r8)
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}

08003a44 <mot_power_off>:

void mot_power_off(void)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, MOT_PWR_PA4, GPIO_PIN_RESET);
 8003a48:	23a0      	movs	r3, #160	; 0xa0
 8003a4a:	05db      	lsls	r3, r3, #23
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	2110      	movs	r1, #16
 8003a50:	0018      	movs	r0, r3
 8003a52:	f7fe f8bb 	bl	8001bcc <HAL_GPIO_WritePin>
}
 8003a56:	46c0      	nop			; (mov r8, r8)
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}

08003a5c <PRINTER_Print_ProcessIT>:
	return print_flag;
}


void PRINTER_Print_ProcessIT(void)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b084      	sub	sp, #16
 8003a60:	af00      	add	r7, sp, #0
	static int columns;
	static char matrix_value;
	static int timer;
	static enum ePrinterState eState = ePrepare;

	if(print_flag!=0)
 8003a62:	4b91      	ldr	r3, [pc, #580]	; (8003ca8 <PRINTER_Print_ProcessIT+0x24c>)
 8003a64:	781b      	ldrb	r3, [r3, #0]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d100      	bne.n	8003a6c <PRINTER_Print_ProcessIT+0x10>
 8003a6a:	e118      	b.n	8003c9e <PRINTER_Print_ProcessIT+0x242>
	{
		// State Machine for printing process
		switch(eState)
 8003a6c:	4b8f      	ldr	r3, [pc, #572]	; (8003cac <PRINTER_Print_ProcessIT+0x250>)
 8003a6e:	781b      	ldrb	r3, [r3, #0]
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d015      	beq.n	8003aa0 <PRINTER_Print_ProcessIT+0x44>
 8003a74:	2b02      	cmp	r3, #2
 8003a76:	d100      	bne.n	8003a7a <PRINTER_Print_ProcessIT+0x1e>
 8003a78:	e0e3      	b.n	8003c42 <PRINTER_Print_ProcessIT+0x1e6>
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d000      	beq.n	8003a80 <PRINTER_Print_ProcessIT+0x24>
				print_flag = 0u;
				eState = ePrepare;
				break;

			default:
				break;
 8003a7e:	e10e      	b.n	8003c9e <PRINTER_Print_ProcessIT+0x242>
				rows = 0;
 8003a80:	4b8b      	ldr	r3, [pc, #556]	; (8003cb0 <PRINTER_Print_ProcessIT+0x254>)
 8003a82:	2200      	movs	r2, #0
 8003a84:	601a      	str	r2, [r3, #0]
				columns = 0;
 8003a86:	4b8b      	ldr	r3, [pc, #556]	; (8003cb4 <PRINTER_Print_ProcessIT+0x258>)
 8003a88:	2200      	movs	r2, #0
 8003a8a:	601a      	str	r2, [r3, #0]
				matrix_value = 0;
 8003a8c:	4b8a      	ldr	r3, [pc, #552]	; (8003cb8 <PRINTER_Print_ProcessIT+0x25c>)
 8003a8e:	2200      	movs	r2, #0
 8003a90:	701a      	strb	r2, [r3, #0]
				timer = 0;
 8003a92:	4b8a      	ldr	r3, [pc, #552]	; (8003cbc <PRINTER_Print_ProcessIT+0x260>)
 8003a94:	2200      	movs	r2, #0
 8003a96:	601a      	str	r2, [r3, #0]
				eState = ePrinting;
 8003a98:	4b84      	ldr	r3, [pc, #528]	; (8003cac <PRINTER_Print_ProcessIT+0x250>)
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	701a      	strb	r2, [r3, #0]
				break;
 8003a9e:	e0fe      	b.n	8003c9e <PRINTER_Print_ProcessIT+0x242>
				if(columns < 24) // load data into shift register
 8003aa0:	4b84      	ldr	r3, [pc, #528]	; (8003cb4 <PRINTER_Print_ProcessIT+0x258>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	2b17      	cmp	r3, #23
 8003aa6:	dc4f      	bgt.n	8003b48 <PRINTER_Print_ProcessIT+0xec>
					matrix_value = matrix_array[rows][columns];
 8003aa8:	4b81      	ldr	r3, [pc, #516]	; (8003cb0 <PRINTER_Print_ProcessIT+0x254>)
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	4b81      	ldr	r3, [pc, #516]	; (8003cb4 <PRINTER_Print_ProcessIT+0x258>)
 8003aae:	6819      	ldr	r1, [r3, #0]
 8003ab0:	4883      	ldr	r0, [pc, #524]	; (8003cc0 <PRINTER_Print_ProcessIT+0x264>)
 8003ab2:	0013      	movs	r3, r2
 8003ab4:	005b      	lsls	r3, r3, #1
 8003ab6:	189b      	adds	r3, r3, r2
 8003ab8:	00db      	lsls	r3, r3, #3
 8003aba:	18c3      	adds	r3, r0, r3
 8003abc:	5c5a      	ldrb	r2, [r3, r1]
 8003abe:	4b7e      	ldr	r3, [pc, #504]	; (8003cb8 <PRINTER_Print_ProcessIT+0x25c>)
 8003ac0:	701a      	strb	r2, [r3, #0]
					int shift_bit = 0x80;
 8003ac2:	2380      	movs	r3, #128	; 0x80
 8003ac4:	60fb      	str	r3, [r7, #12]
					for(int bit_cnt = 0; bit_cnt < 8; bit_cnt++)
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	60bb      	str	r3, [r7, #8]
 8003aca:	e034      	b.n	8003b36 <PRINTER_Print_ProcessIT+0xda>
						if((matrix_value & shift_bit) != 0x00)
 8003acc:	4b7a      	ldr	r3, [pc, #488]	; (8003cb8 <PRINTER_Print_ProcessIT+0x25c>)
 8003ace:	781b      	ldrb	r3, [r3, #0]
 8003ad0:	001a      	movs	r2, r3
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	d007      	beq.n	8003ae8 <PRINTER_Print_ProcessIT+0x8c>
							HAL_GPIO_WritePin(GPIOA, DATA_PA11, GPIO_PIN_SET);
 8003ad8:	2380      	movs	r3, #128	; 0x80
 8003ada:	0119      	lsls	r1, r3, #4
 8003adc:	23a0      	movs	r3, #160	; 0xa0
 8003ade:	05db      	lsls	r3, r3, #23
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	0018      	movs	r0, r3
 8003ae4:	f7fe f872 	bl	8001bcc <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA, CLK_PA10, GPIO_PIN_SET);
 8003ae8:	2380      	movs	r3, #128	; 0x80
 8003aea:	00d9      	lsls	r1, r3, #3
 8003aec:	23a0      	movs	r3, #160	; 0xa0
 8003aee:	05db      	lsls	r3, r3, #23
 8003af0:	2201      	movs	r2, #1
 8003af2:	0018      	movs	r0, r3
 8003af4:	f7fe f86a 	bl	8001bcc <HAL_GPIO_WritePin>
						for(int i=0; i<=3; i++) // Need some time
 8003af8:	2300      	movs	r3, #0
 8003afa:	607b      	str	r3, [r7, #4]
 8003afc:	e00a      	b.n	8003b14 <PRINTER_Print_ProcessIT+0xb8>
						HAL_GPIO_WritePin(GPIOA, CLK_PA10, GPIO_PIN_RESET);
 8003afe:	2380      	movs	r3, #128	; 0x80
 8003b00:	00d9      	lsls	r1, r3, #3
 8003b02:	23a0      	movs	r3, #160	; 0xa0
 8003b04:	05db      	lsls	r3, r3, #23
 8003b06:	2200      	movs	r2, #0
 8003b08:	0018      	movs	r0, r3
 8003b0a:	f7fe f85f 	bl	8001bcc <HAL_GPIO_WritePin>
						for(int i=0; i<=3; i++) // Need some time
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	3301      	adds	r3, #1
 8003b12:	607b      	str	r3, [r7, #4]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2b03      	cmp	r3, #3
 8003b18:	ddf1      	ble.n	8003afe <PRINTER_Print_ProcessIT+0xa2>
						HAL_GPIO_WritePin(GPIOA, DATA_PA11, GPIO_PIN_RESET);
 8003b1a:	2380      	movs	r3, #128	; 0x80
 8003b1c:	0119      	lsls	r1, r3, #4
 8003b1e:	23a0      	movs	r3, #160	; 0xa0
 8003b20:	05db      	lsls	r3, r3, #23
 8003b22:	2200      	movs	r2, #0
 8003b24:	0018      	movs	r0, r3
 8003b26:	f7fe f851 	bl	8001bcc <HAL_GPIO_WritePin>
						shift_bit = shift_bit >> 1;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	105b      	asrs	r3, r3, #1
 8003b2e:	60fb      	str	r3, [r7, #12]
					for(int bit_cnt = 0; bit_cnt < 8; bit_cnt++)
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	3301      	adds	r3, #1
 8003b34:	60bb      	str	r3, [r7, #8]
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	2b07      	cmp	r3, #7
 8003b3a:	ddc7      	ble.n	8003acc <PRINTER_Print_ProcessIT+0x70>
				columns++;
 8003b3c:	4b5d      	ldr	r3, [pc, #372]	; (8003cb4 <PRINTER_Print_ProcessIT+0x258>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	1c5a      	adds	r2, r3, #1
 8003b42:	4b5c      	ldr	r3, [pc, #368]	; (8003cb4 <PRINTER_Print_ProcessIT+0x258>)
 8003b44:	601a      	str	r2, [r3, #0]
				break;
 8003b46:	e0a9      	b.n	8003c9c <PRINTER_Print_ProcessIT+0x240>
					if(rows < 40)
 8003b48:	4b59      	ldr	r3, [pc, #356]	; (8003cb0 <PRINTER_Print_ProcessIT+0x254>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	2b27      	cmp	r3, #39	; 0x27
 8003b4e:	dd00      	ble.n	8003b52 <PRINTER_Print_ProcessIT+0xf6>
 8003b50:	e070      	b.n	8003c34 <PRINTER_Print_ProcessIT+0x1d8>
						timer++; // increments every 1ms
 8003b52:	4b5a      	ldr	r3, [pc, #360]	; (8003cbc <PRINTER_Print_ProcessIT+0x260>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	1c5a      	adds	r2, r3, #1
 8003b58:	4b58      	ldr	r3, [pc, #352]	; (8003cbc <PRINTER_Print_ProcessIT+0x260>)
 8003b5a:	601a      	str	r2, [r3, #0]
						if(timer<=1) // first  activate thermal head
 8003b5c:	4b57      	ldr	r3, [pc, #348]	; (8003cbc <PRINTER_Print_ProcessIT+0x260>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	dc16      	bgt.n	8003b92 <PRINTER_Print_ProcessIT+0x136>
							HAL_GPIO_WritePin(GPIOA, LATCH_PA9, GPIO_PIN_RESET);
 8003b64:	2380      	movs	r3, #128	; 0x80
 8003b66:	0099      	lsls	r1, r3, #2
 8003b68:	23a0      	movs	r3, #160	; 0xa0
 8003b6a:	05db      	lsls	r3, r3, #23
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	0018      	movs	r0, r3
 8003b70:	f7fe f82c 	bl	8001bcc <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOB, STROBE1_PB1, GPIO_PIN_RESET);
 8003b74:	4b53      	ldr	r3, [pc, #332]	; (8003cc4 <PRINTER_Print_ProcessIT+0x268>)
 8003b76:	2200      	movs	r2, #0
 8003b78:	2102      	movs	r1, #2
 8003b7a:	0018      	movs	r0, r3
 8003b7c:	f7fe f826 	bl	8001bcc <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOA, STROBE2_PA8, GPIO_PIN_RESET);
 8003b80:	2380      	movs	r3, #128	; 0x80
 8003b82:	0059      	lsls	r1, r3, #1
 8003b84:	23a0      	movs	r3, #160	; 0xa0
 8003b86:	05db      	lsls	r3, r3, #23
 8003b88:	2200      	movs	r2, #0
 8003b8a:	0018      	movs	r0, r3
 8003b8c:	f7fe f81e 	bl	8001bcc <HAL_GPIO_WritePin>
				break;
 8003b90:	e084      	b.n	8003c9c <PRINTER_Print_ProcessIT+0x240>
						else if(timer<=50)
 8003b92:	4b4a      	ldr	r3, [pc, #296]	; (8003cbc <PRINTER_Print_ProcessIT+0x260>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	2b32      	cmp	r3, #50	; 0x32
 8003b98:	dc00      	bgt.n	8003b9c <PRINTER_Print_ProcessIT+0x140>
 8003b9a:	e07f      	b.n	8003c9c <PRINTER_Print_ProcessIT+0x240>
						else if(timer <= 51) // after 40ms deactivate thermal head
 8003b9c:	4b47      	ldr	r3, [pc, #284]	; (8003cbc <PRINTER_Print_ProcessIT+0x260>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	2b33      	cmp	r3, #51	; 0x33
 8003ba2:	dc16      	bgt.n	8003bd2 <PRINTER_Print_ProcessIT+0x176>
							HAL_GPIO_WritePin(GPIOB, STROBE1_PB1, GPIO_PIN_SET);
 8003ba4:	4b47      	ldr	r3, [pc, #284]	; (8003cc4 <PRINTER_Print_ProcessIT+0x268>)
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	2102      	movs	r1, #2
 8003baa:	0018      	movs	r0, r3
 8003bac:	f7fe f80e 	bl	8001bcc <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOA, STROBE2_PA8, GPIO_PIN_SET);
 8003bb0:	2380      	movs	r3, #128	; 0x80
 8003bb2:	0059      	lsls	r1, r3, #1
 8003bb4:	23a0      	movs	r3, #160	; 0xa0
 8003bb6:	05db      	lsls	r3, r3, #23
 8003bb8:	2201      	movs	r2, #1
 8003bba:	0018      	movs	r0, r3
 8003bbc:	f7fe f806 	bl	8001bcc <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOA, LATCH_PA9, GPIO_PIN_SET);
 8003bc0:	2380      	movs	r3, #128	; 0x80
 8003bc2:	0099      	lsls	r1, r3, #2
 8003bc4:	23a0      	movs	r3, #160	; 0xa0
 8003bc6:	05db      	lsls	r3, r3, #23
 8003bc8:	2201      	movs	r2, #1
 8003bca:	0018      	movs	r0, r3
 8003bcc:	f7fd fffe 	bl	8001bcc <HAL_GPIO_WritePin>
				break;
 8003bd0:	e064      	b.n	8003c9c <PRINTER_Print_ProcessIT+0x240>
						else if(timer<=53)
 8003bd2:	4b3a      	ldr	r3, [pc, #232]	; (8003cbc <PRINTER_Print_ProcessIT+0x260>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	2b35      	cmp	r3, #53	; 0x35
 8003bd8:	dc02      	bgt.n	8003be0 <PRINTER_Print_ProcessIT+0x184>
							mot_power_on();
 8003bda:	f7ff ff27 	bl	8003a2c <mot_power_on>
				break;
 8003bde:	e05d      	b.n	8003c9c <PRINTER_Print_ProcessIT+0x240>
						else if(timer<=54)
 8003be0:	4b36      	ldr	r3, [pc, #216]	; (8003cbc <PRINTER_Print_ProcessIT+0x260>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	2b36      	cmp	r3, #54	; 0x36
 8003be6:	dc03      	bgt.n	8003bf0 <PRINTER_Print_ProcessIT+0x194>
							printer_do_step(0u);
 8003be8:	2000      	movs	r0, #0
 8003bea:	f000 f86d 	bl	8003cc8 <printer_do_step>
				break;
 8003bee:	e055      	b.n	8003c9c <PRINTER_Print_ProcessIT+0x240>
						else if(timer<=60)
 8003bf0:	4b32      	ldr	r3, [pc, #200]	; (8003cbc <PRINTER_Print_ProcessIT+0x260>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	2b3c      	cmp	r3, #60	; 0x3c
 8003bf6:	dd51      	ble.n	8003c9c <PRINTER_Print_ProcessIT+0x240>
						else if(timer<=61)
 8003bf8:	4b30      	ldr	r3, [pc, #192]	; (8003cbc <PRINTER_Print_ProcessIT+0x260>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	2b3d      	cmp	r3, #61	; 0x3d
 8003bfe:	dc03      	bgt.n	8003c08 <PRINTER_Print_ProcessIT+0x1ac>
							printer_do_step(0u);
 8003c00:	2000      	movs	r0, #0
 8003c02:	f000 f861 	bl	8003cc8 <printer_do_step>
				break;
 8003c06:	e049      	b.n	8003c9c <PRINTER_Print_ProcessIT+0x240>
						else if(timer<=67)
 8003c08:	4b2c      	ldr	r3, [pc, #176]	; (8003cbc <PRINTER_Print_ProcessIT+0x260>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	2b43      	cmp	r3, #67	; 0x43
 8003c0e:	dd45      	ble.n	8003c9c <PRINTER_Print_ProcessIT+0x240>
						else if(timer<=68)
 8003c10:	4b2a      	ldr	r3, [pc, #168]	; (8003cbc <PRINTER_Print_ProcessIT+0x260>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	2b44      	cmp	r3, #68	; 0x44
 8003c16:	dc41      	bgt.n	8003c9c <PRINTER_Print_ProcessIT+0x240>
							mot_power_off();
 8003c18:	f7ff ff14 	bl	8003a44 <mot_power_off>
							rows++;
 8003c1c:	4b24      	ldr	r3, [pc, #144]	; (8003cb0 <PRINTER_Print_ProcessIT+0x254>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	1c5a      	adds	r2, r3, #1
 8003c22:	4b23      	ldr	r3, [pc, #140]	; (8003cb0 <PRINTER_Print_ProcessIT+0x254>)
 8003c24:	601a      	str	r2, [r3, #0]
							columns = 0;
 8003c26:	4b23      	ldr	r3, [pc, #140]	; (8003cb4 <PRINTER_Print_ProcessIT+0x258>)
 8003c28:	2200      	movs	r2, #0
 8003c2a:	601a      	str	r2, [r3, #0]
							timer=0;
 8003c2c:	4b23      	ldr	r3, [pc, #140]	; (8003cbc <PRINTER_Print_ProcessIT+0x260>)
 8003c2e:	2200      	movs	r2, #0
 8003c30:	601a      	str	r2, [r3, #0]
				break;
 8003c32:	e033      	b.n	8003c9c <PRINTER_Print_ProcessIT+0x240>
						rows = 0;
 8003c34:	4b1e      	ldr	r3, [pc, #120]	; (8003cb0 <PRINTER_Print_ProcessIT+0x254>)
 8003c36:	2200      	movs	r2, #0
 8003c38:	601a      	str	r2, [r3, #0]
						eState = eFinish;
 8003c3a:	4b1c      	ldr	r3, [pc, #112]	; (8003cac <PRINTER_Print_ProcessIT+0x250>)
 8003c3c:	2202      	movs	r2, #2
 8003c3e:	701a      	strb	r2, [r3, #0]
				break;
 8003c40:	e02c      	b.n	8003c9c <PRINTER_Print_ProcessIT+0x240>
				HAL_GPIO_WritePin(GPIOA, CLK_PA10, GPIO_PIN_RESET);
 8003c42:	2380      	movs	r3, #128	; 0x80
 8003c44:	00d9      	lsls	r1, r3, #3
 8003c46:	23a0      	movs	r3, #160	; 0xa0
 8003c48:	05db      	lsls	r3, r3, #23
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	0018      	movs	r0, r3
 8003c4e:	f7fd ffbd 	bl	8001bcc <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, DATA_PA11, GPIO_PIN_RESET);
 8003c52:	2380      	movs	r3, #128	; 0x80
 8003c54:	0119      	lsls	r1, r3, #4
 8003c56:	23a0      	movs	r3, #160	; 0xa0
 8003c58:	05db      	lsls	r3, r3, #23
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	0018      	movs	r0, r3
 8003c5e:	f7fd ffb5 	bl	8001bcc <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, STROBE1_PB1, GPIO_PIN_SET);
 8003c62:	4b18      	ldr	r3, [pc, #96]	; (8003cc4 <PRINTER_Print_ProcessIT+0x268>)
 8003c64:	2201      	movs	r2, #1
 8003c66:	2102      	movs	r1, #2
 8003c68:	0018      	movs	r0, r3
 8003c6a:	f7fd ffaf 	bl	8001bcc <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, STROBE2_PA8, GPIO_PIN_SET);
 8003c6e:	2380      	movs	r3, #128	; 0x80
 8003c70:	0059      	lsls	r1, r3, #1
 8003c72:	23a0      	movs	r3, #160	; 0xa0
 8003c74:	05db      	lsls	r3, r3, #23
 8003c76:	2201      	movs	r2, #1
 8003c78:	0018      	movs	r0, r3
 8003c7a:	f7fd ffa7 	bl	8001bcc <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, LATCH_PA9, GPIO_PIN_SET);
 8003c7e:	2380      	movs	r3, #128	; 0x80
 8003c80:	0099      	lsls	r1, r3, #2
 8003c82:	23a0      	movs	r3, #160	; 0xa0
 8003c84:	05db      	lsls	r3, r3, #23
 8003c86:	2201      	movs	r2, #1
 8003c88:	0018      	movs	r0, r3
 8003c8a:	f7fd ff9f 	bl	8001bcc <HAL_GPIO_WritePin>
				print_flag = 0u;
 8003c8e:	4b06      	ldr	r3, [pc, #24]	; (8003ca8 <PRINTER_Print_ProcessIT+0x24c>)
 8003c90:	2200      	movs	r2, #0
 8003c92:	701a      	strb	r2, [r3, #0]
				eState = ePrepare;
 8003c94:	4b05      	ldr	r3, [pc, #20]	; (8003cac <PRINTER_Print_ProcessIT+0x250>)
 8003c96:	2200      	movs	r2, #0
 8003c98:	701a      	strb	r2, [r3, #0]
				break;
 8003c9a:	e000      	b.n	8003c9e <PRINTER_Print_ProcessIT+0x242>
				break;
 8003c9c:	46c0      	nop			; (mov r8, r8)
		HAL_GPIO_WritePin(GPIOA, DATA_PA11, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOB, STROBE1_PB1, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, STROBE2_PA8, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, LATCH_PA9, GPIO_PIN_SET);
	} TODO */
}
 8003c9e:	46c0      	nop			; (mov r8, r8)
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	b004      	add	sp, #16
 8003ca4:	bd80      	pop	{r7, pc}
 8003ca6:	46c0      	nop			; (mov r8, r8)
 8003ca8:	20000440 	.word	0x20000440
 8003cac:	20000441 	.word	0x20000441
 8003cb0:	20000444 	.word	0x20000444
 8003cb4:	20000448 	.word	0x20000448
 8003cb8:	2000044c 	.word	0x2000044c
 8003cbc:	20000450 	.word	0x20000450
 8003cc0:	20000080 	.word	0x20000080
 8003cc4:	50000400 	.word	0x50000400

08003cc8 <printer_do_step>:


void printer_do_step(char cDirection)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b082      	sub	sp, #8
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	0002      	movs	r2, r0
 8003cd0:	1dfb      	adds	r3, r7, #7
 8003cd2:	701a      	strb	r2, [r3, #0]

	static char cstep = 0;

	switch(cstep)
 8003cd4:	4b58      	ldr	r3, [pc, #352]	; (8003e38 <printer_do_step+0x170>)
 8003cd6:	781b      	ldrb	r3, [r3, #0]
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d030      	beq.n	8003d3e <printer_do_step+0x76>
 8003cdc:	dc02      	bgt.n	8003ce4 <printer_do_step+0x1c>
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d006      	beq.n	8003cf0 <printer_do_step+0x28>
 8003ce2:	e0a1      	b.n	8003e28 <printer_do_step+0x160>
 8003ce4:	2b02      	cmp	r3, #2
 8003ce6:	d051      	beq.n	8003d8c <printer_do_step+0xc4>
 8003ce8:	2b03      	cmp	r3, #3
 8003cea:	d100      	bne.n	8003cee <printer_do_step+0x26>
 8003cec:	e075      	b.n	8003dda <printer_do_step+0x112>
 8003cee:	e09b      	b.n	8003e28 <printer_do_step+0x160>
	{
		// Step 1
		case 0:
			HAL_GPIO_WritePin(GPIOA, MOT_AIN1_PA5, GPIO_PIN_RESET);
 8003cf0:	23a0      	movs	r3, #160	; 0xa0
 8003cf2:	05db      	lsls	r3, r3, #23
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	2120      	movs	r1, #32
 8003cf8:	0018      	movs	r0, r3
 8003cfa:	f7fd ff67 	bl	8001bcc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, MOT_AIN2_PA6, GPIO_PIN_SET);
 8003cfe:	23a0      	movs	r3, #160	; 0xa0
 8003d00:	05db      	lsls	r3, r3, #23
 8003d02:	2201      	movs	r2, #1
 8003d04:	2140      	movs	r1, #64	; 0x40
 8003d06:	0018      	movs	r0, r3
 8003d08:	f7fd ff60 	bl	8001bcc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, MOT_BIN1_PB0, GPIO_PIN_SET);
 8003d0c:	4b4b      	ldr	r3, [pc, #300]	; (8003e3c <printer_do_step+0x174>)
 8003d0e:	2201      	movs	r2, #1
 8003d10:	2101      	movs	r1, #1
 8003d12:	0018      	movs	r0, r3
 8003d14:	f7fd ff5a 	bl	8001bcc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, MOT_BIN2_PA7, GPIO_PIN_RESET);
 8003d18:	23a0      	movs	r3, #160	; 0xa0
 8003d1a:	05db      	lsls	r3, r3, #23
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	2180      	movs	r1, #128	; 0x80
 8003d20:	0018      	movs	r0, r3
 8003d22:	f7fd ff53 	bl	8001bcc <HAL_GPIO_WritePin>
			if(cDirection==1) cstep=1;
 8003d26:	1dfb      	adds	r3, r7, #7
 8003d28:	781b      	ldrb	r3, [r3, #0]
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d103      	bne.n	8003d36 <printer_do_step+0x6e>
 8003d2e:	4b42      	ldr	r3, [pc, #264]	; (8003e38 <printer_do_step+0x170>)
 8003d30:	2201      	movs	r2, #1
 8003d32:	701a      	strb	r2, [r3, #0]
			else cstep=3;
			break;
 8003d34:	e07c      	b.n	8003e30 <printer_do_step+0x168>
			else cstep=3;
 8003d36:	4b40      	ldr	r3, [pc, #256]	; (8003e38 <printer_do_step+0x170>)
 8003d38:	2203      	movs	r2, #3
 8003d3a:	701a      	strb	r2, [r3, #0]
			break;
 8003d3c:	e078      	b.n	8003e30 <printer_do_step+0x168>

		// Step 2
		case 1:
			HAL_GPIO_WritePin(GPIOA, MOT_AIN1_PA5, GPIO_PIN_RESET);
 8003d3e:	23a0      	movs	r3, #160	; 0xa0
 8003d40:	05db      	lsls	r3, r3, #23
 8003d42:	2200      	movs	r2, #0
 8003d44:	2120      	movs	r1, #32
 8003d46:	0018      	movs	r0, r3
 8003d48:	f7fd ff40 	bl	8001bcc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, MOT_AIN2_PA6, GPIO_PIN_SET);
 8003d4c:	23a0      	movs	r3, #160	; 0xa0
 8003d4e:	05db      	lsls	r3, r3, #23
 8003d50:	2201      	movs	r2, #1
 8003d52:	2140      	movs	r1, #64	; 0x40
 8003d54:	0018      	movs	r0, r3
 8003d56:	f7fd ff39 	bl	8001bcc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, MOT_BIN1_PB0, GPIO_PIN_RESET);
 8003d5a:	4b38      	ldr	r3, [pc, #224]	; (8003e3c <printer_do_step+0x174>)
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	2101      	movs	r1, #1
 8003d60:	0018      	movs	r0, r3
 8003d62:	f7fd ff33 	bl	8001bcc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, MOT_BIN2_PA7, GPIO_PIN_SET);
 8003d66:	23a0      	movs	r3, #160	; 0xa0
 8003d68:	05db      	lsls	r3, r3, #23
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	2180      	movs	r1, #128	; 0x80
 8003d6e:	0018      	movs	r0, r3
 8003d70:	f7fd ff2c 	bl	8001bcc <HAL_GPIO_WritePin>
			if(cDirection==1) cstep=2;
 8003d74:	1dfb      	adds	r3, r7, #7
 8003d76:	781b      	ldrb	r3, [r3, #0]
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d103      	bne.n	8003d84 <printer_do_step+0xbc>
 8003d7c:	4b2e      	ldr	r3, [pc, #184]	; (8003e38 <printer_do_step+0x170>)
 8003d7e:	2202      	movs	r2, #2
 8003d80:	701a      	strb	r2, [r3, #0]
			else cstep=0;
			break;
 8003d82:	e055      	b.n	8003e30 <printer_do_step+0x168>
			else cstep=0;
 8003d84:	4b2c      	ldr	r3, [pc, #176]	; (8003e38 <printer_do_step+0x170>)
 8003d86:	2200      	movs	r2, #0
 8003d88:	701a      	strb	r2, [r3, #0]
			break;
 8003d8a:	e051      	b.n	8003e30 <printer_do_step+0x168>

		// Step 3
		case 2:
			HAL_GPIO_WritePin(GPIOA, MOT_AIN1_PA5, GPIO_PIN_SET);
 8003d8c:	23a0      	movs	r3, #160	; 0xa0
 8003d8e:	05db      	lsls	r3, r3, #23
 8003d90:	2201      	movs	r2, #1
 8003d92:	2120      	movs	r1, #32
 8003d94:	0018      	movs	r0, r3
 8003d96:	f7fd ff19 	bl	8001bcc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, MOT_AIN2_PA6, GPIO_PIN_RESET);
 8003d9a:	23a0      	movs	r3, #160	; 0xa0
 8003d9c:	05db      	lsls	r3, r3, #23
 8003d9e:	2200      	movs	r2, #0
 8003da0:	2140      	movs	r1, #64	; 0x40
 8003da2:	0018      	movs	r0, r3
 8003da4:	f7fd ff12 	bl	8001bcc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, MOT_BIN1_PB0, GPIO_PIN_RESET);
 8003da8:	4b24      	ldr	r3, [pc, #144]	; (8003e3c <printer_do_step+0x174>)
 8003daa:	2200      	movs	r2, #0
 8003dac:	2101      	movs	r1, #1
 8003dae:	0018      	movs	r0, r3
 8003db0:	f7fd ff0c 	bl	8001bcc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, MOT_BIN2_PA7, GPIO_PIN_SET);
 8003db4:	23a0      	movs	r3, #160	; 0xa0
 8003db6:	05db      	lsls	r3, r3, #23
 8003db8:	2201      	movs	r2, #1
 8003dba:	2180      	movs	r1, #128	; 0x80
 8003dbc:	0018      	movs	r0, r3
 8003dbe:	f7fd ff05 	bl	8001bcc <HAL_GPIO_WritePin>
			if(cDirection==1) cstep=3;
 8003dc2:	1dfb      	adds	r3, r7, #7
 8003dc4:	781b      	ldrb	r3, [r3, #0]
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d103      	bne.n	8003dd2 <printer_do_step+0x10a>
 8003dca:	4b1b      	ldr	r3, [pc, #108]	; (8003e38 <printer_do_step+0x170>)
 8003dcc:	2203      	movs	r2, #3
 8003dce:	701a      	strb	r2, [r3, #0]
			else cstep=1;
			break;
 8003dd0:	e02e      	b.n	8003e30 <printer_do_step+0x168>
			else cstep=1;
 8003dd2:	4b19      	ldr	r3, [pc, #100]	; (8003e38 <printer_do_step+0x170>)
 8003dd4:	2201      	movs	r2, #1
 8003dd6:	701a      	strb	r2, [r3, #0]
			break;
 8003dd8:	e02a      	b.n	8003e30 <printer_do_step+0x168>

		// Step 4
		case 3:
			HAL_GPIO_WritePin(GPIOA, MOT_AIN1_PA5, GPIO_PIN_SET);
 8003dda:	23a0      	movs	r3, #160	; 0xa0
 8003ddc:	05db      	lsls	r3, r3, #23
 8003dde:	2201      	movs	r2, #1
 8003de0:	2120      	movs	r1, #32
 8003de2:	0018      	movs	r0, r3
 8003de4:	f7fd fef2 	bl	8001bcc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, MOT_AIN2_PA6, GPIO_PIN_RESET);
 8003de8:	23a0      	movs	r3, #160	; 0xa0
 8003dea:	05db      	lsls	r3, r3, #23
 8003dec:	2200      	movs	r2, #0
 8003dee:	2140      	movs	r1, #64	; 0x40
 8003df0:	0018      	movs	r0, r3
 8003df2:	f7fd feeb 	bl	8001bcc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, MOT_BIN1_PB0, GPIO_PIN_SET);
 8003df6:	4b11      	ldr	r3, [pc, #68]	; (8003e3c <printer_do_step+0x174>)
 8003df8:	2201      	movs	r2, #1
 8003dfa:	2101      	movs	r1, #1
 8003dfc:	0018      	movs	r0, r3
 8003dfe:	f7fd fee5 	bl	8001bcc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, MOT_BIN2_PA7, GPIO_PIN_RESET);
 8003e02:	23a0      	movs	r3, #160	; 0xa0
 8003e04:	05db      	lsls	r3, r3, #23
 8003e06:	2200      	movs	r2, #0
 8003e08:	2180      	movs	r1, #128	; 0x80
 8003e0a:	0018      	movs	r0, r3
 8003e0c:	f7fd fede 	bl	8001bcc <HAL_GPIO_WritePin>
			if(cDirection==1) cstep=0;
 8003e10:	1dfb      	adds	r3, r7, #7
 8003e12:	781b      	ldrb	r3, [r3, #0]
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d103      	bne.n	8003e20 <printer_do_step+0x158>
 8003e18:	4b07      	ldr	r3, [pc, #28]	; (8003e38 <printer_do_step+0x170>)
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	701a      	strb	r2, [r3, #0]
			else cstep=2;
			break;
 8003e1e:	e007      	b.n	8003e30 <printer_do_step+0x168>
			else cstep=2;
 8003e20:	4b05      	ldr	r3, [pc, #20]	; (8003e38 <printer_do_step+0x170>)
 8003e22:	2202      	movs	r2, #2
 8003e24:	701a      	strb	r2, [r3, #0]
			break;
 8003e26:	e003      	b.n	8003e30 <printer_do_step+0x168>

		default:
			cstep = 0;
 8003e28:	4b03      	ldr	r3, [pc, #12]	; (8003e38 <printer_do_step+0x170>)
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	701a      	strb	r2, [r3, #0]
			break;
 8003e2e:	46c0      	nop			; (mov r8, r8)
	}
}
 8003e30:	46c0      	nop			; (mov r8, r8)
 8003e32:	46bd      	mov	sp, r7
 8003e34:	b002      	add	sp, #8
 8003e36:	bd80      	pop	{r7, pc}
 8003e38:	20000454 	.word	0x20000454
 8003e3c:	50000400 	.word	0x50000400

08003e40 <DMA1_Channel1_IRQHandler>:

  __HAL_LINKDMA(&hadc,DMA_Handle,hdma_adc);
}

void DMA1_Channel1_IRQHandler(void)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8003e44:	4b03      	ldr	r3, [pc, #12]	; (8003e54 <DMA1_Channel1_IRQHandler+0x14>)
 8003e46:	0018      	movs	r0, r3
 8003e48:	f7fd fcd6 	bl	80017f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003e4c:	46c0      	nop			; (mov r8, r8)
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
 8003e52:	46c0      	nop			; (mov r8, r8)
 8003e54:	2000047c 	.word	0x2000047c

08003e58 <rtc_init>:
#include "rtc.h"

RTC_HandleTypeDef hrtc;

void rtc_init(void)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b086      	sub	sp, #24
 8003e5c:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime;
  RTC_DateTypeDef sDate;


  hrtc.Instance = RTC;
 8003e5e:	4b2e      	ldr	r3, [pc, #184]	; (8003f18 <rtc_init+0xc0>)
 8003e60:	4a2e      	ldr	r2, [pc, #184]	; (8003f1c <rtc_init+0xc4>)
 8003e62:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003e64:	4b2c      	ldr	r3, [pc, #176]	; (8003f18 <rtc_init+0xc0>)
 8003e66:	2200      	movs	r2, #0
 8003e68:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8003e6a:	4b2b      	ldr	r3, [pc, #172]	; (8003f18 <rtc_init+0xc0>)
 8003e6c:	227f      	movs	r2, #127	; 0x7f
 8003e6e:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8003e70:	4b29      	ldr	r3, [pc, #164]	; (8003f18 <rtc_init+0xc0>)
 8003e72:	22ff      	movs	r2, #255	; 0xff
 8003e74:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003e76:	4b28      	ldr	r3, [pc, #160]	; (8003f18 <rtc_init+0xc0>)
 8003e78:	2200      	movs	r2, #0
 8003e7a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8003e7c:	4b26      	ldr	r3, [pc, #152]	; (8003f18 <rtc_init+0xc0>)
 8003e7e:	2200      	movs	r2, #0
 8003e80:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003e82:	4b25      	ldr	r3, [pc, #148]	; (8003f18 <rtc_init+0xc0>)
 8003e84:	2200      	movs	r2, #0
 8003e86:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003e88:	4b23      	ldr	r3, [pc, #140]	; (8003f18 <rtc_init+0xc0>)
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003e8e:	4b22      	ldr	r3, [pc, #136]	; (8003f18 <rtc_init+0xc0>)
 8003e90:	0018      	movs	r0, r3
 8003e92:	f7fe fda7 	bl	80029e4 <HAL_RTC_Init>
 8003e96:	1e03      	subs	r3, r0, #0
 8003e98:	d004      	beq.n	8003ea4 <rtc_init+0x4c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003e9a:	4b21      	ldr	r3, [pc, #132]	; (8003f20 <rtc_init+0xc8>)
 8003e9c:	213a      	movs	r1, #58	; 0x3a
 8003e9e:	0018      	movs	r0, r3
 8003ea0:	f7ff fdbe 	bl	8003a20 <_Error_Handler>
  }

  //Initialize RTC and set the Time and Date
  sTime.Hours = 0x2;
 8003ea4:	1d3b      	adds	r3, r7, #4
 8003ea6:	2202      	movs	r2, #2
 8003ea8:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x2;
 8003eaa:	1d3b      	adds	r3, r7, #4
 8003eac:	2202      	movs	r2, #2
 8003eae:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x4;
 8003eb0:	1d3b      	adds	r3, r7, #4
 8003eb2:	2204      	movs	r2, #4
 8003eb4:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003eb6:	1d3b      	adds	r3, r7, #4
 8003eb8:	2200      	movs	r2, #0
 8003eba:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003ebc:	1d3b      	adds	r3, r7, #4
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8003ec2:	1d39      	adds	r1, r7, #4
 8003ec4:	4b14      	ldr	r3, [pc, #80]	; (8003f18 <rtc_init+0xc0>)
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	0018      	movs	r0, r3
 8003eca:	f7fe fe0f 	bl	8002aec <HAL_RTC_SetTime>
 8003ece:	1e03      	subs	r3, r0, #0
 8003ed0:	d004      	beq.n	8003edc <rtc_init+0x84>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003ed2:	4b13      	ldr	r3, [pc, #76]	; (8003f20 <rtc_init+0xc8>)
 8003ed4:	2145      	movs	r1, #69	; 0x45
 8003ed6:	0018      	movs	r0, r3
 8003ed8:	f7ff fda2 	bl	8003a20 <_Error_Handler>
  }

  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8003edc:	003b      	movs	r3, r7
 8003ede:	2201      	movs	r2, #1
 8003ee0:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8003ee2:	003b      	movs	r3, r7
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 8003ee8:	003b      	movs	r3, r7
 8003eea:	2201      	movs	r2, #1
 8003eec:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 8003eee:	003b      	movs	r3, r7
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8003ef4:	0039      	movs	r1, r7
 8003ef6:	4b08      	ldr	r3, [pc, #32]	; (8003f18 <rtc_init+0xc0>)
 8003ef8:	2201      	movs	r2, #1
 8003efa:	0018      	movs	r0, r3
 8003efc:	f7fe ff22 	bl	8002d44 <HAL_RTC_SetDate>
 8003f00:	1e03      	subs	r3, r0, #0
 8003f02:	d004      	beq.n	8003f0e <rtc_init+0xb6>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003f04:	4b06      	ldr	r3, [pc, #24]	; (8003f20 <rtc_init+0xc8>)
 8003f06:	214f      	movs	r1, #79	; 0x4f
 8003f08:	0018      	movs	r0, r3
 8003f0a:	f7ff fd89 	bl	8003a20 <_Error_Handler>
  }

}
 8003f0e:	46c0      	nop			; (mov r8, r8)
 8003f10:	46bd      	mov	sp, r7
 8003f12:	b006      	add	sp, #24
 8003f14:	bd80      	pop	{r7, pc}
 8003f16:	46c0      	nop			; (mov r8, r8)
 8003f18:	2000051c 	.word	0x2000051c
 8003f1c:	40002800 	.word	0x40002800
 8003f20:	080041a0 	.word	0x080041a0

08003f24 <rtc_get_time>:

RTC_TimeTypeDef rtc_get_time(void)
{
 8003f24:	b590      	push	{r4, r7, lr}
 8003f26:	b089      	sub	sp, #36	; 0x24
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef time;
	RTC_DateTypeDef date;

	HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8003f2c:	230c      	movs	r3, #12
 8003f2e:	18f9      	adds	r1, r7, r3
 8003f30:	4b0b      	ldr	r3, [pc, #44]	; (8003f60 <rtc_get_time+0x3c>)
 8003f32:	2200      	movs	r2, #0
 8003f34:	0018      	movs	r0, r3
 8003f36:	f7fe fea7 	bl	8002c88 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8003f3a:	2308      	movs	r3, #8
 8003f3c:	18f9      	adds	r1, r7, r3
 8003f3e:	4b08      	ldr	r3, [pc, #32]	; (8003f60 <rtc_get_time+0x3c>)
 8003f40:	2200      	movs	r2, #0
 8003f42:	0018      	movs	r0, r3
 8003f44:	f7fe ffbc 	bl	8002ec0 <HAL_RTC_GetDate>

	return time;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	220c      	movs	r2, #12
 8003f4c:	18ba      	adds	r2, r7, r2
 8003f4e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003f50:	c313      	stmia	r3!, {r0, r1, r4}
 8003f52:	ca03      	ldmia	r2!, {r0, r1}
 8003f54:	c303      	stmia	r3!, {r0, r1}

}
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	b009      	add	sp, #36	; 0x24
 8003f5c:	bd90      	pop	{r4, r7, pc}
 8003f5e:	46c0      	nop			; (mov r8, r8)
 8003f60:	2000051c 	.word	0x2000051c

08003f64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f68:	4b12      	ldr	r3, [pc, #72]	; (8003fb4 <HAL_MspInit+0x50>)
 8003f6a:	4a12      	ldr	r2, [pc, #72]	; (8003fb4 <HAL_MspInit+0x50>)
 8003f6c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003f6e:	2101      	movs	r1, #1
 8003f70:	430a      	orrs	r2, r1
 8003f72:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8003f74:	4b0f      	ldr	r3, [pc, #60]	; (8003fb4 <HAL_MspInit+0x50>)
 8003f76:	4a0f      	ldr	r2, [pc, #60]	; (8003fb4 <HAL_MspInit+0x50>)
 8003f78:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003f7a:	2180      	movs	r1, #128	; 0x80
 8003f7c:	0549      	lsls	r1, r1, #21
 8003f7e:	430a      	orrs	r2, r1
 8003f80:	639a      	str	r2, [r3, #56]	; 0x38

  /* System interrupt init*/
  /* SVC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8003f82:	2305      	movs	r3, #5
 8003f84:	425b      	negs	r3, r3
 8003f86:	2200      	movs	r2, #0
 8003f88:	2100      	movs	r1, #0
 8003f8a:	0018      	movs	r0, r3
 8003f8c:	f7fd fbea 	bl	8001764 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8003f90:	2302      	movs	r3, #2
 8003f92:	425b      	negs	r3, r3
 8003f94:	2200      	movs	r2, #0
 8003f96:	2100      	movs	r1, #0
 8003f98:	0018      	movs	r0, r3
 8003f9a:	f7fd fbe3 	bl	8001764 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	425b      	negs	r3, r3
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	2100      	movs	r1, #0
 8003fa6:	0018      	movs	r0, r3
 8003fa8:	f7fd fbdc 	bl	8001764 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003fac:	46c0      	nop			; (mov r8, r8)
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}
 8003fb2:	46c0      	nop			; (mov r8, r8)
 8003fb4:	40021000 	.word	0x40021000

08003fb8 <HAL_RTC_MspInit>:
  }

}

void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b082      	sub	sp, #8
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]

  if(hrtc->Instance==RTC)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a06      	ldr	r2, [pc, #24]	; (8003fe0 <HAL_RTC_MspInit+0x28>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d106      	bne.n	8003fd8 <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003fca:	4b06      	ldr	r3, [pc, #24]	; (8003fe4 <HAL_RTC_MspInit+0x2c>)
 8003fcc:	4a05      	ldr	r2, [pc, #20]	; (8003fe4 <HAL_RTC_MspInit+0x2c>)
 8003fce:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003fd0:	2180      	movs	r1, #128	; 0x80
 8003fd2:	02c9      	lsls	r1, r1, #11
 8003fd4:	430a      	orrs	r2, r1
 8003fd6:	651a      	str	r2, [r3, #80]	; 0x50
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003fd8:	46c0      	nop			; (mov r8, r8)
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	b002      	add	sp, #8
 8003fde:	bd80      	pop	{r7, pc}
 8003fe0:	40002800 	.word	0x40002800
 8003fe4:	40021000 	.word	0x40021000

08003fe8 <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003fec:	46c0      	nop			; (mov r8, r8)
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}

08003ff2 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8003ff2:	b580      	push	{r7, lr}
 8003ff4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003ff6:	e7fe      	b.n	8003ff6 <HardFault_Handler+0x4>

08003ff8 <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003ffc:	46c0      	nop			; (mov r8, r8)
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}

08004002 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8004002:	b580      	push	{r7, lr}
 8004004:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004006:	46c0      	nop			; (mov r8, r8)
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}

0800400c <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8004010:	f7fd fae8 	bl	80015e4 <HAL_IncTick>

	  if(HAL_RCC_GetHCLKFreq()>1000000)
 8004014:	f7fe fb40 	bl	8002698 <HAL_RCC_GetHCLKFreq>
 8004018:	0002      	movs	r2, r0
 800401a:	4b08      	ldr	r3, [pc, #32]	; (800403c <SysTick_Handler+0x30>)
 800401c:	429a      	cmp	r2, r3
 800401e:	d909      	bls.n	8004034 <SysTick_Handler+0x28>
	  {
		  HAL_SYSTICK_IRQHandler();
 8004020:	f7fd fbde 	bl	80017e0 <HAL_SYSTICK_IRQHandler>
		  TSL_tim_ProcessIT();
 8004024:	f7ff fa66 	bl	80034f4 <TSL_tim_ProcessIT>
		  LED_ProcessIT();
 8004028:	f7ff fb74 	bl	8003714 <LED_ProcessIT>
		  MAIN_TimerIT();
 800402c:	f7ff fc38 	bl	80038a0 <MAIN_TimerIT>
		  PRINTER_Print_ProcessIT();
 8004030:	f7ff fd14 	bl	8003a5c <PRINTER_Print_ProcessIT>
	  }


}
 8004034:	46c0      	nop			; (mov r8, r8)
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}
 800403a:	46c0      	nop			; (mov r8, r8)
 800403c:	000f4240 	.word	0x000f4240

08004040 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{    
 8004040:	b580      	push	{r7, lr}
 8004042:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8004044:	4b17      	ldr	r3, [pc, #92]	; (80040a4 <SystemInit+0x64>)
 8004046:	4a17      	ldr	r2, [pc, #92]	; (80040a4 <SystemInit+0x64>)
 8004048:	6812      	ldr	r2, [r2, #0]
 800404a:	2180      	movs	r1, #128	; 0x80
 800404c:	0049      	lsls	r1, r1, #1
 800404e:	430a      	orrs	r2, r1
 8004050:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8004052:	4b14      	ldr	r3, [pc, #80]	; (80040a4 <SystemInit+0x64>)
 8004054:	4a13      	ldr	r2, [pc, #76]	; (80040a4 <SystemInit+0x64>)
 8004056:	68d2      	ldr	r2, [r2, #12]
 8004058:	4913      	ldr	r1, [pc, #76]	; (80040a8 <SystemInit+0x68>)
 800405a:	400a      	ands	r2, r1
 800405c:	60da      	str	r2, [r3, #12]
 
  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 800405e:	4b11      	ldr	r3, [pc, #68]	; (80040a4 <SystemInit+0x64>)
 8004060:	4a10      	ldr	r2, [pc, #64]	; (80040a4 <SystemInit+0x64>)
 8004062:	6812      	ldr	r2, [r2, #0]
 8004064:	4911      	ldr	r1, [pc, #68]	; (80040ac <SystemInit+0x6c>)
 8004066:	400a      	ands	r2, r1
 8004068:	601a      	str	r2, [r3, #0]
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800406a:	4b0e      	ldr	r3, [pc, #56]	; (80040a4 <SystemInit+0x64>)
 800406c:	4a0d      	ldr	r2, [pc, #52]	; (80040a4 <SystemInit+0x64>)
 800406e:	6892      	ldr	r2, [r2, #8]
 8004070:	2101      	movs	r1, #1
 8004072:	438a      	bics	r2, r1
 8004074:	609a      	str	r2, [r3, #8]
  
  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8004076:	4b0b      	ldr	r3, [pc, #44]	; (80040a4 <SystemInit+0x64>)
 8004078:	4a0a      	ldr	r2, [pc, #40]	; (80040a4 <SystemInit+0x64>)
 800407a:	6812      	ldr	r2, [r2, #0]
 800407c:	490c      	ldr	r1, [pc, #48]	; (80040b0 <SystemInit+0x70>)
 800407e:	400a      	ands	r2, r1
 8004080:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8004082:	4b08      	ldr	r3, [pc, #32]	; (80040a4 <SystemInit+0x64>)
 8004084:	4a07      	ldr	r2, [pc, #28]	; (80040a4 <SystemInit+0x64>)
 8004086:	68d2      	ldr	r2, [r2, #12]
 8004088:	490a      	ldr	r1, [pc, #40]	; (80040b4 <SystemInit+0x74>)
 800408a:	400a      	ands	r2, r1
 800408c:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800408e:	4b05      	ldr	r3, [pc, #20]	; (80040a4 <SystemInit+0x64>)
 8004090:	2200      	movs	r2, #0
 8004092:	611a      	str	r2, [r3, #16]
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004094:	4b08      	ldr	r3, [pc, #32]	; (80040b8 <SystemInit+0x78>)
 8004096:	2280      	movs	r2, #128	; 0x80
 8004098:	0512      	lsls	r2, r2, #20
 800409a:	609a      	str	r2, [r3, #8]
#endif
}
 800409c:	46c0      	nop			; (mov r8, r8)
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}
 80040a2:	46c0      	nop			; (mov r8, r8)
 80040a4:	40021000 	.word	0x40021000
 80040a8:	88ff400c 	.word	0x88ff400c
 80040ac:	fef6fff6 	.word	0xfef6fff6
 80040b0:	fffbffff 	.word	0xfffbffff
 80040b4:	ff02ffff 	.word	0xff02ffff
 80040b8:	e000ed00 	.word	0xe000ed00

080040bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80040bc:	480d      	ldr	r0, [pc, #52]	; (80040f4 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80040be:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 80040c0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80040c2:	e003      	b.n	80040cc <LoopCopyDataInit>

080040c4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80040c4:	4b0c      	ldr	r3, [pc, #48]	; (80040f8 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 80040c6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80040c8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80040ca:	3104      	adds	r1, #4

080040cc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 80040cc:	480b      	ldr	r0, [pc, #44]	; (80040fc <LoopForever+0xa>)
  ldr  r3, =_edata
 80040ce:	4b0c      	ldr	r3, [pc, #48]	; (8004100 <LoopForever+0xe>)
  adds  r2, r0, r1
 80040d0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80040d2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80040d4:	d3f6      	bcc.n	80040c4 <CopyDataInit>
  ldr  r2, =_sbss
 80040d6:	4a0b      	ldr	r2, [pc, #44]	; (8004104 <LoopForever+0x12>)
  b  LoopFillZerobss
 80040d8:	e002      	b.n	80040e0 <LoopFillZerobss>

080040da <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 80040da:	2300      	movs	r3, #0
  str  r3, [r2]
 80040dc:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80040de:	3204      	adds	r2, #4

080040e0 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 80040e0:	4b09      	ldr	r3, [pc, #36]	; (8004108 <LoopForever+0x16>)
  cmp  r2, r3
 80040e2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80040e4:	d3f9      	bcc.n	80040da <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80040e6:	f7ff ffab 	bl	8004040 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80040ea:	f000 f811 	bl	8004110 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80040ee:	f7ff fba7 	bl	8003840 <main>

080040f2 <LoopForever>:

LoopForever:
    b LoopForever
 80040f2:	e7fe      	b.n	80040f2 <LoopForever>
   ldr   r0, =_estack
 80040f4:	20002000 	.word	0x20002000
  ldr  r3, =_sidata
 80040f8:	08004254 	.word	0x08004254
  ldr  r0, =_sdata
 80040fc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004100:	20000008 	.word	0x20000008
  ldr  r2, =_sbss
 8004104:	20000008 	.word	0x20000008
  ldr  r3, = _ebss
 8004108:	20000540 	.word	0x20000540

0800410c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800410c:	e7fe      	b.n	800410c <ADC1_COMP_IRQHandler>
	...

08004110 <__libc_init_array>:
 8004110:	b570      	push	{r4, r5, r6, lr}
 8004112:	2600      	movs	r6, #0
 8004114:	4d0c      	ldr	r5, [pc, #48]	; (8004148 <__libc_init_array+0x38>)
 8004116:	4c0d      	ldr	r4, [pc, #52]	; (800414c <__libc_init_array+0x3c>)
 8004118:	1b64      	subs	r4, r4, r5
 800411a:	10a4      	asrs	r4, r4, #2
 800411c:	42a6      	cmp	r6, r4
 800411e:	d109      	bne.n	8004134 <__libc_init_array+0x24>
 8004120:	2600      	movs	r6, #0
 8004122:	f000 f821 	bl	8004168 <_init>
 8004126:	4d0a      	ldr	r5, [pc, #40]	; (8004150 <__libc_init_array+0x40>)
 8004128:	4c0a      	ldr	r4, [pc, #40]	; (8004154 <__libc_init_array+0x44>)
 800412a:	1b64      	subs	r4, r4, r5
 800412c:	10a4      	asrs	r4, r4, #2
 800412e:	42a6      	cmp	r6, r4
 8004130:	d105      	bne.n	800413e <__libc_init_array+0x2e>
 8004132:	bd70      	pop	{r4, r5, r6, pc}
 8004134:	00b3      	lsls	r3, r6, #2
 8004136:	58eb      	ldr	r3, [r5, r3]
 8004138:	4798      	blx	r3
 800413a:	3601      	adds	r6, #1
 800413c:	e7ee      	b.n	800411c <__libc_init_array+0xc>
 800413e:	00b3      	lsls	r3, r6, #2
 8004140:	58eb      	ldr	r3, [r5, r3]
 8004142:	4798      	blx	r3
 8004144:	3601      	adds	r6, #1
 8004146:	e7f2      	b.n	800412e <__libc_init_array+0x1e>
 8004148:	0800424c 	.word	0x0800424c
 800414c:	0800424c 	.word	0x0800424c
 8004150:	0800424c 	.word	0x0800424c
 8004154:	08004250 	.word	0x08004250

08004158 <memset>:
 8004158:	0003      	movs	r3, r0
 800415a:	1882      	adds	r2, r0, r2
 800415c:	4293      	cmp	r3, r2
 800415e:	d100      	bne.n	8004162 <memset+0xa>
 8004160:	4770      	bx	lr
 8004162:	7019      	strb	r1, [r3, #0]
 8004164:	3301      	adds	r3, #1
 8004166:	e7f9      	b.n	800415c <memset+0x4>

08004168 <_init>:
 8004168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800416a:	46c0      	nop			; (mov r8, r8)
 800416c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800416e:	bc08      	pop	{r3}
 8004170:	469e      	mov	lr, r3
 8004172:	4770      	bx	lr

08004174 <_fini>:
 8004174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004176:	46c0      	nop			; (mov r8, r8)
 8004178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800417a:	bc08      	pop	{r3}
 800417c:	469e      	mov	lr, r3
 800417e:	4770      	bx	lr
